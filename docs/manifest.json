{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json", "dbt_version": "1.1.1", "generated_at": "2022-07-22T16:52:42.697109Z", "invocation_id": "2cf56260-a697-49e4-9a32-2883fb49e305", "env": {}, "project_id": "85f06cc816f93b8a6dbb1a494f813358", "user_id": "426067cb-b894-4e7b-9e20-b433c3400047", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.near.metrics__daily_transactions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    tags = ['metrics', 'transactions'],\n    cluster_by = ['date']\n) }}\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        {{ incremental_last_x_days(\n            \"_inserted_timestamp\",\n            2\n        ) }}\n),\nn_transactions AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        COUNT(\n            DISTINCT tx_hash\n        ) AS daily_transactions\n    FROM\n        txs\n    GROUP BY\n        1\n)\nSELECT\n    *\nFROM\n    n_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_last_x_days"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics", "transactions"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "cluster_by": ["date"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "metrics", "fqn": ["near", "metrics", "metrics__daily_transactions"], "unique_id": "model.near.metrics__daily_transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "metrics/metrics__daily_transactions.sql", "original_file_path": "models/metrics/metrics__daily_transactions.sql", "name": "metrics__daily_transactions", "alias": "daily_transactions", "checksum": {"name": "sha256", "checksum": "c00881033a1a203f62a1aab5991b1536229ba2a8d3648e93bfc982bd34493db9"}, "tags": ["metrics", "transactions"], "refs": [["silver__transactions"]], "sources": [], "description": "Daily number of near transactions.", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_TRANSACTIONS": {"name": "DAILY_TRANSACTIONS", "description": "The daily number of transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/metrics/metrics__daily_transactions.yml", "compiled_path": "target/compiled/near/models/metrics/metrics__daily_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "incremental_strategy": "delete+insert", "tags": ["metrics", "transactions"], "cluster_by": ["date"]}, "created_at": 1658508765.2671523, "compiled_sql": "\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transactions\n    WHERE\n        \n_inserted_timestamp >= CURRENT_DATE() - INTERVAL '2 day'\n\n),\nn_transactions AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        COUNT(\n            DISTINCT tx_hash\n        ) AS daily_transactions\n    FROM\n        txs\n    GROUP BY\n        1\n)\nSELECT\n    *\nFROM\n    n_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.metrics.daily_transactions"}, "model.near.metrics__active_wallets": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    tags = ['metrics'],\n    cluster_by = ['date']\n) }}\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        {{ incremental_last_x_days(\n            \"_inserted_timestamp\",\n            2\n        ) }}\n),\nactive_wallets AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        COUNT(\n            DISTINCT tx_signer\n        ) AS daily_active_wallets,\n        SUM(daily_active_wallets) over (\n            ORDER BY\n                DATE rows BETWEEN 6 preceding\n                AND CURRENT ROW\n        ) AS rolling_7day_active_wallets,\n        SUM(daily_active_wallets) over (\n            ORDER BY\n                DATE rows BETWEEN 29 preceding\n                AND CURRENT ROW\n        ) AS rolling_30day_active_wallets\n    FROM\n        txs\n    GROUP BY\n        1\n)\nSELECT\n    *\nFROM\n    active_wallets", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_last_x_days"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "cluster_by": ["date"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "metrics", "fqn": ["near", "metrics", "metrics__active_wallets"], "unique_id": "model.near.metrics__active_wallets", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "metrics/metrics__active_wallets.sql", "original_file_path": "models/metrics/metrics__active_wallets.sql", "name": "metrics__active_wallets", "alias": "active_wallets", "checksum": {"name": "sha256", "checksum": "254a9155c88e5af734d1d6bdb2facdb0f6c3075f7ca093a92a16ff217d109253"}, "tags": ["metrics"], "refs": [["silver__transactions"]], "sources": [], "description": "Daily, rolling 7 day, and rolling 30 day active wallets on NEAR.", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_ACTIVE_WALLETS": {"name": "DAILY_ACTIVE_WALLETS", "description": "The daily number of active wallets.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLLING_7DAY_ACTIVE_WALLETS": {"name": "ROLLING_7DAY_ACTIVE_WALLETS", "description": "The number of active wallets in the last 7 days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLLING_30DAY_ACTIVE_WALLETS": {"name": "ROLLING_30DAY_ACTIVE_WALLETS", "description": "The number of active wallets in the last 30 days.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/metrics/metrics__active_wallets.yml", "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "incremental_strategy": "delete+insert", "tags": ["metrics"], "cluster_by": ["date"]}, "created_at": 1658508765.2253451, "compiled_sql": "\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transactions\n    WHERE\n        \n_inserted_timestamp >= CURRENT_DATE() - INTERVAL '2 day'\n\n),\nactive_wallets AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        COUNT(\n            DISTINCT tx_signer\n        ) AS daily_active_wallets,\n        SUM(daily_active_wallets) over (\n            ORDER BY\n                DATE rows BETWEEN 6 preceding\n                AND CURRENT ROW\n        ) AS rolling_7day_active_wallets,\n        SUM(daily_active_wallets) over (\n            ORDER BY\n                DATE rows BETWEEN 29 preceding\n                AND CURRENT ROW\n        ) AS rolling_30day_active_wallets\n    FROM\n        txs\n    GROUP BY\n        1\n)\nSELECT\n    *\nFROM\n    active_wallets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.metrics.active_wallets"}, "model.near.metrics__daily_gas": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    tags = ['metrics', 'transactions'],\n    cluster_by = ['date']\n) }}\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        {{ incremental_last_x_days(\n            \"_inserted_timestamp\",\n            2\n        ) }}\n),\nblocks AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__blocks') }}\n    WHERE\n        {{ incremental_last_x_days(\n            \"_inserted_timestamp\",\n            2\n        ) }}\n),\ngas_used AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        SUM(gas_used) AS daily_gas_used --gas units (10^-12 Tgas)\n    FROM\n        txs\n    GROUP BY\n        1\n),\nSECOND AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        ROUND(AVG(gas_price), 2) AS avg_gas_price --units in yoctoNEAR (10^-24 NEAR)\n    FROM\n        blocks\n    GROUP BY\n        1),\n        FINAL AS (\n            SELECT\n                f.date,\n                f.daily_gas_used AS daily_gas_used,\n                s.avg_gas_price AS avg_gas_price\n            FROM\n                gas_used AS f\n                JOIN SECOND AS s\n                ON f.date = s.date\n        )\n    SELECT\n        *\n    FROM\n        FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_last_x_days"], "nodes": ["model.near.silver__transactions", "model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["metrics", "transactions"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "cluster_by": ["date"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "metrics", "fqn": ["near", "metrics", "metrics__daily_gas"], "unique_id": "model.near.metrics__daily_gas", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "metrics/metrics__daily_gas.sql", "original_file_path": "models/metrics/metrics__daily_gas.sql", "name": "metrics__daily_gas", "alias": "daily_gas", "checksum": {"name": "sha256", "checksum": "33f620f52e59a3862fde790cc279f739dca46800eecb19df02407f701582e77b"}, "tags": ["metrics", "transactions"], "refs": [["silver__transactions"], ["silver__blocks"]], "sources": [], "description": "Daily gas metrics of near transactions.", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_GAS_USED": {"name": "DAILY_GAS_USED", "description": "The total daily gas used in transactions. Not decimal adjusted; gas units (10^-12 Tgas)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_GAS_PRICE": {"name": "AVG_GAS_PRICE", "description": "The average gas price in transactions. Not decimal adjusted; units in yoctoNEAR (10^-24 NEAR)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/metrics/metrics__daily_gas.yml", "compiled_path": "target/compiled/near/models/metrics/metrics__daily_gas.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "incremental_strategy": "delete+insert", "tags": ["metrics", "transactions"], "cluster_by": ["date"]}, "created_at": 1658508765.1152875, "compiled_sql": "\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transactions\n    WHERE\n        \n_inserted_timestamp >= CURRENT_DATE() - INTERVAL '2 day'\n\n),\nblocks AS (\n    SELECT\n        *\n    FROM\n        NEAR.silver.blocks\n    WHERE\n        \n_inserted_timestamp >= CURRENT_DATE() - INTERVAL '2 day'\n\n),\ngas_used AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        SUM(gas_used) AS daily_gas_used --gas units (10^-12 Tgas)\n    FROM\n        txs\n    GROUP BY\n        1\n),\nSECOND AS (\n    SELECT\n        DATE_TRUNC(\n            'day',\n            block_timestamp\n        ) AS DATE,\n        ROUND(AVG(gas_price), 2) AS avg_gas_price --units in yoctoNEAR (10^-24 NEAR)\n    FROM\n        blocks\n    GROUP BY\n        1),\n        FINAL AS (\n            SELECT\n                f.date,\n                f.daily_gas_used AS daily_gas_used,\n                s.avg_gas_price AS avg_gas_price\n            FROM\n                gas_used AS f\n                JOIN SECOND AS s\n                ON f.date = s.date\n        )\n    SELECT\n        *\n    FROM\n        FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.metrics.daily_gas"}, "model.near.silver__blocks": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'block_id',\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n) }}\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__blocks') }}\n    WHERE\n        {{ incremental_load_filter('_inserted_timestamp') }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nFINAL AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        header :hash :: STRING AS block_hash,\n        header :tx_count :: INTEGER AS tx_count,\n        header :author :: STRING AS block_author,\n        header :challenges_result AS block_challenges_result,\n        header :challenges_root :: STRING AS block_challenges_root,\n        header :chunk_headers_root :: STRING AS chunk_headers_root,\n        header :chunk_mask AS chunk_mask,\n        header :chunk_receipts_root :: STRING AS chunk_receipts_root,\n        header :chunk_tx_root :: STRING AS chunk_tx_root,\n        header :chunks AS chunks,\n        header :chunks_included :: INTEGER AS chunks_included,\n        header :epoch_id :: STRING AS epoch_id,\n        header :epoch_sync_data_hash :: STRING AS epoch_sync_data_hash,\n        header :events AS events,\n        header :gas_price :: FLOAT AS gas_price,\n        header :last_ds_final_block :: STRING AS last_ds_final_block,\n        header :last_final_block :: STRING AS last_final_block,\n        header :latest_protocol_version :: INTEGER AS latest_protocol_version,\n        header :next_bp_hash :: STRING AS next_bp_hash,\n        header :next_epoch_id :: STRING AS next_epoch_id,\n        header :outcome_root :: STRING AS outcome_root,\n        header :prev_hash :: STRING AS prev_hash,\n        header :prev_height :: INTEGER AS prev_height,\n        header :prev_state_root :: STRING AS prev_state_root,\n        header :random_value :: STRING AS random_value,\n        header :rent_paid :: FLOAT AS rent_paid,\n        header :signature :: STRING AS signature,\n        header :total_supply :: FLOAT AS total_supply,\n        header :validator_proposals AS validator_proposals,\n        header :validator_reward :: FLOAT AS validator_reward,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        base_blocks\n)\nSELECT\n    *\nFROM\n    FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_load_filter"], "nodes": ["model.near.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "silver", "fqn": ["near", "silver", "silver__blocks"], "unique_id": "model.near.silver__blocks", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "8579d687e3b4e15a78e655911a73b7a49ff84a6fd6e0130c7e6721e5c096330c"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "description": "This table records all the blocks of Near blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The `tx_count` taken from block headers. The number of transactions included in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_AUTHOR": {"name": "BLOCK_AUTHOR", "description": "The `block_author` taken from block headers. Validators of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_CHALLENGES_RESULT": {"name": "BLOCK_CHALLENGES_RESULT", "description": "The block_challenges_result taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_CHALLENGES_ROOT": {"name": "BLOCK_CHALLENGES_ROOT", "description": "The block_challenges_root taken from block headers. TODO check this column expectation, number?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_HEADERS_ROOT": {"name": "CHUNK_HEADERS_ROOT", "description": "The chunk_headers_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_MASK": {"name": "CHUNK_MASK", "description": "The chunk_mask taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_RECEIPTS_ROOT": {"name": "CHUNK_RECEIPTS_ROOT", "description": "The chunk_receipts_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_TX_ROOT": {"name": "CHUNK_TX_ROOT", "description": "The chunk_tx_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNKS": {"name": "CHUNKS", "description": "The chunks taken from block headers. Chunk is an aggregation of transactions which are executed within a particular shard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNKS_INCLUDED": {"name": "CHUNKS_INCLUDED", "description": "The chunks_included taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EPOCH_ID": {"name": "EPOCH_ID", "description": "The epoch_id taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EPOCH_SYNC_DATA_HASH": {"name": "EPOCH_SYNC_DATA_HASH", "description": "The epoch_sync_data_hash taken from block headers, if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENTS": {"name": "EVENTS", "description": "The events taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "The gas_price taken from block headers, number is not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_DS_FINAL_BLOCK": {"name": "LAST_DS_FINAL_BLOCK", "description": "The last_ds_final_block taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_FINAL_BLOCK": {"name": "LAST_FINAL_BLOCK", "description": "The last_final_block taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATEST_PROTOCOL_VERSION": {"name": "LATEST_PROTOCOL_VERSION", "description": "The latest_protocol_version taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_BP_HASH": {"name": "NEXT_BP_HASH", "description": "The next_bp_hash taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_EPOCH_ID": {"name": "NEXT_EPOCH_ID", "description": "The next_epoch_id taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OUTCOME_ROOT": {"name": "OUTCOME_ROOT", "description": "The outcome_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_HASH": {"name": "PREV_HASH", "description": "The prev_hash taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_HEIGHT": {"name": "PREV_HEIGHT", "description": "The prev_height taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_STATE_ROOT": {"name": "PREV_STATE_ROOT", "description": "The prev_state_root taken from block headers. TODO can this be null?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RANDOM_VALUE": {"name": "RANDOM_VALUE", "description": "The random_value taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RENT_PAID": {"name": "RENT_PAID", "description": "The rent_paid taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNATURE": {"name": "SIGNATURE", "description": "The signature taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SUPPLY": {"name": "TOTAL_SUPPLY", "description": "The total_supply taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_PROPOSALS": {"name": "VALIDATOR_PROPOSALS", "description": "The validator_proposals taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_REWARD": {"name": "VALIDATOR_REWARD", "description": "The validator_reward taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/near/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1658508765.9460018, "compiled_sql": "\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        NEAR.bronze.blocks\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"NEAR.silver.blocks\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.blocks\n)\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nFINAL AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        header :hash :: STRING AS block_hash,\n        header :tx_count :: INTEGER AS tx_count,\n        header :author :: STRING AS block_author,\n        header :challenges_result AS block_challenges_result,\n        header :challenges_root :: STRING AS block_challenges_root,\n        header :chunk_headers_root :: STRING AS chunk_headers_root,\n        header :chunk_mask AS chunk_mask,\n        header :chunk_receipts_root :: STRING AS chunk_receipts_root,\n        header :chunk_tx_root :: STRING AS chunk_tx_root,\n        header :chunks AS chunks,\n        header :chunks_included :: INTEGER AS chunks_included,\n        header :epoch_id :: STRING AS epoch_id,\n        header :epoch_sync_data_hash :: STRING AS epoch_sync_data_hash,\n        header :events AS events,\n        header :gas_price :: FLOAT AS gas_price,\n        header :last_ds_final_block :: STRING AS last_ds_final_block,\n        header :last_final_block :: STRING AS last_final_block,\n        header :latest_protocol_version :: INTEGER AS latest_protocol_version,\n        header :next_bp_hash :: STRING AS next_bp_hash,\n        header :next_epoch_id :: STRING AS next_epoch_id,\n        header :outcome_root :: STRING AS outcome_root,\n        header :prev_hash :: STRING AS prev_hash,\n        header :prev_height :: INTEGER AS prev_height,\n        header :prev_state_root :: STRING AS prev_state_root,\n        header :random_value :: STRING AS random_value,\n        header :rent_paid :: FLOAT AS rent_paid,\n        header :signature :: STRING AS signature,\n        header :total_supply :: FLOAT AS total_supply,\n        header :validator_proposals AS validator_proposals,\n        header :validator_reward :: FLOAT AS validator_reward,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        base_blocks\n)\nSELECT\n    *\nFROM\n    FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.silver.blocks"}, "model.near.silver__actions_events_addkey": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  incremental_strategy = 'delete+insert',\n  unique_key = 'action_id',\n  cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n) }}\n\nWITH action_events AS (\n\n  SELECT\n    *\n  FROM\n    {{ ref('silver__actions_events') }}\n  WHERE\n    action_name = 'AddKey'\n    AND {{ incremental_load_filter('_inserted_timestamp') }}\n),\naddkey_events AS (\n  SELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_data :access_key :nonce :: NUMBER AS nonce,\n    action_data :public_key :: STRING AS public_key,\n    action_data :access_key :permission AS permission,\n    action_data :access_key :permission :FunctionCall :allowance :: FLOAT AS allowance,\n    action_data :access_key :permission :FunctionCall :method_names :: ARRAY AS method_name,\n    action_data :access_key :permission :FunctionCall :receiver_id :: STRING AS receiver_id,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    action_events\n)\nSELECT\n  *\nFROM\n  addkey_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_load_filter"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "action_id", "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "silver", "fqn": ["near", "silver", "silver__actions_events_addkey"], "unique_id": "model.near.silver__actions_events_addkey", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "silver/silver__actions_events_addkey.sql", "original_file_path": "models/silver/silver__actions_events_addkey.sql", "name": "silver__actions_events_addkey", "alias": "actions_events_addkey", "checksum": {"name": "sha256", "checksum": "6805ea87ce9d93d36e145ddeacee1529f15d119ebe363db8409ab38d43b16889"}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "This table extracts all AddKey events from actions and stores the argument data under action_data.", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "Nonce for transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PUBLIC_KEY": {"name": "PUBLIC_KEY", "description": "The public key of an AccessKey which was used to sign the original transaction. In case of a deposit refund, the public key is empty (all bytes are 0).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PERMISSION": {"name": "PERMISSION", "description": "Permissions granted to the contract by the signer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALLOWANCE": {"name": "ALLOWANCE", "description": "Amount of NEAR approved for use in unadjusted format (10^24). NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METHOD_NAME": {"name": "METHOD_NAME", "description": "Name of the method(s) approved for use. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER_ID": {"name": "RECEIVER_ID", "description": "The account ID of the destination of this transaction. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/silver/silver__actions_events_addkey.yml", "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "action_id", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1658508765.5252764, "compiled_sql": "\n\nWITH action_events AS (\n\n  SELECT\n    *\n  FROM\n    NEAR.silver.actions_events\n  WHERE\n    action_name = 'AddKey'\n    AND -- dbt makes it easy to query your target table by using the \"NEAR.silver.actions_events_addkey\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.actions_events_addkey\n)\n),\naddkey_events AS (\n  SELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_data :access_key :nonce :: NUMBER AS nonce,\n    action_data :public_key :: STRING AS public_key,\n    action_data :access_key :permission AS permission,\n    action_data :access_key :permission :FunctionCall :allowance :: FLOAT AS allowance,\n    action_data :access_key :permission :FunctionCall :method_names :: ARRAY AS method_name,\n    action_data :access_key :permission :FunctionCall :receiver_id :: STRING AS receiver_id,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    action_events\n)\nSELECT\n  *\nFROM\n  addkey_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.silver.actions_events_addkey"}, "model.near.silver__actions_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n  unique_key = 'action_id',\n) }}\n\nWITH txs AS (\n\n  SELECT\n    block_id,\n    block_hash,\n    tx_hash,\n    block_timestamp,\n    nonce,\n    signature,\n    tx_receiver,\n    tx_signer,\n    tx,\n    gas_used,\n    transaction_fee,\n    attached_gas,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__transactions') }}\n  WHERE\n    {{ incremental_load_filter('_inserted_timestamp') }}\n),\nactions AS (\n  SELECT\n    tx_hash,\n    block_id,\n    block_timestamp,\n    INDEX AS action_index,\n    CASE\n      WHEN VALUE LIKE '%CreateAccount%' THEN VALUE\n      ELSE object_keys(VALUE) [0] :: STRING\n    END AS action_name,\n    CASE\n      WHEN action_name = 'CreateAccount' THEN '{}'\n      ELSE VALUE [action_name]\n    END AS action_data,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    txs,\n    LATERAL FLATTEN(\n      input => tx :actions\n    )\n),\nFINAL AS (\n  SELECT\n    concat_ws(\n      '-',\n      tx_hash,\n      action_index\n    ) AS action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_index,\n    action_name,\n    TRY_PARSE_JSON(action_data) AS action_data,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    actions\n)\nSELECT\n  *\nFROM\n  FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_load_filter"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "action_id", "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "silver", "fqn": ["near", "silver", "silver__actions_events"], "unique_id": "model.near.silver__actions_events", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "silver/silver__actions_events.sql", "original_file_path": "models/silver/silver__actions_events.sql", "name": "silver__actions_events", "alias": "actions_events", "checksum": {"name": "sha256", "checksum": "c0c5268f7c56fd467e6d04328262e5dda20981127f8a0a217e52ee97550f48bd"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "This table extracts all action events from a transaction and stores the argument data under action_data.", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_INDEX": {"name": "ACTION_INDEX", "description": "The index of the current `action_name` and `action_data` in the order in which it appeared in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_NAME": {"name": "ACTION_NAME", "description": "The name of the action performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_DATA": {"name": "ACTION_DATA", "description": "A JSON object containing the argument data that was called by the `action_event`, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/silver/silver__actions_events.yml", "compiled_path": "target/compiled/near/models/silver/silver__actions_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "unique_key": "action_id"}, "created_at": 1658508765.292914, "compiled_sql": "\n\nWITH txs AS (\n\n  SELECT\n    block_id,\n    block_hash,\n    tx_hash,\n    block_timestamp,\n    nonce,\n    signature,\n    tx_receiver,\n    tx_signer,\n    tx,\n    gas_used,\n    transaction_fee,\n    attached_gas,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    NEAR.silver.transactions\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"NEAR.silver.actions_events\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.actions_events\n)\n),\nactions AS (\n  SELECT\n    tx_hash,\n    block_id,\n    block_timestamp,\n    INDEX AS action_index,\n    CASE\n      WHEN VALUE LIKE '%CreateAccount%' THEN VALUE\n      ELSE object_keys(VALUE) [0] :: STRING\n    END AS action_name,\n    CASE\n      WHEN action_name = 'CreateAccount' THEN '{}'\n      ELSE VALUE [action_name]\n    END AS action_data,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    txs,\n    LATERAL FLATTEN(\n      input => tx :actions\n    )\n),\nFINAL AS (\n  SELECT\n    concat_ws(\n      '-',\n      tx_hash,\n      action_index\n    ) AS action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_index,\n    action_name,\n    TRY_PARSE_JSON(action_data) AS action_data,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    actions\n)\nSELECT\n  *\nFROM\n  FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.silver.actions_events"}, "model.near.silver__transactions": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'tx_hash',\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n) }}\n\nWITH base_transactions AS (\n\n  SELECT\n    record_id,\n    tx_hash,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    {{ ref('bronze__transactions') }}\n  WHERE\n    {{ incremental_load_filter('_inserted_timestamp') }}\n    qualify ROW_NUMBER() over (\n      PARTITION BY tx_hash\n      ORDER BY\n        _inserted_timestamp DESC\n    ) = 1\n),\ntransactions AS (\n  SELECT\n    block_id AS block_id,\n    tx :outcome :block_hash :: STRING AS block_hash,\n    tx_hash,\n    block_timestamp,\n    tx :nonce :: NUMBER AS nonce,\n    tx :signature :: STRING AS signature,\n    tx :receiver_id :: STRING AS tx_receiver,\n    tx :signer_id :: STRING AS tx_signer,\n    tx,\n    tx :outcome :outcome :gas_burnt :: NUMBER AS transaction_gas_burnt,\n    tx :outcome :outcome :tokens_burnt :: NUMBER AS transaction_tokens_burnt,\n    GET(\n      tx :actions,\n      0\n    ) :FunctionCall :gas :: NUMBER AS attached_gas,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    base_transactions\n),\nreceipts AS (\n  SELECT\n    tx_hash,\n    SUM(\n      VALUE :outcome :gas_burnt :: NUMBER\n    ) AS receipt_gas_burnt,\n    SUM(\n      VALUE :outcome :tokens_burnt :: NUMBER\n    ) AS receipt_tokens_burnt\n  FROM\n    transactions,\n    LATERAL FLATTEN(\n      input => tx :receipt\n    )\n  GROUP BY\n    1\n),\nFINAL AS (\n  SELECT\n    t.block_id,\n    t.block_hash,\n    t.tx_hash,\n    t.block_timestamp,\n    t.nonce,\n    t.signature,\n    t.tx_receiver,\n    t.tx_signer,\n    t.tx,\n    t.transaction_gas_burnt + r.receipt_gas_burnt AS gas_used,\n    t.transaction_tokens_burnt + r.receipt_tokens_burnt AS transaction_fee,\n    COALESCE(\n      t.attached_gas,\n      gas_used\n    ) AS attached_gas,\n    t._ingested_at,\n    t._inserted_timestamp\n  FROM\n    transactions AS t\n    JOIN receipts AS r\n    ON t.tx_hash = r.tx_hash\n)\nSELECT\n  *\nFROM\n  FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_load_filter"], "nodes": ["model.near.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_hash", "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "silver", "fqn": ["near", "silver", "silver__transactions"], "unique_id": "model.near.silver__transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "14b3fb4b8c60274200fb41fcd1015544baddd49d9b42e7e37ca627f9dea36244"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "description": "Near transactions.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "Nonce for transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNATURE": {"name": "SIGNATURE", "description": "The signature taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_RECEIVER": {"name": "TX_RECEIVER", "description": "The transaction receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SIGNER": {"name": "TX_SIGNER", "description": "The transaction signer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX": {"name": "TX", "description": "The transaction's information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Units of gas required to execute this transaction. In raw number format, to adjust divide by POW(10,12)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTACHED_GAS": {"name": "ATTACHED_GAS", "description": "Units of gas (figure is not decimal adjusted, 10^12) attached to the transaction (this is often higher than 'Gas Used').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_FEE": {"name": "TRANSACTION_FEE", "description": "Total fee paid in NEAR to execute this transaction. In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/near/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "unique_key": "tx_hash", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1658508766.338075, "compiled_sql": "\n\nWITH base_transactions AS (\n\n  SELECT\n    record_id,\n    tx_hash,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    NEAR.bronze.transactions\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"NEAR.silver.transactions\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.transactions\n)\n    qualify ROW_NUMBER() over (\n      PARTITION BY tx_hash\n      ORDER BY\n        _inserted_timestamp DESC\n    ) = 1\n),\ntransactions AS (\n  SELECT\n    block_id AS block_id,\n    tx :outcome :block_hash :: STRING AS block_hash,\n    tx_hash,\n    block_timestamp,\n    tx :nonce :: NUMBER AS nonce,\n    tx :signature :: STRING AS signature,\n    tx :receiver_id :: STRING AS tx_receiver,\n    tx :signer_id :: STRING AS tx_signer,\n    tx,\n    tx :outcome :outcome :gas_burnt :: NUMBER AS transaction_gas_burnt,\n    tx :outcome :outcome :tokens_burnt :: NUMBER AS transaction_tokens_burnt,\n    GET(\n      tx :actions,\n      0\n    ) :FunctionCall :gas :: NUMBER AS attached_gas,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    base_transactions\n),\nreceipts AS (\n  SELECT\n    tx_hash,\n    SUM(\n      VALUE :outcome :gas_burnt :: NUMBER\n    ) AS receipt_gas_burnt,\n    SUM(\n      VALUE :outcome :tokens_burnt :: NUMBER\n    ) AS receipt_tokens_burnt\n  FROM\n    transactions,\n    LATERAL FLATTEN(\n      input => tx :receipt\n    )\n  GROUP BY\n    1\n),\nFINAL AS (\n  SELECT\n    t.block_id,\n    t.block_hash,\n    t.tx_hash,\n    t.block_timestamp,\n    t.nonce,\n    t.signature,\n    t.tx_receiver,\n    t.tx_signer,\n    t.tx,\n    t.transaction_gas_burnt + r.receipt_gas_burnt AS gas_used,\n    t.transaction_tokens_burnt + r.receipt_tokens_burnt AS transaction_fee,\n    COALESCE(\n      t.attached_gas,\n      gas_used\n    ) AS attached_gas,\n    t._ingested_at,\n    t._inserted_timestamp\n  FROM\n    transactions AS t\n    JOIN receipts AS r\n    ON t.tx_hash = r.tx_hash\n)\nSELECT\n  *\nFROM\n  FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.silver.transactions"}, "model.near.silver__receipts": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'receipt_object_id',\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n) }}\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        {{ incremental_load_filter('_inserted_timestamp') }}\n),\nreceipts AS (\n    SELECT\n        block_timestamp,\n        block_hash,\n        block_id,\n        tx_hash,\n        VALUE :id :: STRING AS receipt_object_id,\n        VALUE :outcome :receipt_ids AS receipt_outcome_id,\n        VALUE :outcome :status AS status_value,\n        VALUE :outcome :logs AS logs,\n        VALUE :proof AS proof,\n        VALUE :outcome :metadata AS metadata,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        txs,\n        LATERAL FLATTEN(\n            input => tx: receipt\n        )\n)\nSELECT\n    *\nFROM\n    receipts", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_load_filter"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "receipt_object_id", "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "silver", "fqn": ["near", "silver", "silver__receipts"], "unique_id": "model.near.silver__receipts", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "silver/silver__receipts.sql", "original_file_path": "models/silver/silver__receipts.sql", "name": "silver__receipts", "alias": "receipts", "checksum": {"name": "sha256", "checksum": "f1f2cc40cf6a9e5e6139246fdd01855b05c6bb75272f1142ba005f79eb5d7773"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "Decoded and flattened transaction receipts from the tx_receipts object.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPT_OBJECT_ID": {"name": "RECEIPT_OBJECT_ID", "description": "Unique identifier of the receipt object for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPT_OUTCOME_ID": {"name": "RECEIPT_OUTCOME_ID", "description": "Unique identifier(s) (array) of the receipt outcome for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS_VALUE": {"name": "STATUS_VALUE", "description": "Status information (object) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOGS": {"name": "LOGS", "description": "Logs (array) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROOF": {"name": "PROOF", "description": "Proof (array) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METADATA": {"name": "METADATA", "description": "Metadata (object) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/silver/silver__receipts.yml", "compiled_path": "target/compiled/near/models/silver/silver__receipts.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "unique_key": "receipt_object_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1658508765.7915137, "compiled_sql": "\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transactions\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"NEAR.silver.receipts\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.receipts\n)\n),\nreceipts AS (\n    SELECT\n        block_timestamp,\n        block_hash,\n        block_id,\n        tx_hash,\n        VALUE :id :: STRING AS receipt_object_id,\n        VALUE :outcome :receipt_ids AS receipt_outcome_id,\n        VALUE :outcome :status AS status_value,\n        VALUE :outcome :logs AS logs,\n        VALUE :proof AS proof,\n        VALUE :outcome :metadata AS metadata,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        txs,\n        LATERAL FLATTEN(\n            input => tx: receipt\n        )\n)\nSELECT\n    *\nFROM\n    receipts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.silver.receipts"}, "model.near.silver__transfers": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n  unique_key = 'action_id',\n  incremental_strategy = 'delete+insert'\n) }}\n\nWITH action_events AS(\n\n  SELECT\n    tx_hash,\n    action_id,\n    action_data :deposit :: INT AS deposit\n  FROM\n    {{ ref('silver__actions_events') }}\n  WHERE\n    action_name = 'Transfer'\n    AND {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nactions AS (\n  SELECT\n    t.tx_hash,\n    t.block_id,\n    A.action_id,\n    t.block_timestamp,\n    t.tx_receiver,\n    t.tx_signer,\n    A.deposit,\n    t.transaction_fee,\n    t.gas_used,\n    t.tx :receipt [0] :id :: STRING AS receipt_object_id,\n    CASE\n      WHEN tx :receipt [0] :outcome :status :: STRING = '{\"SuccessValue\":\"\"}' THEN TRUE\n      ELSE FALSE\n    END AS status,\n    t._ingested_at,\n    t._inserted_timestamp\n  FROM\n    {{ ref('silver__transactions') }} AS t\n    INNER JOIN action_events AS A\n    ON A.tx_hash = t.tx_hash\n  WHERE\n    {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nFINAL AS (\n  SELECT\n    tx_hash,\n    block_id,\n    action_id,\n    block_timestamp,\n    tx_signer,\n    tx_receiver,\n    deposit,\n    receipt_object_id,\n    transaction_fee,\n    gas_used,\n    status,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    actions\n)\nSELECT\n  *\nFROM\n  FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_load_filter"], "nodes": ["model.near.silver__actions_events", "model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "action_id", "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "silver", "fqn": ["near", "silver", "silver__transfers"], "unique_id": "model.near.silver__transfers", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "08cb83dd27691bf989122eb8d86548fd3b0ac6cb19ef29de760ab5bdb143bd3d"}, "tags": [], "refs": [["silver__actions_events"], ["silver__transactions"]], "sources": [], "description": "This table records all the Transfer actions of the Near blockchain.", "columns": {"TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SIGNER": {"name": "TX_SIGNER", "description": "The transaction signer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_RECEIVER": {"name": "TX_RECEIVER", "description": "The transaction receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSIT": {"name": "DEPOSIT", "description": "Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s). In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPT_OBJECT_ID": {"name": "RECEIPT_OBJECT_ID", "description": "Unique identifier of the receipt object for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_FEE": {"name": "TRANSACTION_FEE", "description": "Total fee paid in NEAR to execute this transaction. In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Units of gas required to execute this transaction. In raw number format, to adjust divide by POW(10,12)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Boolean representing the success or failure of the transaction. True for a successful transaction and False for failed transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/near/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "unique_key": "action_id", "incremental_strategy": "delete+insert"}, "created_at": 1658508765.6507955, "compiled_sql": "\n\nWITH action_events AS(\n\n  SELECT\n    tx_hash,\n    action_id,\n    action_data :deposit :: INT AS deposit\n  FROM\n    NEAR.silver.actions_events\n  WHERE\n    action_name = 'Transfer'\n    AND -- dbt makes it easy to query your target table by using the \"NEAR.silver.transfers\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.transfers\n)\n),\nactions AS (\n  SELECT\n    t.tx_hash,\n    t.block_id,\n    A.action_id,\n    t.block_timestamp,\n    t.tx_receiver,\n    t.tx_signer,\n    A.deposit,\n    t.transaction_fee,\n    t.gas_used,\n    t.tx :receipt [0] :id :: STRING AS receipt_object_id,\n    CASE\n      WHEN tx :receipt [0] :outcome :status :: STRING = '{\"SuccessValue\":\"\"}' THEN TRUE\n      ELSE FALSE\n    END AS status,\n    t._ingested_at,\n    t._inserted_timestamp\n  FROM\n    NEAR.silver.transactions AS t\n    INNER JOIN action_events AS A\n    ON A.tx_hash = t.tx_hash\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"NEAR.silver.transfers\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.transfers\n)\n),\nFINAL AS (\n  SELECT\n    tx_hash,\n    block_id,\n    action_id,\n    block_timestamp,\n    tx_signer,\n    tx_receiver,\n    deposit,\n    receipt_object_id,\n    transaction_fee,\n    gas_used,\n    status,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    actions\n)\nSELECT\n  *\nFROM\n  FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.silver.transfers"}, "model.near.silver__actions_events_function_call": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n  unique_key = 'action_id'\n) }}\n\nWITH action_events AS (\n\n  SELECT\n    *\n  FROM\n    {{ ref('silver__actions_events') }}\n  WHERE\n    {{ incremental_load_filter('_inserted_timestamp') }}\n    AND action_name = 'FunctionCall'\n),\ndecoding AS (\n  SELECT\n    *,\n    action_data :args AS args,\n    COALESCE(TRY_PARSE_JSON(TRY_BASE64_DECODE_STRING(args)), TRY_BASE64_DECODE_STRING(args), args) AS args_decoded,\n    action_data :deposit :: NUMBER AS deposit,\n    action_data :gas :: NUMBER AS attached_gas,\n    action_data :method_name :: STRING AS method_name\n  FROM\n    action_events),\n    function_calls AS (\n      SELECT\n        action_id,\n        tx_hash,\n        block_id,\n        block_timestamp,\n        action_name,\n        method_name,\n        args_decoded AS args,\n        deposit,\n        attached_gas,\n        _ingested_at,\n        _inserted_timestamp\n      FROM\n        decoding\n    )\n  SELECT\n    *\n  FROM\n    function_calls", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.near.incremental_load_filter"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "action_id", "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "silver", "fqn": ["near", "silver", "silver__actions_events_function_call"], "unique_id": "model.near.silver__actions_events_function_call", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "silver/silver__actions_events_function_call.sql", "original_file_path": "models/silver/silver__actions_events_function_call.sql", "name": "silver__actions_events_function_call", "alias": "actions_events_function_call", "checksum": {"name": "sha256", "checksum": "785b39665de191a072747800c6662e55610c7e53627bcb430d3cf7377e6f4e9d"}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "This table extracts all FunctionCall events from actions and decodes the arguments for easy use.", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_NAME": {"name": "ACTION_NAME", "description": "The name of the action performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METHOD_NAME": {"name": "METHOD_NAME", "description": "Name of the method(s) approved for use. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARGS": {"name": "ARGS", "description": "Decoded (where possible) arguments passed alongside the `method_name`.  If decoding failed, the table will contain the raw message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSIT": {"name": "DEPOSIT", "description": "Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s). In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTACHED_GAS": {"name": "ATTACHED_GAS", "description": "Units of gas (figure is not decimal adjusted, 10^12) attached to the transaction (this is often higher than 'Gas Used').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/silver/silver__actions_events_function_call.yml", "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "incremental", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "unique_key": "action_id"}, "created_at": 1658508765.4056296, "compiled_sql": "\n\nWITH action_events AS (\n\n  SELECT\n    *\n  FROM\n    NEAR.silver.actions_events\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"NEAR.silver.actions_events_function_call\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    NEAR.silver.actions_events_function_call\n)\n    AND action_name = 'FunctionCall'\n),\ndecoding AS (\n  SELECT\n    *,\n    action_data :args AS args,\n    COALESCE(TRY_PARSE_JSON(TRY_BASE64_DECODE_STRING(args)), TRY_BASE64_DECODE_STRING(args), args) AS args_decoded,\n    action_data :deposit :: NUMBER AS deposit,\n    action_data :gas :: NUMBER AS attached_gas,\n    action_data :method_name :: STRING AS method_name\n  FROM\n    action_events),\n    function_calls AS (\n      SELECT\n        action_id,\n        tx_hash,\n        block_id,\n        block_timestamp,\n        action_name,\n        method_name,\n        args_decoded AS args,\n        deposit,\n        attached_gas,\n        _ingested_at,\n        _inserted_timestamp\n      FROM\n        decoding\n    )\n  SELECT\n    *\n  FROM\n    function_calls", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.silver.actions_events_function_call"}, "model.near.core__fact_actions_events_addkey": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH actions_events_addkey AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__actions_events_addkey') }}\n)\nSELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    nonce,\n    public_key,\n    permission,\n    allowance,\n    method_name,\n    receiver_id\nFROM\n    actions_events_addkey", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__fact_actions_events_addkey"], "unique_id": "model.near.core__fact_actions_events_addkey", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__fact_actions_events_addkey.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.sql", "name": "core__fact_actions_events_addkey", "alias": "fact_actions_events_addkey", "checksum": {"name": "sha256", "checksum": "0c52cd6edc3bd7c698e53bc27e2a3e18c088bd3e102d45c8a480ef49ae51f82a"}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "This table extracts all AddKey events from actions and stores the argument data under action_data.", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "Nonce for transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PUBLIC_KEY": {"name": "PUBLIC_KEY", "description": "The public key of an AccessKey which was used to sign the original transaction. In case of a deposit refund, the public key is empty (all bytes are 0).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PERMISSION": {"name": "PERMISSION", "description": "Permissions granted to the contract by the signer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALLOWANCE": {"name": "ALLOWANCE", "description": "Amount of NEAR approved for use in unadjusted format (10^24). NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METHOD_NAME": {"name": "METHOD_NAME", "description": "Name of the method(s) approved for use. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER_ID": {"name": "RECEIVER_ID", "description": "The account ID of the destination of this transaction. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__fact_actions_events_addkey.yml", "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508767.415214, "compiled_sql": "\n\nWITH actions_events_addkey AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.actions_events_addkey\n)\nSELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    nonce,\n    public_key,\n    permission,\n    allowance,\n    method_name,\n    receiver_id\nFROM\n    actions_events_addkey", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.fact_actions_events_addkey"}, "model.near.core__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__blocks') }}\n)\nSELECT\n    block_id,\n    block_timestamp,\n    block_hash,\n    tx_count,\n    block_author,\n    block_challenges_result,\n    block_challenges_root,\n    chunk_headers_root,\n    chunk_tx_root,\n    chunk_mask,\n    chunk_receipts_root,\n    chunks,\n    chunks_included,\n    epoch_id,\n    epoch_sync_data_hash,\n    events,\n    gas_price,\n    last_ds_final_block,\n    last_final_block,\n    latest_protocol_version,\n    next_bp_hash,\n    next_epoch_id,\n    outcome_root,\n    prev_hash,\n    prev_height,\n    prev_state_root,\n    random_value,\n    rent_paid,\n    signature,\n    total_supply,\n    validator_proposals,\n    validator_reward\nFROM\n    blocks", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__fact_blocks"], "unique_id": "model.near.core__fact_blocks", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__fact_blocks.sql", "original_file_path": "models/core/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "72b742e43111b022cff7220210fdceacf4777ba0863ba0ea5ac5707c3a07dc16"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "This table records all the blocks of Near blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The `tx_count` taken from block headers. The number of transactions included in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_AUTHOR": {"name": "BLOCK_AUTHOR", "description": "The `block_author` taken from block headers. Validators of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_CHALLENGES_RESULT": {"name": "BLOCK_CHALLENGES_RESULT", "description": "The block_challenges_result taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_CHALLENGES_ROOT": {"name": "BLOCK_CHALLENGES_ROOT", "description": "The block_challenges_root taken from block headers. TODO check this column expectation, number?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_HEADERS_ROOT": {"name": "CHUNK_HEADERS_ROOT", "description": "The chunk_headers_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_MASK": {"name": "CHUNK_MASK", "description": "The chunk_mask taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_RECEIPTS_ROOT": {"name": "CHUNK_RECEIPTS_ROOT", "description": "The chunk_receipts_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNK_TX_ROOT": {"name": "CHUNK_TX_ROOT", "description": "The chunk_tx_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNKS": {"name": "CHUNKS", "description": "The chunks taken from block headers. Chunk is an aggregation of transactions which are executed within a particular shard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHUNKS_INCLUDED": {"name": "CHUNKS_INCLUDED", "description": "The chunks_included taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EPOCH_ID": {"name": "EPOCH_ID", "description": "The epoch_id taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EPOCH_SYNC_DATA_HASH": {"name": "EPOCH_SYNC_DATA_HASH", "description": "The epoch_sync_data_hash taken from block headers, if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENTS": {"name": "EVENTS", "description": "The events taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "The gas_price taken from block headers, number is not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_DS_FINAL_BLOCK": {"name": "LAST_DS_FINAL_BLOCK", "description": "The last_ds_final_block taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_FINAL_BLOCK": {"name": "LAST_FINAL_BLOCK", "description": "The last_final_block taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATEST_PROTOCOL_VERSION": {"name": "LATEST_PROTOCOL_VERSION", "description": "The latest_protocol_version taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_BP_HASH": {"name": "NEXT_BP_HASH", "description": "The next_bp_hash taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_EPOCH_ID": {"name": "NEXT_EPOCH_ID", "description": "The next_epoch_id taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OUTCOME_ROOT": {"name": "OUTCOME_ROOT", "description": "The outcome_root taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_HASH": {"name": "PREV_HASH", "description": "The prev_hash taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_HEIGHT": {"name": "PREV_HEIGHT", "description": "The prev_height taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_STATE_ROOT": {"name": "PREV_STATE_ROOT", "description": "The prev_state_root taken from block headers. TODO can this be null?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RANDOM_VALUE": {"name": "RANDOM_VALUE", "description": "The random_value taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RENT_PAID": {"name": "RENT_PAID", "description": "The rent_paid taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNATURE": {"name": "SIGNATURE", "description": "The signature taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SUPPLY": {"name": "TOTAL_SUPPLY", "description": "The total_supply taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_PROPOSALS": {"name": "VALIDATOR_PROPOSALS", "description": "The validator_proposals taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_REWARD": {"name": "VALIDATOR_REWARD", "description": "The validator_reward taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__fact_blocks.yml", "compiled_path": "target/compiled/near/models/core/core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508766.9945128, "compiled_sql": "\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.blocks\n)\nSELECT\n    block_id,\n    block_timestamp,\n    block_hash,\n    tx_count,\n    block_author,\n    block_challenges_result,\n    block_challenges_root,\n    chunk_headers_root,\n    chunk_tx_root,\n    chunk_mask,\n    chunk_receipts_root,\n    chunks,\n    chunks_included,\n    epoch_id,\n    epoch_sync_data_hash,\n    events,\n    gas_price,\n    last_ds_final_block,\n    last_final_block,\n    latest_protocol_version,\n    next_bp_hash,\n    next_epoch_id,\n    outcome_root,\n    prev_hash,\n    prev_height,\n    prev_state_root,\n    random_value,\n    rent_paid,\n    signature,\n    total_supply,\n    validator_proposals,\n    validator_reward\nFROM\n    blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.fact_blocks"}, "model.near.core__fact_actions_events": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH actions_events AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__actions_events') }}\n)\nSELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_index,\n    action_name,\n    action_data\nFROM\n    actions_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__fact_actions_events"], "unique_id": "model.near.core__fact_actions_events", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__fact_actions_events.sql", "original_file_path": "models/core/core__fact_actions_events.sql", "name": "core__fact_actions_events", "alias": "fact_actions_events", "checksum": {"name": "sha256", "checksum": "e3dd9af264e2fc164c67cf2fe6ec3809d7fdc2fb24ff6836140fea98b4b2ae8d"}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "This table extracts all action events from a transaction and stores the argument data under action_data.", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_INDEX": {"name": "ACTION_INDEX", "description": "The index of the current `action_name` and `action_data` in the order in which it appeared in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_NAME": {"name": "ACTION_NAME", "description": "The name of the action performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_DATA": {"name": "ACTION_DATA", "description": "A JSON object containing the argument data that was called by the `action_event`, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__fact_actions_events.yml", "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508767.3299654, "compiled_sql": "\n\nWITH actions_events AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.actions_events\n)\nSELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_index,\n    action_name,\n    action_data\nFROM\n    actions_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.fact_actions_events"}, "model.near.core__fact_receipts": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH receipts AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__receipts') }}\n)\nSELECT\n    block_timestamp,\n    block_id,\n    tx_hash,\n    receipt_object_id,\n    receipt_outcome_id,\n    status_value,\n    logs,\n    proof,\n    metadata\nFROM\n    receipts", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__fact_receipts"], "unique_id": "model.near.core__fact_receipts", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__fact_receipts.sql", "original_file_path": "models/core/core__fact_receipts.sql", "name": "core__fact_receipts", "alias": "fact_receipts", "checksum": {"name": "sha256", "checksum": "dabab7fa126880fc3b5a4b84fc6cfb9f6b29af0ec51cf78c73326e8d11b6dc8e"}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "Decoded and flattened transaction receipts from the tx_receipts object.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPT_OBJECT_ID": {"name": "RECEIPT_OBJECT_ID", "description": "Unique identifier of the receipt object for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPT_OUTCOME_ID": {"name": "RECEIPT_OUTCOME_ID", "description": "Unique identifier(s) (array) of the receipt outcome for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS_VALUE": {"name": "STATUS_VALUE", "description": "Status information (object) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOGS": {"name": "LOGS", "description": "Logs (array) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROOF": {"name": "PROOF", "description": "Proof (array) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METADATA": {"name": "METADATA", "description": "Metadata (object) for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__fact_receipts.yml", "compiled_path": "target/compiled/near/models/core/core__fact_receipts.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508766.553968, "compiled_sql": "\n\nWITH receipts AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.receipts\n)\nSELECT\n    block_timestamp,\n    block_id,\n    tx_hash,\n    receipt_object_id,\n    receipt_outcome_id,\n    status_value,\n    logs,\n    proof,\n    metadata\nFROM\n    receipts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.fact_receipts"}, "model.near.core__metrics_daily_gas": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH daily_gas AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('metrics__daily_gas') }}\n)\nSELECT\n    avg_gas_price,\n    daily_gas_used,\n    DATE\nFROM\n    daily_gas", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__metrics_daily_gas"], "unique_id": "model.near.core__metrics_daily_gas", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__metrics_daily_gas.sql", "original_file_path": "models/core/core__metrics_daily_gas.sql", "name": "core__metrics_daily_gas", "alias": "metrics_daily_gas", "checksum": {"name": "sha256", "checksum": "b8f11b3397074a87f942bcbf1cf8c071865af6d4b54cee74d3078458212f815d"}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "Daily gas metrics of near transactions.", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_GAS_USED": {"name": "DAILY_GAS_USED", "description": "The total daily gas used in transactions. Not decimal adjusted; gas units (10^-12 Tgas)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_GAS_PRICE": {"name": "AVG_GAS_PRICE", "description": "The average gas price in transactions. Not decimal adjusted; units in yoctoNEAR (10^-24 NEAR)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__metrics_daily_gas.yml", "compiled_path": "target/compiled/near/models/core/core__metrics_daily_gas.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508766.776671, "compiled_sql": "\n\nWITH daily_gas AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.metrics.daily_gas\n)\nSELECT\n    avg_gas_price,\n    daily_gas_used,\n    DATE\nFROM\n    daily_gas", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.metrics_daily_gas"}, "model.near.core__metrics_daily_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH daily_transactions AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('metrics__daily_transactions') }}\n)\nSELECT\n    daily_transactions,\n    DATE\nFROM\n    daily_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.metrics__daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__metrics_daily_transactions"], "unique_id": "model.near.core__metrics_daily_transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__metrics_daily_transactions.sql", "original_file_path": "models/core/core__metrics_daily_transactions.sql", "name": "core__metrics_daily_transactions", "alias": "metrics_daily_transactions", "checksum": {"name": "sha256", "checksum": "e41a71544128a04384fad80ce2f57f1f88bcec0ad49c4c2f536ea31e9e2f442a"}, "tags": [], "refs": [["metrics__daily_transactions"]], "sources": [], "description": "Daily number of near transactions.", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_TRANSACTIONS": {"name": "DAILY_TRANSACTIONS", "description": "The daily number of transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__metrics_daily_transactions.yml", "compiled_path": "target/compiled/near/models/core/core__metrics_daily_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508766.80777, "compiled_sql": "\n\nWITH daily_transactions AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.metrics.daily_transactions\n)\nSELECT\n    daily_transactions,\n    DATE\nFROM\n    daily_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.metrics_daily_transactions"}, "model.near.core__metrics_active_wallets": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH active_wallets AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('metrics__active_wallets') }}\n)\nSELECT\n    DATE,\n    daily_active_wallets,\n    rolling_30day_active_wallets,\n    rolling_7day_active_wallets\nFROM\n    active_wallets", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__metrics_active_wallets"], "unique_id": "model.near.core__metrics_active_wallets", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__metrics_active_wallets.sql", "original_file_path": "models/core/core__metrics_active_wallets.sql", "name": "core__metrics_active_wallets", "alias": "metrics_active_wallets", "checksum": {"name": "sha256", "checksum": "2bdd9f46ffa374f4a808bcc6674d7ea23cdefbb5b6e67af67030af2e9af62bf4"}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "Daily, rolling 7 day, and rolling 30 day active wallets on NEAR.", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_ACTIVE_WALLETS": {"name": "DAILY_ACTIVE_WALLETS", "description": "The daily number of active wallets.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLLING_7DAY_ACTIVE_WALLETS": {"name": "ROLLING_7DAY_ACTIVE_WALLETS", "description": "The number of active wallets in the last 7 days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLLING_30DAY_ACTIVE_WALLETS": {"name": "ROLLING_30DAY_ACTIVE_WALLETS", "description": "The number of active wallets in the last 30 days.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__metrics_active_wallets.yml", "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508766.5080645, "compiled_sql": "\n\nWITH active_wallets AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.metrics.active_wallets\n)\nSELECT\n    DATE,\n    daily_active_wallets,\n    rolling_30day_active_wallets,\n    rolling_7day_active_wallets\nFROM\n    active_wallets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.metrics_active_wallets"}, "model.near.core__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH transactions AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transactions') }}\n)\nSELECT\n    tx_hash,\n    block_id,\n    block_hash,\n    block_timestamp,\n    nonce,\n    signature,\n    tx_receiver,\n    tx_signer,\n    tx,\n    gas_used,\n    transaction_fee,\n    attached_gas\nFROM\n    transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__fact_transactions"], "unique_id": "model.near.core__fact_transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__fact_transactions.sql", "original_file_path": "models/core/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "1389d5a09eb4b42cf509cb04693d947d2e94c730196e11c9e78b75beb340af25"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "Near transactions.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "Nonce for transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNATURE": {"name": "SIGNATURE", "description": "The signature taken from block headers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_RECEIVER": {"name": "TX_RECEIVER", "description": "The transaction receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SIGNER": {"name": "TX_SIGNER", "description": "The transaction signer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX": {"name": "TX", "description": "The transaction's information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Units of gas required to execute this transaction. In raw number format, to adjust divide by POW(10,12)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTACHED_GAS": {"name": "ATTACHED_GAS", "description": "Units of gas (figure is not decimal adjusted, 10^12) attached to the transaction (this is often higher than 'Gas Used').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_FEE": {"name": "TRANSACTION_FEE", "description": "Total fee paid in NEAR to execute this transaction. In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__fact_transactions.yml", "compiled_path": "target/compiled/near/models/core/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508766.8346827, "compiled_sql": "\n\nWITH transactions AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transactions\n)\nSELECT\n    tx_hash,\n    block_id,\n    block_hash,\n    block_timestamp,\n    nonce,\n    signature,\n    tx_receiver,\n    tx_signer,\n    tx,\n    gas_used,\n    transaction_fee,\n    attached_gas\nFROM\n    transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.fact_transactions"}, "model.near.core__fact_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH transfers AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transfers') }}\n)\nSELECT\n    tx_hash,\n    action_id,\n    block_id,\n    block_timestamp,\n    tx_signer,\n    tx_receiver,\n    deposit,\n    receipt_object_id,\n    transaction_fee,\n    gas_used,\n    status\nFROM\n    transfers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__fact_transfers"], "unique_id": "model.near.core__fact_transfers", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__fact_transfers.sql", "original_file_path": "models/core/core__fact_transfers.sql", "name": "core__fact_transfers", "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "f12c0e130f8b1d1c1c428307f8ebceb75b63217e04facc101b13d4cec5099068"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "This table records all the Transfer actions of the Near blockchain.", "columns": {"TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SIGNER": {"name": "TX_SIGNER", "description": "The transaction signer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_RECEIVER": {"name": "TX_RECEIVER", "description": "The transaction receiver.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSIT": {"name": "DEPOSIT", "description": "Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s). In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPT_OBJECT_ID": {"name": "RECEIPT_OBJECT_ID", "description": "Unique identifier of the receipt object for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_FEE": {"name": "TRANSACTION_FEE", "description": "Total fee paid in NEAR to execute this transaction. In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Units of gas required to execute this transaction. In raw number format, to adjust divide by POW(10,12)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Boolean representing the success or failure of the transaction. True for a successful transaction and False for failed transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__fact_transfers.yml", "compiled_path": "target/compiled/near/models/core/core__fact_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508766.6617763, "compiled_sql": "\n\nWITH transfers AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transfers\n)\nSELECT\n    tx_hash,\n    action_id,\n    block_id,\n    block_timestamp,\n    tx_signer,\n    tx_receiver,\n    deposit,\n    receipt_object_id,\n    transaction_fee,\n    gas_used,\n    status\nFROM\n    transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.fact_transfers"}, "model.near.core__fact_actions_events_function_call": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH actions_events_function_call AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__actions_events_function_call') }}\n)\nSELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_name,\n    method_name,\n    args,\n    deposit,\n    attached_gas\nFROM\n    actions_events_function_call", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "core", "fqn": ["near", "core", "core__fact_actions_events_function_call"], "unique_id": "model.near.core__fact_actions_events_function_call", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "core/core__fact_actions_events_function_call.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.sql", "name": "core__fact_actions_events_function_call", "alias": "fact_actions_events_function_call", "checksum": {"name": "sha256", "checksum": "f37af3740b70837a93f79c8eeda561483d0be87231cca0c857097f819e9b30c6"}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "This table extracts all FunctionCall events from actions and decodes the arguments for easy use.", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_NAME": {"name": "ACTION_NAME", "description": "The name of the action performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METHOD_NAME": {"name": "METHOD_NAME", "description": "Name of the method(s) approved for use. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARGS": {"name": "ARGS", "description": "Decoded (where possible) arguments passed alongside the `method_name`.  If decoding failed, the table will contain the raw message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSIT": {"name": "DEPOSIT", "description": "Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s). In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTACHED_GAS": {"name": "ATTACHED_GAS", "description": "Units of gas (figure is not decimal adjusted, 10^12) attached to the transaction (this is often higher than 'Gas Used').", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/core/core__fact_actions_events_function_call.yml", "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508767.5213847, "compiled_sql": "\n\nWITH actions_events_function_call AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.actions_events_function_call\n)\nSELECT\n    action_id,\n    tx_hash,\n    block_id,\n    block_timestamp,\n    action_name,\n    method_name,\n    args,\n    deposit,\n    attached_gas\nFROM\n    actions_events_function_call", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.core.fact_actions_events_function_call"}, "model.near.legacy__actions_events_addkey": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH actions_events_addkey AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__actions_events_addkey') }}\n)\nSELECT\n    action_id,\n    tx_hash AS txn_hash,\n    block_timestamp,\n    nonce,\n    public_key,\n    permission,\n    allowance,\n    method_name,\n    receiver_id,\n    _ingested_at AS ingested_at\nFROM\n    actions_events_addkey", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__actions_events_addkey"], "unique_id": "model.near.legacy__actions_events_addkey", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__actions_events_addkey.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.sql", "name": "legacy__actions_events_addkey", "alias": "actions_events_addkey", "checksum": {"name": "sha256", "checksum": "e6149d656983804e15c21875fb16802351468ff7ce7c5629d845b22cf5d3505c"}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "deprecating soon - please migrate query from the `flipside_prod_db.mdao_near.X` database to `mdao_near.core.X`", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TXN_HASH": {"name": "TXN_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "Nonce for transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PUBLIC_KEY": {"name": "PUBLIC_KEY", "description": "The public key of an AccessKey which was used to sign the original transaction. In case of a deposit refund, the public key is empty (all bytes are 0).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PERMISSION": {"name": "PERMISSION", "description": "Permissions granted to the contract by the signer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALLOWANCE": {"name": "ALLOWANCE", "description": "Amount of NEAR approved for use in unadjusted format (10^24). NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METHOD_NAME": {"name": "METHOD_NAME", "description": "Name of the method(s) approved for use. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER_ID": {"name": "RECEIVER_ID", "description": "The account ID of the destination of this transaction. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/legacy/legacy__actions_events_addkey.yml", "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508767.9343412, "compiled_sql": "\n\nWITH actions_events_addkey AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.actions_events_addkey\n)\nSELECT\n    action_id,\n    tx_hash AS txn_hash,\n    block_timestamp,\n    nonce,\n    public_key,\n    permission,\n    allowance,\n    method_name,\n    receiver_id,\n    _ingested_at AS ingested_at\nFROM\n    actions_events_addkey", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.actions_events_addkey"}, "model.near.legacy__metrics_daily_gas": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH daily_gas AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('metrics__daily_gas') }}\n)\nSELECT\n    avg_gas_price,\n    daily_gas_used,\n    DATE\nFROM\n    daily_gas", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__metrics_daily_gas"], "unique_id": "model.near.legacy__metrics_daily_gas", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__metrics_daily_gas.sql", "original_file_path": "models/legacy/legacy__metrics_daily_gas.sql", "name": "legacy__metrics_daily_gas", "alias": "metrics_daily_gas", "checksum": {"name": "sha256", "checksum": "b8f11b3397074a87f942bcbf1cf8c071865af6d4b54cee74d3078458212f815d"}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "deprecating soon - please migrate query from the `flipside_prod_db.mdao_near.X` database to `mdao_near.core.X`", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_GAS_USED": {"name": "DAILY_GAS_USED", "description": "The total daily gas used in transactions. Not decimal adjusted; gas units (10^-12 Tgas)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_GAS_PRICE": {"name": "AVG_GAS_PRICE", "description": "The average gas price in transactions. Not decimal adjusted; units in yoctoNEAR (10^-24 NEAR)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/legacy/legacy__metrics_daily_gas.yml", "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_gas.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508767.8978627, "compiled_sql": "\n\nWITH daily_gas AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.metrics.daily_gas\n)\nSELECT\n    avg_gas_price,\n    daily_gas_used,\n    DATE\nFROM\n    daily_gas", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.metrics_daily_gas"}, "model.near.legacy__transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH transactions AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transactions') }}\n)\nSELECT\n    tx_hash AS txn_hash,\n    block_id AS block_height,\n    block_hash,\n    block_timestamp,\n    nonce,\n    signature,\n    tx_receiver,\n    tx_signer,\n    tx,\n    tx :receipt AS tx_receipt,\n    tx :outcome AS tx_outcome,\n    gas_used,\n    transaction_fee,\n    attached_gas,\n    _ingested_at AS ingested_at\nFROM\n    transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__transactions"], "unique_id": "model.near.legacy__transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__transactions.sql", "original_file_path": "models/legacy/legacy__transactions.sql", "name": "legacy__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "58d563118dc22fdc2ca3c2ff550b3055f40148f81e00db77677fc975e9387c0a"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508764.9091418, "compiled_sql": "\n\nWITH transactions AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transactions\n)\nSELECT\n    tx_hash AS txn_hash,\n    block_id AS block_height,\n    block_hash,\n    block_timestamp,\n    nonce,\n    signature,\n    tx_receiver,\n    tx_signer,\n    tx,\n    tx :receipt AS tx_receipt,\n    tx :outcome AS tx_outcome,\n    gas_used,\n    transaction_fee,\n    attached_gas,\n    _ingested_at AS ingested_at\nFROM\n    transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.transactions"}, "model.near.legacy__actions_events": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH actions_events AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__actions_events') }}\n)\nSELECT\n    action_id,\n    tx_hash AS txn_hash,\n    block_timestamp,\n    action_index,\n    action_name,\n    action_data,\n    _ingested_at AS ingested_at\nFROM\n    actions_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__actions_events"], "unique_id": "model.near.legacy__actions_events", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__actions_events.sql", "original_file_path": "models/legacy/legacy__actions_events.sql", "name": "legacy__actions_events", "alias": "actions_events", "checksum": {"name": "sha256", "checksum": "b9d7e7ab81670bc335c8ca32c54884545bbd737f8dbc3e2a9e45624184fc218a"}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508764.9195807, "compiled_sql": "\n\nWITH actions_events AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.actions_events\n)\nSELECT\n    action_id,\n    tx_hash AS txn_hash,\n    block_timestamp,\n    action_index,\n    action_name,\n    action_data,\n    _ingested_at AS ingested_at\nFROM\n    actions_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.actions_events"}, "model.near.legacy__receipts": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH receipts AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__receipts') }}\n)\nSELECT\n    block_timestamp,\n    block_hash,\n    tx_hash AS txn_hash,\n    receipt_object_id,\n    receipt_outcome_id,\n    status_value,\n    logs,\n    proof,\n    metadata\nFROM\n    receipts", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__receipts"], "unique_id": "model.near.legacy__receipts", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__receipts.sql", "original_file_path": "models/legacy/legacy__receipts.sql", "name": "legacy__receipts", "alias": "receipts", "checksum": {"name": "sha256", "checksum": "f4c6413a874565c4c1e5cd72343a3d263341dc028143730d583c7a7954a77434"}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__receipts.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508764.9289973, "compiled_sql": "\n\nWITH receipts AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.receipts\n)\nSELECT\n    block_timestamp,\n    block_hash,\n    tx_hash AS txn_hash,\n    receipt_object_id,\n    receipt_outcome_id,\n    status_value,\n    logs,\n    proof,\n    metadata\nFROM\n    receipts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.receipts"}, "model.near.legacy__blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__blocks') }}\n)\nSELECT\n    block_id AS block_height,\n    block_timestamp,\n    block_hash,\n    tx_count,\n    block_author,\n    block_challenges_result,\n    block_challenges_root,\n    chunk_headers_root,\n    chunk_tx_root,\n    chunk_mask,\n    chunk_receipts_root,\n    chunks,\n    chunks_included,\n    epoch_id,\n    epoch_sync_data_hash,\n    events,\n    gas_price,\n    last_ds_final_block,\n    last_final_block,\n    latest_protocol_version,\n    next_bp_hash,\n    next_epoch_id,\n    outcome_root,\n    prev_hash,\n    prev_height,\n    prev_state_root,\n    random_value,\n    rent_paid,\n    signature,\n    total_supply,\n    validator_proposals,\n    validator_reward,\n    _ingested_at AS ingested_at\nFROM\n    blocks", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__blocks"], "unique_id": "model.near.legacy__blocks", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__blocks.sql", "original_file_path": "models/legacy/legacy__blocks.sql", "name": "legacy__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "9d2aa36d0079d596f7824023ebed28c6d44e59119c8745b769f3011cfdaa3e57"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508764.9381697, "compiled_sql": "\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.blocks\n)\nSELECT\n    block_id AS block_height,\n    block_timestamp,\n    block_hash,\n    tx_count,\n    block_author,\n    block_challenges_result,\n    block_challenges_root,\n    chunk_headers_root,\n    chunk_tx_root,\n    chunk_mask,\n    chunk_receipts_root,\n    chunks,\n    chunks_included,\n    epoch_id,\n    epoch_sync_data_hash,\n    events,\n    gas_price,\n    last_ds_final_block,\n    last_final_block,\n    latest_protocol_version,\n    next_bp_hash,\n    next_epoch_id,\n    outcome_root,\n    prev_hash,\n    prev_height,\n    prev_state_root,\n    random_value,\n    rent_paid,\n    signature,\n    total_supply,\n    validator_proposals,\n    validator_reward,\n    _ingested_at AS ingested_at\nFROM\n    blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.blocks"}, "model.near.legacy__metrics_active_wallets": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH active_wallets AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('metrics__active_wallets') }}\n)\nSELECT\n    daily_active_wallets,\n    DATE,\n    rolling_30day_active_wallets,\n    rolling_7day_active_wallets\nFROM\n    active_wallets", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__metrics_active_wallets"], "unique_id": "model.near.legacy__metrics_active_wallets", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__metrics_active_wallets.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.sql", "name": "legacy__metrics_active_wallets", "alias": "metrics_active_wallets", "checksum": {"name": "sha256", "checksum": "f5df933c0ba48f2176efb5e9637b49a0122cac3687f12409e1f78db0e7f94794"}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "deprecating soon - please migrate query from the `flipside_prod_db.mdao_near.X` database to `mdao_near.core.X`", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_ACTIVE_WALLETS": {"name": "DAILY_ACTIVE_WALLETS", "description": "The daily number of active wallets.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLLING_7DAY_ACTIVE_WALLETS": {"name": "ROLLING_7DAY_ACTIVE_WALLETS", "description": "The number of active wallets in the last 7 days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLLING_30DAY_ACTIVE_WALLETS": {"name": "ROLLING_30DAY_ACTIVE_WALLETS", "description": "The number of active wallets in the last 30 days.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/legacy/legacy__metrics_active_wallets.yml", "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508768.0557027, "compiled_sql": "\n\nWITH active_wallets AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.metrics.active_wallets\n)\nSELECT\n    daily_active_wallets,\n    DATE,\n    rolling_30day_active_wallets,\n    rolling_7day_active_wallets\nFROM\n    active_wallets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.metrics_active_wallets"}, "model.near.legacy__transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH transfers AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transfers') }}\n)\nSELECT\n    tx_hash AS txn_hash,\n    action_id,\n    block_timestamp,\n    tx_signer,\n    tx_receiver,\n    deposit,\n    receipt_object_id,\n    transaction_fee,\n    gas_used,\n    status,\n    _ingested_at AS ingested_at\nFROM\n    transfers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__transfers"], "unique_id": "model.near.legacy__transfers", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__transfers.sql", "original_file_path": "models/legacy/legacy__transfers.sql", "name": "legacy__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "b22d045d6df8c478b54028463fef2d03f0a31266ea4db7742c5487549625261e"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508764.9570975, "compiled_sql": "\n\nWITH transfers AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.transfers\n)\nSELECT\n    tx_hash AS txn_hash,\n    action_id,\n    block_timestamp,\n    tx_signer,\n    tx_receiver,\n    deposit,\n    receipt_object_id,\n    transaction_fee,\n    gas_used,\n    status,\n    _ingested_at AS ingested_at\nFROM\n    transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.transfers"}, "model.near.legacy__metrics_daily_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH daily_transactions AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('metrics__daily_transactions') }}\n)\nSELECT\n    daily_transactions,\n    DATE\nFROM\n    daily_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.metrics__daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__metrics_daily_transactions"], "unique_id": "model.near.legacy__metrics_daily_transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__metrics_daily_transactions.sql", "original_file_path": "models/legacy/legacy__metrics_daily_transactions.sql", "name": "legacy__metrics_daily_transactions", "alias": "metrics_daily_transactions", "checksum": {"name": "sha256", "checksum": "e41a71544128a04384fad80ce2f57f1f88bcec0ad49c4c2f536ea31e9e2f442a"}, "tags": [], "refs": [["metrics__daily_transactions"]], "sources": [], "description": "deprecating soon - please migrate query from the `flipside_prod_db.mdao_near.X` database to `mdao_near.core.X`", "columns": {"DATE": {"name": "DATE", "description": "The date (day).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAILY_TRANSACTIONS": {"name": "DAILY_TRANSACTIONS", "description": "The daily number of transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/legacy/legacy__metrics_daily_transactions.yml", "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508768.0335264, "compiled_sql": "\n\nWITH daily_transactions AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.metrics.daily_transactions\n)\nSELECT\n    daily_transactions,\n    DATE\nFROM\n    daily_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.metrics_daily_transactions"}, "model.near.legacy__actions_events_function_call": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH actions_events_function_call AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__actions_events_function_call') }}\n)\nSELECT\n    action_id,\n    tx_hash AS txn_hash,\n    block_timestamp,\n    action_name,\n    method_name,\n    args,\n    deposit,\n    attached_gas,\n    _ingested_at AS ingested_at\nFROM\n    actions_events_function_call", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "legacy", "fqn": ["near", "legacy", "legacy__actions_events_function_call"], "unique_id": "model.near.legacy__actions_events_function_call", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "legacy/legacy__actions_events_function_call.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.sql", "name": "legacy__actions_events_function_call", "alias": "actions_events_function_call", "checksum": {"name": "sha256", "checksum": "38bde468f1910f7058bbaf6505cecf22b5fe54851e9a266f682c2c67925ec820"}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "deprecating soon - please migrate query from the `flipside_prod_db.mdao_near.X` database to `mdao_near.core.X`", "columns": {"ACTION_ID": {"name": "ACTION_ID", "description": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TXN_HASH": {"name": "TXN_HASH", "description": "Unique identifier (hash) of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION_NAME": {"name": "ACTION_NAME", "description": "The name of the action performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "METHOD_NAME": {"name": "METHOD_NAME", "description": "Name of the method(s) approved for use. NULL if permission is FullAccess.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARGS": {"name": "ARGS", "description": "Decoded (where possible) arguments passed alongside the `method_name`.  If decoding failed, the table will contain the raw message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSIT": {"name": "DEPOSIT", "description": "Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s). In raw number format, to adjust divide by POW(10,24)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTACHED_GAS": {"name": "ATTACHED_GAS", "description": "Units of gas (figure is not decimal adjusted, 10^12) attached to the transaction (this is often higher than 'Gas Used').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "near://models/legacy/legacy__actions_events_function_call.yml", "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view", "secure": true}, "created_at": 1658508768.540693, "compiled_sql": "\n\nWITH actions_events_function_call AS (\n\n    SELECT\n        *\n    FROM\n        NEAR.silver.actions_events_function_call\n)\nSELECT\n    action_id,\n    tx_hash AS txn_hash,\n    block_timestamp,\n    action_name,\n    method_name,\n    args,\n    deposit,\n    attached_gas,\n    _ingested_at AS ingested_at\nFROM\n    actions_events_function_call", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.legacy.actions_events_function_call"}, "model.near.bronze__transactions": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    tx_id AS tx_hash,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"near_txs\"\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.near.chainwalkers.near_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "bronze", "fqn": ["near", "bronze", "bronze__transactions"], "unique_id": "model.near.bronze__transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "fc03619ce3379fce5651abfb12a6d79939fe51c67ce3edb6944ece4df7c05eb7"}, "tags": [], "refs": [], "sources": [["chainwalkers", "near_txs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view"}, "created_at": 1658508764.986032, "compiled_sql": "\n\nSELECT\n    record_id,\n    tx_id AS tx_hash,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.near_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.bronze.transactions"}, "model.near.bronze__blocks": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"near_blocks\"\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.near.chainwalkers.near_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "bronze", "fqn": ["near", "bronze", "bronze__blocks"], "unique_id": "model.near.bronze__blocks", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "d92ae82559132d956dc58e2e9f3392487bd62b84e98622cc329e26e598dc2f17"}, "tags": [], "refs": [], "sources": [["chainwalkers", "near_blocks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "materialized": "view"}, "created_at": 1658508764.9936748, "compiled_sql": "\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.near_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "NEAR.bronze.blocks"}, "operation.near.near-on-run-start-0": {"raw_sql": "{{create_sps()}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.near.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "NEAR", "schema": "near-on-run-start-0", "fqn": ["near", "hooks", "near-on-run-start-0"], "unique_id": "operation.near.near-on-run-start-0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "hooks/near-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "near-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "f7214f39a494970b5a8088b3c40615921fc8bbcde1e0828520ac6b19d945b820"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/./dbt_project.yml/hooks/near-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share near_mdao {% endif %}"}, "created_at": 1658508765.0195422, "compiled_sql": "\n    \n        CREATE schema IF NOT EXISTS _internal;\nCREATE\n    OR REPLACE PROCEDURE _internal.create_prod_clone(\n        source_db_name STRING,\n        destination_db_name STRING,\n        role_name STRING\n    ) returns BOOLEAN LANGUAGE javascript EXECUTE AS caller AS $$ snowflake.execute(\n        { sqlText: `BEGIN TRANSACTION;` }\n    );\ntry { snowflake.execute(\n        { sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}` }\n    );\nsnowflake.execute(\n        { sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}` }\n    );\nsnowflake.execute(\n        { sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL` }\n    );\n    /* this only needs to be in prod */\n    var existing_schemas = snowflake.execute(\n        { sqlText: `SELECT table_schema FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES WHERE grantor IS NOT NULL GROUP BY 1;` }\n    );\nWHILE (existing_schemas.next()) { var schema = existing_schemas.getColumnValue(1) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;` }\n    );} var existing_tables = snowflake.execute(\n        { sqlText: `SELECT table_schema, table_name FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES WHERE grantor IS NOT NULL GROUP BY 1,2;` }\n    );\nWHILE (existing_tables.next()) { var schema = existing_tables.getColumnValue(1) var table_name = existing_tables.getColumnValue(2) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;` }\n    );} var existing_stages = snowflake.execute(\n        { sqlText: `SELECT stage_schema, stage_name FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.STAGES;` }\n    );\nWHILE (existing_stages.next()) { var schema = existing_stages.getColumnValue(1) var stage_name = existing_stages.getColumnValue(2) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON STAGE ${DESTINATION_DB_NAME}.${schema}.${stage_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;` }\n    );} var existing_functions = snowflake.execute(\n        { sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;` }\n    );\nWHILE (existing_functions.next()) { var schema = existing_functions.getColumnValue(1) var function_name = existing_functions.getColumnValue(2) var argument_signature = existing_functions.getColumnValue(3) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;` }\n    );} var existing_procedures = snowflake.execute(\n        { sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;` }\n    );\nWHILE (existing_procedures.next()) { var schema = existing_procedures.getColumnValue(1) var procedure_name = existing_procedures.getColumnValue(2) var argument_signature = existing_procedures.getColumnValue(3) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;` }\n    );} snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};` }\n    ) snowflake.execute(\n        { sqlText: `COMMIT;` }\n    );} catch (err) { snowflake.execute(\n        { sqlText: `ROLLBACK;` }\n    );\nthrow(err);} RETURN TRUE $$;\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.near.not_null_metrics__daily_gas_DATE.d5118a8fda": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('metrics__daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__daily_gas_DATE"], "unique_id": "test.near.not_null_metrics__daily_gas_DATE.d5118a8fda", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__daily_gas_DATE.sql", "original_file_path": "models/metrics/metrics__daily_gas.yml", "name": "not_null_metrics__daily_gas_DATE", "alias": "daily_gas_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_gas.yml/not_null_metrics__daily_gas_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.1262875, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.metrics.daily_gas\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.metrics__daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DATE__TIMESTAMP_NTZ.e1d1b1fca2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2affb4001688d20bc8aa47bdd1b2da02\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('metrics__daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2affb4001688d20bc8aa47bdd1b2da02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DATE__TIMESTAMP_NTZ.e1d1b1fca2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2affb4001688d20bc8aa47bdd1b2da02.sql", "original_file_path": "models/metrics/metrics__daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DATE__TIMESTAMP_NTZ", "alias": "daily_gas_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_gas.yml/dbt_expectations_expect_column_2affb4001688d20bc8aa47bdd1b2da02.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2affb4001688d20bc8aa47bdd1b2da02"}, "created_at": 1658508765.129547, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.metrics__daily_gas"}, "test.near.not_null_metrics__daily_gas_DAILY_GAS_USED.dfcbff5ad4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_GAS_USED", "model": "{{ get_where_subquery(ref('metrics__daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__daily_gas_DAILY_GAS_USED"], "unique_id": "test.near.not_null_metrics__daily_gas_DAILY_GAS_USED.dfcbff5ad4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__daily_gas_DAILY_GAS_USED.sql", "original_file_path": "models/metrics/metrics__daily_gas.yml", "name": "not_null_metrics__daily_gas_DAILY_GAS_USED", "alias": "daily_gas_DAILY_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_gas.yml/not_null_metrics__daily_gas_DAILY_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.1478865, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_GAS_USED\nfrom NEAR.metrics.daily_gas\nwhere DAILY_GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_GAS_USED", "file_key_name": "models.metrics__daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.6246eae8fd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_19ebeb31b90ddc0b9e72c429f951f7d7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_GAS_USED", "model": "{{ get_where_subquery(ref('metrics__daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_19ebeb31b90ddc0b9e72c429f951f7d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DAILY_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.6246eae8fd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_19ebeb31b90ddc0b9e72c429f951f7d7.sql", "original_file_path": "models/metrics/metrics__daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DAILY_GAS_USED__NUMBER__FLOAT", "alias": "daily_gas_DAILY_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_gas.yml/dbt_expectations_expect_column_19ebeb31b90ddc0b9e72c429f951f7d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_19ebeb31b90ddc0b9e72c429f951f7d7"}, "created_at": 1658508765.2056408, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_GAS_USED", "file_key_name": "models.metrics__daily_gas"}, "test.near.not_null_metrics__daily_gas_AVG_GAS_PRICE.5d03852ee5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVG_GAS_PRICE", "model": "{{ get_where_subquery(ref('metrics__daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__daily_gas_AVG_GAS_PRICE"], "unique_id": "test.near.not_null_metrics__daily_gas_AVG_GAS_PRICE.5d03852ee5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__daily_gas_AVG_GAS_PRICE.sql", "original_file_path": "models/metrics/metrics__daily_gas.yml", "name": "not_null_metrics__daily_gas_AVG_GAS_PRICE", "alias": "daily_gas_AVG_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_gas.yml/not_null_metrics__daily_gas_AVG_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.213289, "compiled_sql": "\n    \n    \n\n\n\nselect AVG_GAS_PRICE\nfrom NEAR.metrics.daily_gas\nwhere AVG_GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AVG_GAS_PRICE", "file_key_name": "models.metrics__daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fd6bec3a6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e8e198f5484ec792e44ad6378a037b41\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AVG_GAS_PRICE", "model": "{{ get_where_subquery(ref('metrics__daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e8e198f5484ec792e44ad6378a037b41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fd6bec3a6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e8e198f5484ec792e44ad6378a037b41.sql", "original_file_path": "models/metrics/metrics__daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT", "alias": "daily_gas_AVG_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_gas.yml/dbt_expectations_expect_column_e8e198f5484ec792e44ad6378a037b41.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e8e198f5484ec792e44ad6378a037b41"}, "created_at": 1658508765.2160852, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AVG_GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AVG_GAS_PRICE", "file_key_name": "models.metrics__daily_gas"}, "test.near.not_null_metrics__active_wallets_DATE.0f49548353": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__active_wallets_DATE"], "unique_id": "test.near.not_null_metrics__active_wallets_DATE.0f49548353", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__active_wallets_DATE.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "not_null_metrics__active_wallets_DATE", "alias": "active_wallets_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/not_null_metrics__active_wallets_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.2265558, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.metrics.active_wallets\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.metrics__active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DATE__TIMESTAMP_NTZ.18a04c8920": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_196c8bfd597194f14ddd8f74f98caf4d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_196c8bfd597194f14ddd8f74f98caf4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DATE__TIMESTAMP_NTZ.18a04c8920", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_196c8bfd597194f14ddd8f74f98caf4d.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DATE__TIMESTAMP_NTZ", "alias": "active_wallets_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/dbt_expectations_expect_column_196c8bfd597194f14ddd8f74f98caf4d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_196c8bfd597194f14ddd8f74f98caf4d"}, "created_at": 1658508765.2296882, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.metrics__active_wallets"}, "test.near.not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS.533dd6e2f2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS.533dd6e2f2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS", "alias": "active_wallets_DAILY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.2361245, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_ACTIVE_WALLETS\nfrom NEAR.metrics.active_wallets\nwhere DAILY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_ACTIVE_WALLETS", "file_key_name": "models.metrics__active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.6302ce454e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d7053b69048d129895b53d232109ddaa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d7053b69048d129895b53d232109ddaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.6302ce454e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d7053b69048d129895b53d232109ddaa.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "active_wallets_DAILY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/dbt_expectations_expect_column_d7053b69048d129895b53d232109ddaa.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d7053b69048d129895b53d232109ddaa"}, "created_at": 1658508765.2392159, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_ACTIVE_WALLETS", "file_key_name": "models.metrics__active_wallets"}, "test.near.not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.f220db236c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.f220db236c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "alias": "active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.246, "compiled_sql": "\n    \n    \n\n\n\nselect ROLLING_7DAY_ACTIVE_WALLETS\nfrom NEAR.metrics.active_wallets\nwhere ROLLING_7DAY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "file_key_name": "models.metrics__active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.bc563f5075": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_64bcc1ee44c7fad1b844c1703ee7915c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_64bcc1ee44c7fad1b844c1703ee7915c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.bc563f5075", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_64bcc1ee44c7fad1b844c1703ee7915c.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/dbt_expectations_expect_column_64bcc1ee44c7fad1b844c1703ee7915c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_64bcc1ee44c7fad1b844c1703ee7915c"}, "created_at": 1658508765.2490964, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ROLLING_7DAY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "file_key_name": "models.metrics__active_wallets"}, "test.near.not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.06610cea73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.06610cea73", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "alias": "active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.255896, "compiled_sql": "\n    \n    \n\n\n\nselect ROLLING_30DAY_ACTIVE_WALLETS\nfrom NEAR.metrics.active_wallets\nwhere ROLLING_30DAY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "file_key_name": "models.metrics__active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.3020e05b84": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d0a8451390f407045fe26543dc7dda67\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('metrics__active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d0a8451390f407045fe26543dc7dda67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.3020e05b84", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d0a8451390f407045fe26543dc7dda67.sql", "original_file_path": "models/metrics/metrics__active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__active_wallets.yml/dbt_expectations_expect_column_d0a8451390f407045fe26543dc7dda67.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d0a8451390f407045fe26543dc7dda67"}, "created_at": 1658508765.258982, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ROLLING_30DAY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "file_key_name": "models.metrics__active_wallets"}, "test.near.not_null_metrics__daily_transactions_DATE.0543993236": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('metrics__daily_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__daily_transactions_DATE"], "unique_id": "test.near.not_null_metrics__daily_transactions_DATE.0543993236", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__daily_transactions_DATE.sql", "original_file_path": "models/metrics/metrics__daily_transactions.yml", "name": "not_null_metrics__daily_transactions_DATE", "alias": "daily_transactions_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_transactions.yml/not_null_metrics__daily_transactions_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.2683895, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.metrics.daily_transactions\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.metrics__daily_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DATE__TIMESTAMP_NTZ.3213a9fa9c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e1ef8e87a91357e873342cda8b61dd05\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('metrics__daily_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e1ef8e87a91357e873342cda8b61dd05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DATE__TIMESTAMP_NTZ.3213a9fa9c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e1ef8e87a91357e873342cda8b61dd05.sql", "original_file_path": "models/metrics/metrics__daily_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DATE__TIMESTAMP_NTZ", "alias": "daily_transactions_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_transactions.yml/dbt_expectations_expect_column_e1ef8e87a91357e873342cda8b61dd05.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e1ef8e87a91357e873342cda8b61dd05"}, "created_at": 1658508765.2711613, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_TRANSACTIONS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.metrics__daily_transactions"}, "test.near.not_null_metrics__daily_transactions_DAILY_TRANSACTIONS.d6758050ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_TRANSACTIONS", "model": "{{ get_where_subquery(ref('metrics__daily_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_metrics", "fqn": ["near", "metrics", "not_null_metrics__daily_transactions_DAILY_TRANSACTIONS"], "unique_id": "test.near.not_null_metrics__daily_transactions_DAILY_TRANSACTIONS.d6758050ca", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_metrics__daily_transactions_DAILY_TRANSACTIONS.sql", "original_file_path": "models/metrics/metrics__daily_transactions.yml", "name": "not_null_metrics__daily_transactions_DAILY_TRANSACTIONS", "alias": "daily_transactions_DAILY_TRANSACTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_transactions.yml/not_null_metrics__daily_transactions_DAILY_TRANSACTIONS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.2778342, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_TRANSACTIONS\nfrom NEAR.metrics.daily_transactions\nwhere DAILY_TRANSACTIONS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_TRANSACTIONS", "file_key_name": "models.metrics__daily_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.1c6ef5916e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fbddd664dce42df5ad5242dc2209a0da\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_TRANSACTIONS", "model": "{{ get_where_subquery(ref('metrics__daily_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.metrics__daily_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fbddd664dce42df5ad5242dc2209a0da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics", "fqn": ["near", "metrics", "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.1c6ef5916e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_fbddd664dce42df5ad5242dc2209a0da.sql", "original_file_path": "models/metrics/metrics__daily_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT", "alias": "daily_transactions_DAILY_TRANSACTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["metrics__daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/metrics/metrics__daily_transactions.yml/dbt_expectations_expect_column_fbddd664dce42df5ad5242dc2209a0da.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_fbddd664dce42df5ad5242dc2209a0da"}, "created_at": 1658508765.2806354, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_TRANSACTIONS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_TRANSACTIONS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_TRANSACTIONS", "file_key_name": "models.metrics__daily_transactions"}, "test.near.unique_silver__actions_events_ACTION_ID.d139f26712": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_silver", "fqn": ["near", "silver", "unique_silver__actions_events_ACTION_ID"], "unique_id": "test.near.unique_silver__actions_events_ACTION_ID.d139f26712", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_silver__actions_events_ACTION_ID.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "unique_silver__actions_events_ACTION_ID", "alias": "actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/unique_silver__actions_events_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.2945023, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.silver.actions_events\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events_ACTION_ID.6f23e362fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_ACTION_ID"], "unique_id": "test.near.not_null_silver__actions_events_ACTION_ID.6f23e362fe", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_ACTION_ID.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events_ACTION_ID", "alias": "actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.2973728, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.silver.actions_events\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_ID__STRING__VARCHAR.62bc853d5b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8d5e3c85dac1d2030954cd0de9c953d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8d5e3c85dac1d2030954cd0de9c953d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_ID__STRING__VARCHAR.62bc853d5b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c8d5e3c85dac1d2030954cd0de9c953d.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_ID__STRING__VARCHAR", "alias": "actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_c8d5e3c85dac1d2030954cd0de9c953d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c8d5e3c85dac1d2030954cd0de9c953d"}, "created_at": 1658508765.3001611, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events_TX_HASH.70beae518e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_TX_HASH"], "unique_id": "test.near.not_null_silver__actions_events_TX_HASH.70beae518e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_TX_HASH.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events_TX_HASH", "alias": "actions_events_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.3074691, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.silver.actions_events\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_TX_HASH__STRING__VARCHAR.116455b3a1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_248ca7ec25ffcc0499d620cf48050fdd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_248ca7ec25ffcc0499d620cf48050fdd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_TX_HASH__STRING__VARCHAR.116455b3a1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_248ca7ec25ffcc0499d620cf48050fdd.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_TX_HASH__STRING__VARCHAR", "alias": "actions_events_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_248ca7ec25ffcc0499d620cf48050fdd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_248ca7ec25ffcc0499d620cf48050fdd"}, "created_at": 1658508765.310326, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events_BLOCK_ID.aee83217db": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_BLOCK_ID"], "unique_id": "test.near.not_null_silver__actions_events_BLOCK_ID.aee83217db", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_BLOCK_ID.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events_BLOCK_ID", "alias": "actions_events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.3184757, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.silver.actions_events\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_ID__NUMBER__FLOAT.863e030c52": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8cfad31f25fcbbb3c0e1ad00affe5178\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8cfad31f25fcbbb3c0e1ad00affe5178", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_ID__NUMBER__FLOAT.863e030c52", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8cfad31f25fcbbb3c0e1ad00affe5178.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_ID__NUMBER__FLOAT", "alias": "actions_events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_8cfad31f25fcbbb3c0e1ad00affe5178.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8cfad31f25fcbbb3c0e1ad00affe5178"}, "created_at": 1658508765.3212664, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events_BLOCK_TIMESTAMP.bf83654f70": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_silver__actions_events_BLOCK_TIMESTAMP.bf83654f70", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events_BLOCK_TIMESTAMP", "alias": "actions_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.3284726, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.silver.actions_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e9d2996911": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_effc3ccb69d3addfabbdda58b90e89d6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_effc3ccb69d3addfabbdda58b90e89d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e9d2996911", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_effc3ccb69d3addfabbdda58b90e89d6.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_effc3ccb69d3addfabbdda58b90e89d6.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_effc3ccb69d3addfabbdda58b90e89d6"}, "created_at": 1658508765.3312361, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events_ACTION_INDEX.7f9e0acf59": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_INDEX", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_ACTION_INDEX"], "unique_id": "test.near.not_null_silver__actions_events_ACTION_INDEX.7f9e0acf59", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_ACTION_INDEX.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events_ACTION_INDEX", "alias": "actions_events_ACTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events_ACTION_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.337962, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_INDEX\nfrom NEAR.silver.actions_events\nwhere ACTION_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_INDEX", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_INDEX__NUMBER.dce303241e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9395c7603e2ad9c093b74812460c7899\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "ACTION_INDEX", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9395c7603e2ad9c093b74812460c7899", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_INDEX__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_INDEX__NUMBER.dce303241e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9395c7603e2ad9c093b74812460c7899.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_INDEX__NUMBER", "alias": "actions_events_ACTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_9395c7603e2ad9c093b74812460c7899.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9395c7603e2ad9c093b74812460c7899"}, "created_at": 1658508765.3407543, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_INDEX", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events_ACTION_NAME.d782bdc8b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_ACTION_NAME"], "unique_id": "test.near.not_null_silver__actions_events_ACTION_NAME.d782bdc8b6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_ACTION_NAME.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events_ACTION_NAME", "alias": "actions_events_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events_ACTION_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.347435, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_NAME\nfrom NEAR.silver.actions_events\nwhere ACTION_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_NAME__STRING__VARCHAR.aef3f74e78": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b04d1058781235dbc2310a0febbc3f0d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b04d1058781235dbc2310a0febbc3f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_NAME__STRING__VARCHAR.aef3f74e78", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b04d1058781235dbc2310a0febbc3f0d.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_NAME__STRING__VARCHAR", "alias": "actions_events_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_b04d1058781235dbc2310a0febbc3f0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b04d1058781235dbc2310a0febbc3f0d"}, "created_at": 1658508765.3501697, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events_ACTION_DATA.37e6af2138": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_DATA", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_ACTION_DATA"], "unique_id": "test.near.not_null_silver__actions_events_ACTION_DATA.37e6af2138", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_ACTION_DATA.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events_ACTION_DATA", "alias": "actions_events_ACTION_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events_ACTION_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.3572276, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_DATA\nfrom NEAR.silver.actions_events\nwhere ACTION_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_DATA", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_DATA__OBJECT__VARIANT.cd719dad9e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_93a169b469320227edfa312c0940cabd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT", "VARIANT"], "column_name": "ACTION_DATA", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_93a169b469320227edfa312c0940cabd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_DATA__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_DATA__OBJECT__VARIANT.cd719dad9e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_93a169b469320227edfa312c0940cabd.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_DATA__OBJECT__VARIANT", "alias": "actions_events_ACTION_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_93a169b469320227edfa312c0940cabd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_93a169b469320227edfa312c0940cabd"}, "created_at": 1658508765.359954, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_DATA'\n            and\n            relation_column_type not in ('OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_DATA", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events__INGESTED_AT.ca40b88cac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events__INGESTED_AT"], "unique_id": "test.near.not_null_silver__actions_events__INGESTED_AT.ca40b88cac", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events__INGESTED_AT.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events__INGESTED_AT", "alias": "actions_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events__INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.3670082, "compiled_sql": "\n    \n    \n\n\n\nselect _INGESTED_AT\nfrom NEAR.silver.actions_events\nwhere _INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INGESTED_AT__TIMESTAMP_NTZ.beb4919034": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e5062df257d9ba7d2b5bec399ea0e811\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e5062df257d9ba7d2b5bec399ea0e811", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INGESTED_AT__TIMESTAMP_NTZ.beb4919034", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e5062df257d9ba7d2b5bec399ea0e811.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INGESTED_AT__TIMESTAMP_NTZ", "alias": "actions_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_e5062df257d9ba7d2b5bec399ea0e811.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e5062df257d9ba7d2b5bec399ea0e811"}, "created_at": 1658508765.3697746, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__actions_events"}, "test.near.not_null_silver__actions_events__INSERTED_TIMESTAMP.df76bc586c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events__INSERTED_TIMESTAMP"], "unique_id": "test.near.not_null_silver__actions_events__INSERTED_TIMESTAMP.df76bc586c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "not_null_silver__actions_events__INSERTED_TIMESTAMP", "alias": "actions_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/not_null_silver__actions_events__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.3763053, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom NEAR.silver.actions_events\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.90d45f4520": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ab712fa75074d0c38ba1ddf47c4bdbf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ab712fa75074d0c38ba1ddf47c4bdbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.90d45f4520", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6ab712fa75074d0c38ba1ddf47c4bdbf.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_expectations_expect_column_6ab712fa75074d0c38ba1ddf47c4bdbf.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6ab712fa75074d0c38ba1ddf47c4bdbf"}, "created_at": 1658508765.378993, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__actions_events"}, "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_action_id.046450591f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7036b1009dcc513152b942086a39b33b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('silver__actions_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7036b1009dcc513152b942086a39b33b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["near", "silver", "dbt_utils_unique_combination_of_columns_silver__actions_events_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_action_id.046450591f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_7036b1009dcc513152b942086a39b33b.sql", "original_file_path": "models/silver/silver__actions_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__actions_events_action_id", "alias": "actions_events_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events.yml/dbt_utils_unique_combination_o_7036b1009dcc513152b942086a39b33b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_7036b1009dcc513152b942086a39b33b"}, "created_at": 1658508765.3855362, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.silver.actions_events\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__actions_events"}, "test.near.unique_silver__actions_events_function_call_ACTION_ID.0aebdc67ef": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_silver", "fqn": ["near", "silver", "unique_silver__actions_events_function_call_ACTION_ID"], "unique_id": "test.near.unique_silver__actions_events_function_call_ACTION_ID.0aebdc67ef", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_silver__actions_events_function_call_ACTION_ID.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "unique_silver__actions_events_function_call_ACTION_ID", "alias": "actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/unique_silver__actions_events_function_call_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.4068909, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.silver.actions_events_function_call\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call_ACTION_ID.e5af633f77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call_ACTION_ID"], "unique_id": "test.near.not_null_silver__actions_events_function_call_ACTION_ID.e5af633f77", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call_ACTION_ID.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call_ACTION_ID", "alias": "actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.409722, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.silver.actions_events_function_call\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_ID__STRING__VARCHAR.f4da624b73": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_35dac85a65b014b1f2510200991c3b52\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_35dac85a65b014b1f2510200991c3b52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_ID__STRING__VARCHAR.f4da624b73", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_35dac85a65b014b1f2510200991c3b52.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_ID__STRING__VARCHAR", "alias": "actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_35dac85a65b014b1f2510200991c3b52.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_35dac85a65b014b1f2510200991c3b52"}, "created_at": 1658508765.4124682, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call_TX_HASH.fd126fcbeb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call_TX_HASH"], "unique_id": "test.near.not_null_silver__actions_events_function_call_TX_HASH.fd126fcbeb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call_TX_HASH.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call_TX_HASH", "alias": "actions_events_function_call_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.4196186, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.silver.actions_events_function_call\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_TX_HASH__STRING__VARCHAR.87af394b75": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a83344e9255d608eecd2811bb2a9b7d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a83344e9255d608eecd2811bb2a9b7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_TX_HASH__STRING__VARCHAR.87af394b75", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9a83344e9255d608eecd2811bb2a9b7d.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_TX_HASH__STRING__VARCHAR", "alias": "actions_events_function_call_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_9a83344e9255d608eecd2811bb2a9b7d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9a83344e9255d608eecd2811bb2a9b7d"}, "created_at": 1658508765.4223406, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call_BLOCK_ID.a6667362d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call_BLOCK_ID"], "unique_id": "test.near.not_null_silver__actions_events_function_call_BLOCK_ID.a6667362d4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call_BLOCK_ID.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call_BLOCK_ID", "alias": "actions_events_function_call_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.4294105, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.silver.actions_events_function_call\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.7ecdd9da08": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0468e78336f061e3d029e4971a9492dd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0468e78336f061e3d029e4971a9492dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.7ecdd9da08", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0468e78336f061e3d029e4971a9492dd.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_ID__NUMBER__FLOAT", "alias": "actions_events_function_call_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_0468e78336f061e3d029e4971a9492dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0468e78336f061e3d029e4971a9492dd"}, "created_at": 1658508765.432147, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP.ee95c263c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP.ee95c263c8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP", "alias": "actions_events_function_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.439957, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.silver.actions_events_function_call\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bb7e2c4ae1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e280a4d8b55adcc1121bbf4f1accea5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e280a4d8b55adcc1121bbf4f1accea5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bb7e2c4ae1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8e280a4d8b55adcc1121bbf4f1accea5.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events_function_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_8e280a4d8b55adcc1121bbf4f1accea5.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8e280a4d8b55adcc1121bbf4f1accea5"}, "created_at": 1658508765.4429667, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call_ACTION_NAME.3da3d81b85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call_ACTION_NAME"], "unique_id": "test.near.not_null_silver__actions_events_function_call_ACTION_NAME.3da3d81b85", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call_ACTION_NAME.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call_ACTION_NAME", "alias": "actions_events_function_call_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call_ACTION_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.4492254, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_NAME\nfrom NEAR.silver.actions_events_function_call\nwhere ACTION_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.2d14b866b8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0c56dccbafcfbf71bcf27b2b9ad620a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0c56dccbafcfbf71bcf27b2b9ad620a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.2d14b866b8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0c56dccbafcfbf71bcf27b2b9ad620a1.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_NAME__STRING__VARCHAR", "alias": "actions_events_function_call_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_0c56dccbafcfbf71bcf27b2b9ad620a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0c56dccbafcfbf71bcf27b2b9ad620a1"}, "created_at": 1658508765.45229, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call_METHOD_NAME.b158811477": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call_METHOD_NAME"], "unique_id": "test.near.not_null_silver__actions_events_function_call_METHOD_NAME.b158811477", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call_METHOD_NAME.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call_METHOD_NAME", "alias": "actions_events_function_call_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call_METHOD_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.45897, "compiled_sql": "\n    \n    \n\n\n\nselect METHOD_NAME\nfrom NEAR.silver.actions_events_function_call\nwhere METHOD_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.b54f29ec51": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4367cced40e10dfb55a26937cc92b83\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4367cced40e10dfb55a26937cc92b83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_METHOD_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.b54f29ec51", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d4367cced40e10dfb55a26937cc92b83.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_METHOD_NAME__STRING__VARCHAR", "alias": "actions_events_function_call_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_d4367cced40e10dfb55a26937cc92b83.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d4367cced40e10dfb55a26937cc92b83"}, "created_at": 1658508765.4620395, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METHOD_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call_ARGS.7c406f551a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ARGS", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call_ARGS"], "unique_id": "test.near.not_null_silver__actions_events_function_call_ARGS.7c406f551a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call_ARGS.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call_ARGS", "alias": "actions_events_function_call_ARGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call_ARGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.4687848, "compiled_sql": "\n    \n    \n\n\n\nselect ARGS\nfrom NEAR.silver.actions_events_function_call\nwhere ARGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ARGS", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ARGS__STRING__VARCHAR.52534f59ce": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b1794bb710193a1d09b1fd4a1d84957d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ARGS", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b1794bb710193a1d09b1fd4a1d84957d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ARGS__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ARGS__STRING__VARCHAR.52534f59ce", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b1794bb710193a1d09b1fd4a1d84957d.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ARGS__STRING__VARCHAR", "alias": "actions_events_function_call_ARGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_b1794bb710193a1d09b1fd4a1d84957d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b1794bb710193a1d09b1fd4a1d84957d"}, "created_at": 1658508765.471863, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ARGS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ARGS", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.f701ff77b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aac9286e46874ba085e1db1758d970a8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DEPOSIT", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aac9286e46874ba085e1db1758d970a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_DEPOSIT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.f701ff77b5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_aac9286e46874ba085e1db1758d970a8.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_DEPOSIT__NUMBER__FLOAT", "alias": "actions_events_function_call_DEPOSIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_aac9286e46874ba085e1db1758d970a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_aac9286e46874ba085e1db1758d970a8"}, "created_at": 1658508765.478774, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DEPOSIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DEPOSIT", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.3c97559b63": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2df16a3a59573bcec9c3d6db2e029283\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2df16a3a59573bcec9c3d6db2e029283", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.3c97559b63", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2df16a3a59573bcec9c3d6db2e029283.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT", "alias": "actions_events_function_call_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_2df16a3a59573bcec9c3d6db2e029283.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2df16a3a59573bcec9c3d6db2e029283"}, "created_at": 1658508765.485912, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTACHED_GAS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ATTACHED_GAS", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call__INGESTED_AT.52800c1fd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call__INGESTED_AT"], "unique_id": "test.near.not_null_silver__actions_events_function_call__INGESTED_AT.52800c1fd3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_function_call__INGESTED_AT.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call__INGESTED_AT", "alias": "actions_events_function_call", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_events_function_call__INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.4929547, "compiled_sql": "\n    \n    \n\n\n\nselect _INGESTED_AT\nfrom NEAR.silver.actions_events_function_call\nwhere _INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INGESTED_AT__TIMESTAMP_NTZ.0932adc172": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_823c396c5376c8509efa92e3a8922de1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_823c396c5376c8509efa92e3a8922de1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INGESTED_AT__TIMESTAMP_NTZ.0932adc172", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_823c396c5376c8509efa92e3a8922de1.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INGESTED_AT__TIMESTAMP_NTZ", "alias": "actions_events_function_call", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_823c396c5376c8509efa92e3a8922de1.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_823c396c5376c8509efa92e3a8922de1"}, "created_at": 1658508765.4957423, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.not_null_silver__actions_events_function_call__INSERTED_TIMESTAMP.555a317053": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__actions_event_b2ab0690c1aa6092a8c2a23226e491ab\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "not_null_silver__actions_event_b2ab0690c1aa6092a8c2a23226e491ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_function_call__INSERTED_TIMESTAMP"], "unique_id": "test.near.not_null_silver__actions_events_function_call__INSERTED_TIMESTAMP.555a317053", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_event_b2ab0690c1aa6092a8c2a23226e491ab.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "not_null_silver__actions_events_function_call__INSERTED_TIMESTAMP", "alias": "actions_events_function_call", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/not_null_silver__actions_event_b2ab0690c1aa6092a8c2a23226e491ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "not_null_silver__actions_event_b2ab0690c1aa6092a8c2a23226e491ab"}, "created_at": 1658508765.5024128, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom NEAR.silver.actions_events_function_call\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.fcfa131d7e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc4f028424f54574cb910a2b59a9f0f4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc4f028424f54574cb910a2b59a9f0f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.fcfa131d7e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_dc4f028424f54574cb910a2b59a9f0f4.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events_function_call", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_expectations_expect_column_dc4f028424f54574cb910a2b59a9f0f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_dc4f028424f54574cb910a2b59a9f0f4"}, "created_at": 1658508765.5052116, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__actions_events_function_call"}, "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_function_call_action_id.e6f91ea7e7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_af65d621b5fb05f45ea05a163abc599f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('silver__actions_events_function_call')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_af65d621b5fb05f45ea05a163abc599f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["near", "silver", "dbt_utils_unique_combination_of_columns_silver__actions_events_function_call_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_function_call_action_id.e6f91ea7e7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_af65d621b5fb05f45ea05a163abc599f.sql", "original_file_path": "models/silver/silver__actions_events_function_call.yml", "name": "dbt_utils_unique_combination_of_columns_silver__actions_events_function_call_action_id", "alias": "actions_events_function_call_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_function_call.yml/dbt_utils_unique_combination_o_af65d621b5fb05f45ea05a163abc599f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_af65d621b5fb05f45ea05a163abc599f"}, "created_at": 1658508765.5119205, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.silver.actions_events_function_call\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__actions_events_function_call"}, "test.near.unique_silver__actions_events_addkey_ACTION_ID.00489d51a8": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_silver", "fqn": ["near", "silver", "unique_silver__actions_events_addkey_ACTION_ID"], "unique_id": "test.near.unique_silver__actions_events_addkey_ACTION_ID.00489d51a8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_silver__actions_events_addkey_ACTION_ID.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "unique_silver__actions_events_addkey_ACTION_ID", "alias": "actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/unique_silver__actions_events_addkey_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.5268004, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.silver.actions_events_addkey\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey_ACTION_ID.4edf0990b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey_ACTION_ID"], "unique_id": "test.near.not_null_silver__actions_events_addkey_ACTION_ID.4edf0990b1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey_ACTION_ID.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey_ACTION_ID", "alias": "actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.5296352, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.silver.actions_events_addkey\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ACTION_ID__STRING__VARCHAR.b299cc7a24": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bff9adc393d029518e18e7f784c190ff\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bff9adc393d029518e18e7f784c190ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ACTION_ID__STRING__VARCHAR.b299cc7a24", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bff9adc393d029518e18e7f784c190ff.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ACTION_ID__STRING__VARCHAR", "alias": "actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_bff9adc393d029518e18e7f784c190ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bff9adc393d029518e18e7f784c190ff"}, "created_at": 1658508765.5324032, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey_TX_HASH.a46964f17a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey_TX_HASH"], "unique_id": "test.near.not_null_silver__actions_events_addkey_TX_HASH.a46964f17a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey_TX_HASH.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey_TX_HASH", "alias": "actions_events_addkey_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.5398152, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.silver.actions_events_addkey\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_TX_HASH__STRING__VARCHAR.746870d73b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c52ae1e460bc9681b647eaca7f6c3439\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c52ae1e460bc9681b647eaca7f6c3439", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_TX_HASH__STRING__VARCHAR.746870d73b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c52ae1e460bc9681b647eaca7f6c3439.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_TX_HASH__STRING__VARCHAR", "alias": "actions_events_addkey_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_c52ae1e460bc9681b647eaca7f6c3439.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c52ae1e460bc9681b647eaca7f6c3439"}, "created_at": 1658508765.542592, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey_BLOCK_ID.66f719abaa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey_BLOCK_ID"], "unique_id": "test.near.not_null_silver__actions_events_addkey_BLOCK_ID.66f719abaa", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey_BLOCK_ID.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey_BLOCK_ID", "alias": "actions_events_addkey_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.5503695, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.silver.actions_events_addkey\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.01c027a856": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_322a06d3af08f263b3b2c779de5847e9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_322a06d3af08f263b3b2c779de5847e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.01c027a856", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_322a06d3af08f263b3b2c779de5847e9.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_ID__NUMBER__FLOAT", "alias": "actions_events_addkey_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_322a06d3af08f263b3b2c779de5847e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_322a06d3af08f263b3b2c779de5847e9"}, "created_at": 1658508765.5531116, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP.d14083b626": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP.d14083b626", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP", "alias": "actions_events_addkey_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.5601974, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.silver.actions_events_addkey\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.609a6b1a0b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6dbebfae2ba0236b59a0f86ced5f59d8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6dbebfae2ba0236b59a0f86ced5f59d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.609a6b1a0b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6dbebfae2ba0236b59a0f86ced5f59d8.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events_addkey_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_6dbebfae2ba0236b59a0f86ced5f59d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6dbebfae2ba0236b59a0f86ced5f59d8"}, "created_at": 1658508765.5629263, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey_NONCE.258a29311a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey_NONCE"], "unique_id": "test.near.not_null_silver__actions_events_addkey_NONCE.258a29311a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey_NONCE.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey_NONCE", "alias": "actions_events_addkey_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.569494, "compiled_sql": "\n    \n    \n\n\n\nselect NONCE\nfrom NEAR.silver.actions_events_addkey\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_NONCE__NUMBER__FLOAT.efb9933073": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0960e9655faa16e7178441106d765773\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0960e9655faa16e7178441106d765773", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_NONCE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_NONCE__NUMBER__FLOAT.efb9933073", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0960e9655faa16e7178441106d765773.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_NONCE__NUMBER__FLOAT", "alias": "actions_events_addkey_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_0960e9655faa16e7178441106d765773.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0960e9655faa16e7178441106d765773"}, "created_at": 1658508765.5722156, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.cf49260aba": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6f5d0dde910e2cce147e915e6f448edd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "PUBLIC_KEY", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6f5d0dde910e2cce147e915e6f448edd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.cf49260aba", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6f5d0dde910e2cce147e915e6f448edd.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None", "alias": "actions_events_addkey_PUBLIC_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_6f5d0dde910e2cce147e915e6f448edd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6f5d0dde910e2cce147e915e6f448edd"}, "created_at": 1658508765.5793283, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PUBLIC_KEY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PUBLIC_KEY", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey_PERMISSION.bfcc522a69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PERMISSION", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey_PERMISSION"], "unique_id": "test.near.not_null_silver__actions_events_addkey_PERMISSION.bfcc522a69", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey_PERMISSION.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey_PERMISSION", "alias": "actions_events_addkey_PERMISSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey_PERMISSION.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.5863702, "compiled_sql": "\n    \n    \n\n\n\nselect PERMISSION\nfrom NEAR.silver.actions_events_addkey\nwhere PERMISSION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PERMISSION", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.6bab74d21c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a48ad04037eb5d5dd8caa0b43306c6ac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", "OBJECT", "VARIANT"], "column_name": "PERMISSION", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a48ad04037eb5d5dd8caa0b43306c6ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.6bab74d21c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a48ad04037eb5d5dd8caa0b43306c6ac.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT", "alias": "actions_events_addkey_PERMISSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_a48ad04037eb5d5dd8caa0b43306c6ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a48ad04037eb5d5dd8caa0b43306c6ac"}, "created_at": 1658508765.5891728, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PERMISSION'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PERMISSION", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.e513e01b2a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_511d66ae4a55f2a18489368228aebc5d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT", null], "column_name": "ALLOWANCE", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_511d66ae4a55f2a18489368228aebc5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.e513e01b2a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_511d66ae4a55f2a18489368228aebc5d.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None", "alias": "actions_events_addkey_ALLOWANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_511d66ae4a55f2a18489368228aebc5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_511d66ae4a55f2a18489368228aebc5d"}, "created_at": 1658508765.5972452, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ALLOWANCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ALLOWANCE", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.da779b1018": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_70a8973d99151cea77cb0a1659cf93b2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT", null], "column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_70a8973d99151cea77cb0a1659cf93b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.da779b1018", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_70a8973d99151cea77cb0a1659cf93b2.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None", "alias": "actions_events_addkey_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_70a8973d99151cea77cb0a1659cf93b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_70a8973d99151cea77cb0a1659cf93b2"}, "created_at": 1658508765.6042814, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METHOD_NAME'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.94d9b17bc3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_59505dedaab85158814a5d3c4b2b2f5e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "RECEIVER_ID", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_59505dedaab85158814a5d3c4b2b2f5e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.94d9b17bc3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_59505dedaab85158814a5d3c4b2b2f5e.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None", "alias": "actions_events_addkey_RECEIVER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_59505dedaab85158814a5d3c4b2b2f5e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_59505dedaab85158814a5d3c4b2b2f5e"}, "created_at": 1658508765.6116738, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIVER_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIVER_ID", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey__INGESTED_AT.f1ff1a384e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey__INGESTED_AT"], "unique_id": "test.near.not_null_silver__actions_events_addkey__INGESTED_AT.f1ff1a384e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey__INGESTED_AT.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey__INGESTED_AT", "alias": "actions_events_addkey", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey__INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.6186302, "compiled_sql": "\n    \n    \n\n\n\nselect _INGESTED_AT\nfrom NEAR.silver.actions_events_addkey\nwhere _INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INGESTED_AT__TIMESTAMP_NTZ.c1950b9d47": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4738dcea3dd8f714018dce39f4ad145a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4738dcea3dd8f714018dce39f4ad145a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INGESTED_AT__TIMESTAMP_NTZ.c1950b9d47", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_4738dcea3dd8f714018dce39f4ad145a.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INGESTED_AT__TIMESTAMP_NTZ", "alias": "actions_events_addkey", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_4738dcea3dd8f714018dce39f4ad145a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_4738dcea3dd8f714018dce39f4ad145a"}, "created_at": 1658508765.6213508, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP.2afdc88690": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP"], "unique_id": "test.near.not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP.2afdc88690", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP", "alias": "actions_events_addkey", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.6278095, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom NEAR.silver.actions_events_addkey\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.be94381057": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d49ca90579a527d0b486c6f152958221\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d49ca90579a527d0b486c6f152958221", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.be94381057", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d49ca90579a527d0b486c6f152958221.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events_addkey", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_expectations_expect_column_d49ca90579a527d0b486c6f152958221.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d49ca90579a527d0b486c6f152958221"}, "created_at": 1658508765.6305087, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__actions_events_addkey"}, "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_addkey_action_id.1c71c1dba8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_956acf10a2fb7de988d2fa7b823efd27\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('silver__actions_events_addkey')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_956acf10a2fb7de988d2fa7b823efd27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["near", "silver", "dbt_utils_unique_combination_of_columns_silver__actions_events_addkey_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_addkey_action_id.1c71c1dba8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_956acf10a2fb7de988d2fa7b823efd27.sql", "original_file_path": "models/silver/silver__actions_events_addkey.yml", "name": "dbt_utils_unique_combination_of_columns_silver__actions_events_addkey_action_id", "alias": "actions_events_addkey_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__actions_events_addkey.yml/dbt_utils_unique_combination_o_956acf10a2fb7de988d2fa7b823efd27.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_956acf10a2fb7de988d2fa7b823efd27"}, "created_at": 1658508765.6369824, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.silver.actions_events_addkey\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__actions_events_addkey"}, "test.near.not_null_silver__transfers_TX_HASH.9444c39bdc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_TX_HASH"], "unique_id": "test.near.not_null_silver__transfers_TX_HASH.9444c39bdc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_TX_HASH.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_HASH", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.65202, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.silver.transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_HASH__STRING__VARCHAR.40c789dddf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1d7a42dfc10aec94a7e4f2f326b2f883\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1d7a42dfc10aec94a7e4f2f326b2f883", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_HASH__STRING__VARCHAR.40c789dddf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1d7a42dfc10aec94a7e4f2f326b2f883.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_HASH__STRING__VARCHAR", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_1d7a42dfc10aec94a7e4f2f326b2f883.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1d7a42dfc10aec94a7e4f2f326b2f883"}, "created_at": 1658508765.65475, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_ACTION_ID.ed62984c52": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_ACTION_ID"], "unique_id": "test.near.not_null_silver__transfers_ACTION_ID.ed62984c52", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_ACTION_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_ACTION_ID", "alias": "transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.6622388, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.silver.transfers\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__transfers"}, "test.near.unique_silver__transfers_ACTION_ID.4bc39d7cca": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_silver", "fqn": ["near", "silver", "unique_silver__transfers_ACTION_ID"], "unique_id": "test.near.unique_silver__transfers_ACTION_ID.4bc39d7cca", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_silver__transfers_ACTION_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "unique_silver__transfers_ACTION_ID", "alias": "transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/unique_silver__transfers_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.6652675, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.silver.transfers\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_ACTION_ID__STRING__VARCHAR.17d326c4b4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ab0e431f77bad8238fe6c964eb32eca0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ab0e431f77bad8238fe6c964eb32eca0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_ACTION_ID__STRING__VARCHAR.17d326c4b4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ab0e431f77bad8238fe6c964eb32eca0.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_ACTION_ID__STRING__VARCHAR", "alias": "transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_ab0e431f77bad8238fe6c964eb32eca0.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ab0e431f77bad8238fe6c964eb32eca0"}, "created_at": 1658508765.668004, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_BLOCK_ID"], "unique_id": "test.near.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_ID", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.6749473, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.silver.transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f"}, "created_at": 1658508765.6776948, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.6846495, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1"}, "created_at": 1658508765.6873617, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_TX_SIGNER.8889abc928": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_TX_SIGNER"], "unique_id": "test.near.not_null_silver__transfers_TX_SIGNER.8889abc928", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_TX_SIGNER.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_SIGNER", "alias": "transfers_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.6938152, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SIGNER\nfrom NEAR.silver.transfers\nwhere TX_SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SIGNER__STRING__VARCHAR.efe1287aa8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_67306dbe3daab78a75e46815381b1b81\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_67306dbe3daab78a75e46815381b1b81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SIGNER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SIGNER__STRING__VARCHAR.efe1287aa8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_67306dbe3daab78a75e46815381b1b81.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SIGNER__STRING__VARCHAR", "alias": "transfers_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_67306dbe3daab78a75e46815381b1b81.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_67306dbe3daab78a75e46815381b1b81"}, "created_at": 1658508765.69655, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SIGNER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_TX_RECEIVER.86762ea9bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_TX_RECEIVER"], "unique_id": "test.near.not_null_silver__transfers_TX_RECEIVER.86762ea9bb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_TX_RECEIVER.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_RECEIVER", "alias": "transfers_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_RECEIVER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.7035258, "compiled_sql": "\n    \n    \n\n\n\nselect TX_RECEIVER\nfrom NEAR.silver.transfers\nwhere TX_RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_RECEIVER__STRING__VARCHAR.77487e0b81": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf9d2cb863e629393f6f052c7f66b261\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf9d2cb863e629393f6f052c7f66b261", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_RECEIVER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_RECEIVER__STRING__VARCHAR.77487e0b81", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bf9d2cb863e629393f6f052c7f66b261.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_RECEIVER__STRING__VARCHAR", "alias": "transfers_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_bf9d2cb863e629393f6f052c7f66b261.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bf9d2cb863e629393f6f052c7f66b261"}, "created_at": 1658508765.7062504, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_RECEIVER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_DEPOSIT__NUMBER__FLOAT.2793622130": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_87811a5a053f0e80a19372f35995d904\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DEPOSIT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_87811a5a053f0e80a19372f35995d904", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_DEPOSIT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_DEPOSIT__NUMBER__FLOAT.2793622130", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_87811a5a053f0e80a19372f35995d904.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_DEPOSIT__NUMBER__FLOAT", "alias": "transfers_DEPOSIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_87811a5a053f0e80a19372f35995d904.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_87811a5a053f0e80a19372f35995d904"}, "created_at": 1658508765.7132502, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DEPOSIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DEPOSIT", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_RECEIPT_OBJECT_ID.50e76c1641": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_RECEIPT_OBJECT_ID"], "unique_id": "test.near.not_null_silver__transfers_RECEIPT_OBJECT_ID.50e76c1641", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_RECEIPT_OBJECT_ID", "alias": "transfers_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_RECEIPT_OBJECT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.7201452, "compiled_sql": "\n    \n    \n\n\n\nselect RECEIPT_OBJECT_ID\nfrom NEAR.silver.transfers\nwhere RECEIPT_OBJECT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.4c63ae0a29": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_df5ee028b029821bd94e4f5b984586ba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_df5ee028b029821bd94e4f5b984586ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.4c63ae0a29", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_df5ee028b029821bd94e4f5b984586ba.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR", "alias": "transfers_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_df5ee028b029821bd94e4f5b984586ba.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_df5ee028b029821bd94e4f5b984586ba"}, "created_at": 1658508765.7228851, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIPT_OBJECT_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_TRANSACTION_FEE.6280370c28": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_TRANSACTION_FEE"], "unique_id": "test.near.not_null_silver__transfers_TRANSACTION_FEE.6280370c28", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_TRANSACTION_FEE.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TRANSACTION_FEE", "alias": "transfers_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_TRANSACTION_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.7298052, "compiled_sql": "\n    \n    \n\n\n\nselect TRANSACTION_FEE\nfrom NEAR.silver.transfers\nwhere TRANSACTION_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSACTION_FEE__NUMBER__FLOAT.03d6f98e08": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_40fa2b6bdec7eb8596337272d7b9b86f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_40fa2b6bdec7eb8596337272d7b9b86f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSACTION_FEE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSACTION_FEE__NUMBER__FLOAT.03d6f98e08", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_40fa2b6bdec7eb8596337272d7b9b86f.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSACTION_FEE__NUMBER__FLOAT", "alias": "transfers_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_40fa2b6bdec7eb8596337272d7b9b86f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_40fa2b6bdec7eb8596337272d7b9b86f"}, "created_at": 1658508765.73255, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSACTION_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_GAS_USED.37695a01b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_GAS_USED"], "unique_id": "test.near.not_null_silver__transfers_GAS_USED.37695a01b1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_GAS_USED.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_GAS_USED", "alias": "transfers_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.7396233, "compiled_sql": "\n    \n    \n\n\n\nselect GAS_USED\nfrom NEAR.silver.transfers\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_GAS_USED__NUMBER__FLOAT.37f6c7b45f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7b570f5dd2b80da796aa3ea5cf92d75a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7b570f5dd2b80da796aa3ea5cf92d75a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_GAS_USED__NUMBER__FLOAT.37f6c7b45f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7b570f5dd2b80da796aa3ea5cf92d75a.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_GAS_USED__NUMBER__FLOAT", "alias": "transfers_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_7b570f5dd2b80da796aa3ea5cf92d75a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7b570f5dd2b80da796aa3ea5cf92d75a"}, "created_at": 1658508765.7423806, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers_STATUS.97c41b55b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers_STATUS"], "unique_id": "test.near.not_null_silver__transfers_STATUS.97c41b55b7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers_STATUS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_STATUS", "alias": "transfers_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers_STATUS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.749459, "compiled_sql": "\n    \n    \n\n\n\nselect STATUS\nfrom NEAR.silver.transfers\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_STATUS__BOOLEAN.0f35e8bff6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7aa788b10715ddb1d98ee13d8d80e4bf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7aa788b10715ddb1d98ee13d8d80e4bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_STATUS__BOOLEAN"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_STATUS__BOOLEAN.0f35e8bff6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7aa788b10715ddb1d98ee13d8d80e4bf.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_STATUS__BOOLEAN", "alias": "transfers_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_7aa788b10715ddb1d98ee13d8d80e4bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7aa788b10715ddb1d98ee13d8d80e4bf"}, "created_at": 1658508765.75223, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STATUS'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers__INGESTED_AT.49ea10ff8e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers__INGESTED_AT"], "unique_id": "test.near.not_null_silver__transfers__INGESTED_AT.49ea10ff8e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers__INGESTED_AT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers__INGESTED_AT", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers__INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.758736, "compiled_sql": "\n    \n    \n\n\n\nselect _INGESTED_AT\nfrom NEAR.silver.transfers\nwhere _INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INGESTED_AT__TIMESTAMP_NTZ.b45a311332": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_879b4d1c80a8806146f68115ef258825\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_879b4d1c80a8806146f68115ef258825", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INGESTED_AT__TIMESTAMP_NTZ.b45a311332", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_879b4d1c80a8806146f68115ef258825.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INGESTED_AT__TIMESTAMP_NTZ", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_879b4d1c80a8806146f68115ef258825.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_879b4d1c80a8806146f68115ef258825"}, "created_at": 1658508765.7614918, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transfers__INSERTED_TIMESTAMP"], "unique_id": "test.near.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transfers__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers__INSERTED_TIMESTAMP", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/not_null_silver__transfers__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.7687833, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom NEAR.silver.transfers\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9d03af31f1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b6f46f50322a5b8ddf0254b259834e20\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b6f46f50322a5b8ddf0254b259834e20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9d03af31f1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b6f46f50322a5b8ddf0254b259834e20.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_expectations_expect_column_b6f46f50322a5b8ddf0254b259834e20.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b6f46f50322a5b8ddf0254b259834e20"}, "created_at": 1658508765.7715414, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.near.dbt_utils_unique_combination_of_columns_silver__transfers_action_id.8f42925692": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f8f0c68676b12b8019f4214ba910b0f5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f8f0c68676b12b8019f4214ba910b0f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["near", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_silver__transfers_action_id.8f42925692", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_f8f0c68676b12b8019f4214ba910b0f5.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers_action_id", "alias": "transfers_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transfers.yml/dbt_utils_unique_combination_o_f8f0c68676b12b8019f4214ba910b0f5.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_f8f0c68676b12b8019f4214ba910b0f5"}, "created_at": 1658508765.7781017, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.silver.transfers\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transfers"}, "test.near.not_null_silver__receipts_BLOCK_TIMESTAMP.69686ea2e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_silver__receipts_BLOCK_TIMESTAMP.69686ea2e0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_BLOCK_TIMESTAMP", "alias": "receipts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.7930992, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.silver.receipts\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dcaed6531d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05e1ff7cb4a7b3918440918da28c6f4b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05e1ff7cb4a7b3918440918da28c6f4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dcaed6531d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_05e1ff7cb4a7b3918440918da28c6f4b.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "receipts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_05e1ff7cb4a7b3918440918da28c6f4b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_05e1ff7cb4a7b3918440918da28c6f4b"}, "created_at": 1658508765.7960708, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_BLOCK_HASH.fd390123fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_BLOCK_HASH"], "unique_id": "test.near.not_null_silver__receipts_BLOCK_HASH.fd390123fb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_BLOCK_HASH", "alias": "receipts_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.8031387, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HASH\nfrom NEAR.silver.receipts\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_HASH__STRING__VARCHAR.dc9fadd0e2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c598eac5ec76153f1f01282fd178c40e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c598eac5ec76153f1f01282fd178c40e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_HASH__STRING__VARCHAR.dc9fadd0e2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c598eac5ec76153f1f01282fd178c40e.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_HASH__STRING__VARCHAR", "alias": "receipts_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_c598eac5ec76153f1f01282fd178c40e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c598eac5ec76153f1f01282fd178c40e"}, "created_at": 1658508765.8059587, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_TX_HASH.092684b07d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_TX_HASH"], "unique_id": "test.near.not_null_silver__receipts_TX_HASH.092684b07d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_TX_HASH.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_TX_HASH", "alias": "receipts_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.813343, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.silver.receipts\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_TX_HASH__STRING__VARCHAR.ce999cda9a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_daea5e256acf2979d1172e050065a7ce\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_daea5e256acf2979d1172e050065a7ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_TX_HASH__STRING__VARCHAR.ce999cda9a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_daea5e256acf2979d1172e050065a7ce.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_TX_HASH__STRING__VARCHAR", "alias": "receipts_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_daea5e256acf2979d1172e050065a7ce.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_daea5e256acf2979d1172e050065a7ce"}, "created_at": 1658508765.8161397, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_BLOCK_ID.ca1ffaba2c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_BLOCK_ID"], "unique_id": "test.near.not_null_silver__receipts_BLOCK_ID.ca1ffaba2c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_BLOCK_ID.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_BLOCK_ID", "alias": "receipts_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.823586, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.silver.receipts\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_ID__NUMBER__FLOAT.6bc81c63f2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f2e22a221fa4c6d9b23c9b65e7ebf6bb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f2e22a221fa4c6d9b23c9b65e7ebf6bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_ID__NUMBER__FLOAT.6bc81c63f2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f2e22a221fa4c6d9b23c9b65e7ebf6bb.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_ID__NUMBER__FLOAT", "alias": "receipts_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_f2e22a221fa4c6d9b23c9b65e7ebf6bb.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f2e22a221fa4c6d9b23c9b65e7ebf6bb"}, "created_at": 1658508765.8265133, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_RECEIPT_OBJECT_ID.06376365e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_RECEIPT_OBJECT_ID"], "unique_id": "test.near.not_null_silver__receipts_RECEIPT_OBJECT_ID.06376365e4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_RECEIPT_OBJECT_ID", "alias": "receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_RECEIPT_OBJECT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.8339207, "compiled_sql": "\n    \n    \n\n\n\nselect RECEIPT_OBJECT_ID\nfrom NEAR.silver.receipts\nwhere RECEIPT_OBJECT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.silver__receipts"}, "test.near.unique_silver__receipts_RECEIPT_OBJECT_ID.8a8d829305": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_silver", "fqn": ["near", "silver", "unique_silver__receipts_RECEIPT_OBJECT_ID"], "unique_id": "test.near.unique_silver__receipts_RECEIPT_OBJECT_ID.8a8d829305", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_silver__receipts_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "unique_silver__receipts_RECEIPT_OBJECT_ID", "alias": "receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/unique_silver__receipts_RECEIPT_OBJECT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.836671, "compiled_sql": "\n    \n    \n\nselect\n    RECEIPT_OBJECT_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.silver.receipts\nwhere RECEIPT_OBJECT_ID is not null\ngroup by RECEIPT_OBJECT_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.08bf2e2c26": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ff22609a73820d9fc034271563a63c77\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ff22609a73820d9fc034271563a63c77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.08bf2e2c26", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ff22609a73820d9fc034271563a63c77.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR", "alias": "receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_ff22609a73820d9fc034271563a63c77.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ff22609a73820d9fc034271563a63c77"}, "created_at": 1658508765.839453, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIPT_OBJECT_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_RECEIPT_OUTCOME_ID.ddab50600d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OUTCOME_ID", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_RECEIPT_OUTCOME_ID"], "unique_id": "test.near.not_null_silver__receipts_RECEIPT_OUTCOME_ID.ddab50600d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_RECEIPT_OUTCOME_ID.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_RECEIPT_OUTCOME_ID", "alias": "receipts_RECEIPT_OUTCOME_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_RECEIPT_OUTCOME_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.8468912, "compiled_sql": "\n    \n    \n\n\n\nselect RECEIPT_OUTCOME_ID\nfrom NEAR.silver.receipts\nwhere RECEIPT_OUTCOME_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OUTCOME_ID", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.b3550e7904": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_39a355b551dfbc6dc323bf4a9a7ea306\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "RECEIPT_OUTCOME_ID", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_39a355b551dfbc6dc323bf4a9a7ea306", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.b3550e7904", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_39a355b551dfbc6dc323bf4a9a7ea306.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT", "alias": "receipts_RECEIPT_OUTCOME_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_39a355b551dfbc6dc323bf4a9a7ea306.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_39a355b551dfbc6dc323bf4a9a7ea306"}, "created_at": 1658508765.849718, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIPT_OUTCOME_ID'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OUTCOME_ID", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_STATUS_VALUE.65020f0461": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS_VALUE", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_STATUS_VALUE"], "unique_id": "test.near.not_null_silver__receipts_STATUS_VALUE.65020f0461", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_STATUS_VALUE.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_STATUS_VALUE", "alias": "receipts_STATUS_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_STATUS_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.857557, "compiled_sql": "\n    \n    \n\n\n\nselect STATUS_VALUE\nfrom NEAR.silver.receipts\nwhere STATUS_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS_VALUE", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_STATUS_VALUE__VARIANT__OBJECT.3f672f5677": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14c4a4d6cb7e8e4d736a105563e3e3be\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT", "OBJECT"], "column_name": "STATUS_VALUE", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14c4a4d6cb7e8e4d736a105563e3e3be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_STATUS_VALUE__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_STATUS_VALUE__VARIANT__OBJECT.3f672f5677", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_14c4a4d6cb7e8e4d736a105563e3e3be.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_STATUS_VALUE__VARIANT__OBJECT", "alias": "receipts_STATUS_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_14c4a4d6cb7e8e4d736a105563e3e3be.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_14c4a4d6cb7e8e4d736a105563e3e3be"}, "created_at": 1658508765.860727, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STATUS_VALUE'\n            and\n            relation_column_type not in ('VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS_VALUE", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_LOGS.0ddfd30cfe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOGS", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_LOGS"], "unique_id": "test.near.not_null_silver__receipts_LOGS.0ddfd30cfe", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_LOGS.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_LOGS", "alias": "receipts_LOGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_LOGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.8677428, "compiled_sql": "\n    \n    \n\n\n\nselect LOGS\nfrom NEAR.silver.receipts\nwhere LOGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOGS", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_LOGS__ARRAY__VARIANT__OBJECT.0832b81b1a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7e5aff9614bcd17b518d2b9e75f7c1a9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "LOGS", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7e5aff9614bcd17b518d2b9e75f7c1a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_LOGS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_LOGS__ARRAY__VARIANT__OBJECT.0832b81b1a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7e5aff9614bcd17b518d2b9e75f7c1a9.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_LOGS__ARRAY__VARIANT__OBJECT", "alias": "receipts_LOGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_7e5aff9614bcd17b518d2b9e75f7c1a9.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7e5aff9614bcd17b518d2b9e75f7c1a9"}, "created_at": 1658508765.8708608, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LOGS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOGS", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_PROOF.719e5bfe9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROOF", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_PROOF"], "unique_id": "test.near.not_null_silver__receipts_PROOF.719e5bfe9d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_PROOF.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_PROOF", "alias": "receipts_PROOF", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_PROOF.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.8783722, "compiled_sql": "\n    \n    \n\n\n\nselect PROOF\nfrom NEAR.silver.receipts\nwhere PROOF is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROOF", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_PROOF__ARRAY__VARIANT__OBJECT.275a178fc9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_accae06da6592288bfcd4d23a51569a2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "PROOF", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_accae06da6592288bfcd4d23a51569a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_PROOF__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_PROOF__ARRAY__VARIANT__OBJECT.275a178fc9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_accae06da6592288bfcd4d23a51569a2.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_PROOF__ARRAY__VARIANT__OBJECT", "alias": "receipts_PROOF", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_accae06da6592288bfcd4d23a51569a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_accae06da6592288bfcd4d23a51569a2"}, "created_at": 1658508765.882174, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROOF'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROOF", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts_METADATA.4fd349d877": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METADATA", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts_METADATA"], "unique_id": "test.near.not_null_silver__receipts_METADATA.4fd349d877", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts_METADATA.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts_METADATA", "alias": "receipts_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts_METADATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.890046, "compiled_sql": "\n    \n    \n\n\n\nselect METADATA\nfrom NEAR.silver.receipts\nwhere METADATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METADATA", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_METADATA__VARIANT__OBJECT.8ef6ddce7f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccd3acf1d992464727d3e54f4921a00f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT", "OBJECT"], "column_name": "METADATA", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccd3acf1d992464727d3e54f4921a00f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_METADATA__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_METADATA__VARIANT__OBJECT.8ef6ddce7f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ccd3acf1d992464727d3e54f4921a00f.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_METADATA__VARIANT__OBJECT", "alias": "receipts_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_ccd3acf1d992464727d3e54f4921a00f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ccd3acf1d992464727d3e54f4921a00f"}, "created_at": 1658508765.8928647, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METADATA'\n            and\n            relation_column_type not in ('VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METADATA", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts__INGESTED_AT.2bbc2e4e48": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts__INGESTED_AT"], "unique_id": "test.near.not_null_silver__receipts__INGESTED_AT.2bbc2e4e48", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts__INGESTED_AT.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts__INGESTED_AT", "alias": "receipts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts__INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.9002612, "compiled_sql": "\n    \n    \n\n\n\nselect _INGESTED_AT\nfrom NEAR.silver.receipts\nwhere _INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INGESTED_AT__TIMESTAMP_NTZ.6370876547": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_285851ff17f94a63c74f6045f496f95a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_285851ff17f94a63c74f6045f496f95a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INGESTED_AT__TIMESTAMP_NTZ.6370876547", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_285851ff17f94a63c74f6045f496f95a.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INGESTED_AT__TIMESTAMP_NTZ", "alias": "receipts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_285851ff17f94a63c74f6045f496f95a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_285851ff17f94a63c74f6045f496f95a"}, "created_at": 1658508765.9030056, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__receipts__INSERTED_TIMESTAMP.954d9b172c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__receipts__INSERTED_TIMESTAMP"], "unique_id": "test.near.not_null_silver__receipts__INSERTED_TIMESTAMP.954d9b172c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__receipts__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "not_null_silver__receipts__INSERTED_TIMESTAMP", "alias": "receipts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/not_null_silver__receipts__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.9097738, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom NEAR.silver.receipts\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.6c0ead8d63": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c2b6b3f4c19ff9710079ce102afdb275\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c2b6b3f4c19ff9710079ce102afdb275", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.6c0ead8d63", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c2b6b3f4c19ff9710079ce102afdb275.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "receipts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_expectations_expect_column_c2b6b3f4c19ff9710079ce102afdb275.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c2b6b3f4c19ff9710079ce102afdb275"}, "created_at": 1658508765.9125397, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__receipts"}, "test.near.dbt_utils_unique_combination_of_columns_silver__receipts_receipt_object_id.aeae58750c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_170e044299fe95807e5688ff8d8a8829\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["receipt_object_id"], "model": "{{ get_where_subquery(ref('silver__receipts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__receipts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_170e044299fe95807e5688ff8d8a8829", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["near", "silver", "dbt_utils_unique_combination_of_columns_silver__receipts_receipt_object_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_silver__receipts_receipt_object_id.aeae58750c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_170e044299fe95807e5688ff8d8a8829.sql", "original_file_path": "models/silver/silver__receipts.yml", "name": "dbt_utils_unique_combination_of_columns_silver__receipts_receipt_object_id", "alias": "receipts_receipt_object_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__receipts.yml/dbt_utils_unique_combination_o_170e044299fe95807e5688ff8d8a8829.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_170e044299fe95807e5688ff8d8a8829"}, "created_at": 1658508765.9193301, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        receipt_object_id\n    from NEAR.silver.receipts\n    group by receipt_object_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__receipts"}, "test.near.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_BLOCK_ID"], "unique_id": "test.near.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.9474716, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.silver.blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e"}, "created_at": 1658508765.9524548, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508765.9604065, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["near", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692"}, "created_at": 1658508765.9633148, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        NEAR.silver.blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1658508765.9959424, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_BLOCK_HASH"], "unique_id": "test.near.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HASH", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.0027647, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HASH\nfrom NEAR.silver.blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77"}, "created_at": 1658508766.005572, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.near.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.0136764, "compiled_sql": "\n    \n    \n\n\n\nselect TX_COUNT\nfrom NEAR.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7"}, "created_at": 1658508766.0164576, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_BLOCK_AUTHOR.bb49b754c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_AUTHOR", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_BLOCK_AUTHOR"], "unique_id": "test.near.not_null_silver__blocks_BLOCK_AUTHOR.bb49b754c9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_BLOCK_AUTHOR.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_AUTHOR", "alias": "blocks_BLOCK_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_AUTHOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.023593, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_AUTHOR\nfrom NEAR.silver.blocks\nwhere BLOCK_AUTHOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_AUTHOR", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_AUTHOR__STRING__VARCHAR.f4666ef6b9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fbd8bf3f83fa3880c4390be8e53bd262\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_AUTHOR", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fbd8bf3f83fa3880c4390be8e53bd262", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_AUTHOR__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_AUTHOR__STRING__VARCHAR.f4666ef6b9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_fbd8bf3f83fa3880c4390be8e53bd262.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_AUTHOR__STRING__VARCHAR", "alias": "blocks_BLOCK_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_fbd8bf3f83fa3880c4390be8e53bd262.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_fbd8bf3f83fa3880c4390be8e53bd262"}, "created_at": 1658508766.02631, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_AUTHOR'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_AUTHOR", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_RESULT.3d30e8c870": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_CHALLENGES_RESULT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_BLOCK_CHALLENGES_RESULT"], "unique_id": "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_RESULT.3d30e8c870", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_BLOCK_CHALLENGES_RESULT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_CHALLENGES_RESULT", "alias": "blocks_BLOCK_CHALLENGES_RESULT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_CHALLENGES_RESULT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.033436, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_CHALLENGES_RESULT\nfrom NEAR.silver.blocks\nwhere BLOCK_CHALLENGES_RESULT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_RESULT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.fbf6d23a9e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a4763ca6bdc7a3ccb2373b4c6a12e1a3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "BLOCK_CHALLENGES_RESULT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a4763ca6bdc7a3ccb2373b4c6a12e1a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.fbf6d23a9e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a4763ca6bdc7a3ccb2373b4c6a12e1a3.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT", "alias": "blocks_BLOCK_CHALLENGES_RESULT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a4763ca6bdc7a3ccb2373b4c6a12e1a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a4763ca6bdc7a3ccb2373b4c6a12e1a3"}, "created_at": 1658508766.036196, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_CHALLENGES_RESULT'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_RESULT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_ROOT.fa33553147": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_CHALLENGES_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_BLOCK_CHALLENGES_ROOT"], "unique_id": "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_ROOT.fa33553147", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_BLOCK_CHALLENGES_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_CHALLENGES_ROOT", "alias": "blocks_BLOCK_CHALLENGES_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_CHALLENGES_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.0439308, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_CHALLENGES_ROOT\nfrom NEAR.silver.blocks\nwhere BLOCK_CHALLENGES_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.094aac3d39": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd91d6fcd0e76bf9a299a2135f150fb2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_CHALLENGES_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd91d6fcd0e76bf9a299a2135f150fb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.094aac3d39", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bd91d6fcd0e76bf9a299a2135f150fb2.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR", "alias": "blocks_BLOCK_CHALLENGES_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bd91d6fcd0e76bf9a299a2135f150fb2.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bd91d6fcd0e76bf9a299a2135f150fb2"}, "created_at": 1658508766.0467103, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_CHALLENGES_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_CHUNK_HEADERS_ROOT.f1b8cdfa33": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_HEADERS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_CHUNK_HEADERS_ROOT"], "unique_id": "test.near.not_null_silver__blocks_CHUNK_HEADERS_ROOT.f1b8cdfa33", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_CHUNK_HEADERS_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHUNK_HEADERS_ROOT", "alias": "blocks_CHUNK_HEADERS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_CHUNK_HEADERS_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.054028, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_HEADERS_ROOT\nfrom NEAR.silver.blocks\nwhere CHUNK_HEADERS_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_HEADERS_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.42d0fd7136": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61c7605d8d7ca396b106a2ef3a8901d7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_HEADERS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61c7605d8d7ca396b106a2ef3a8901d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.42d0fd7136", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_61c7605d8d7ca396b106a2ef3a8901d7.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR", "alias": "blocks_CHUNK_HEADERS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_61c7605d8d7ca396b106a2ef3a8901d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_61c7605d8d7ca396b106a2ef3a8901d7"}, "created_at": 1658508766.0568213, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_HEADERS_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_HEADERS_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_CHUNK_MASK.18bc24d091": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_MASK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_CHUNK_MASK"], "unique_id": "test.near.not_null_silver__blocks_CHUNK_MASK.18bc24d091", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_CHUNK_MASK.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHUNK_MASK", "alias": "blocks_CHUNK_MASK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_CHUNK_MASK.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.0640407, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_MASK\nfrom NEAR.silver.blocks\nwhere CHUNK_MASK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_MASK", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.8f04a8e609": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7748902f59ce126bb0926043a4aabd7d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "CHUNK_MASK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7748902f59ce126bb0926043a4aabd7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.8f04a8e609", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7748902f59ce126bb0926043a4aabd7d.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT", "alias": "blocks_CHUNK_MASK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_7748902f59ce126bb0926043a4aabd7d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7748902f59ce126bb0926043a4aabd7d"}, "created_at": 1658508766.0667675, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_MASK'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_MASK", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_CHUNK_RECEIPTS_ROOT.6cbf5f3378": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_CHUNK_RECEIPTS_ROOT"], "unique_id": "test.near.not_null_silver__blocks_CHUNK_RECEIPTS_ROOT.6cbf5f3378", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_CHUNK_RECEIPTS_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHUNK_RECEIPTS_ROOT", "alias": "blocks_CHUNK_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_CHUNK_RECEIPTS_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.0743783, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_RECEIPTS_ROOT\nfrom NEAR.silver.blocks\nwhere CHUNK_RECEIPTS_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.4ed79567e1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d90d455358f1e05924795f3723c7f8dc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d90d455358f1e05924795f3723c7f8dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.4ed79567e1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d90d455358f1e05924795f3723c7f8dc.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR", "alias": "blocks_CHUNK_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_d90d455358f1e05924795f3723c7f8dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d90d455358f1e05924795f3723c7f8dc"}, "created_at": 1658508766.0774505, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_RECEIPTS_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_CHUNK_TX_ROOT.bff513a312": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_TX_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_CHUNK_TX_ROOT"], "unique_id": "test.near.not_null_silver__blocks_CHUNK_TX_ROOT.bff513a312", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_CHUNK_TX_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHUNK_TX_ROOT", "alias": "blocks_CHUNK_TX_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_CHUNK_TX_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.0842896, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_TX_ROOT\nfrom NEAR.silver.blocks\nwhere CHUNK_TX_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_TX_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_TX_ROOT__STRING__VARCHAR.5ce50838dc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8244ba2aba1573cd2c6fc91ef385a50a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_TX_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8244ba2aba1573cd2c6fc91ef385a50a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_TX_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_TX_ROOT__STRING__VARCHAR.5ce50838dc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8244ba2aba1573cd2c6fc91ef385a50a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_TX_ROOT__STRING__VARCHAR", "alias": "blocks_CHUNK_TX_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_8244ba2aba1573cd2c6fc91ef385a50a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8244ba2aba1573cd2c6fc91ef385a50a"}, "created_at": 1658508766.0873432, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_TX_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_TX_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_CHUNKS.83d5b713fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNKS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_CHUNKS"], "unique_id": "test.near.not_null_silver__blocks_CHUNKS.83d5b713fc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_CHUNKS.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHUNKS", "alias": "blocks_CHUNKS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_CHUNKS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.0940623, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNKS\nfrom NEAR.silver.blocks\nwhere CHUNKS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS__ARRAY__VARIANT__OBJECT.dd17974b98": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dd68200c3ae50f30c99fe2ea00b1096a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "CHUNKS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dd68200c3ae50f30c99fe2ea00b1096a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS__ARRAY__VARIANT__OBJECT.dd17974b98", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_dd68200c3ae50f30c99fe2ea00b1096a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS__ARRAY__VARIANT__OBJECT", "alias": "blocks_CHUNKS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_dd68200c3ae50f30c99fe2ea00b1096a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_dd68200c3ae50f30c99fe2ea00b1096a"}, "created_at": 1658508766.0971298, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNKS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_CHUNKS_INCLUDED.98715a934b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNKS_INCLUDED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_CHUNKS_INCLUDED"], "unique_id": "test.near.not_null_silver__blocks_CHUNKS_INCLUDED.98715a934b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_CHUNKS_INCLUDED.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHUNKS_INCLUDED", "alias": "blocks_CHUNKS_INCLUDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_CHUNKS_INCLUDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.1044707, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNKS_INCLUDED\nfrom NEAR.silver.blocks\nwhere CHUNKS_INCLUDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS_INCLUDED", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS_INCLUDED__NUMBER.5626b73674": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9bf5e2a18f779327413e5a91434e63db\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "CHUNKS_INCLUDED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9bf5e2a18f779327413e5a91434e63db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS_INCLUDED__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS_INCLUDED__NUMBER.5626b73674", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9bf5e2a18f779327413e5a91434e63db.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS_INCLUDED__NUMBER", "alias": "blocks_CHUNKS_INCLUDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_9bf5e2a18f779327413e5a91434e63db.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9bf5e2a18f779327413e5a91434e63db"}, "created_at": 1658508766.1075773, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNKS_INCLUDED'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS_INCLUDED", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_EPOCH_ID.c0f6044087": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EPOCH_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_EPOCH_ID"], "unique_id": "test.near.not_null_silver__blocks_EPOCH_ID.c0f6044087", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_EPOCH_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EPOCH_ID", "alias": "blocks_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_EPOCH_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.113934, "compiled_sql": "\n    \n    \n\n\n\nselect EPOCH_ID\nfrom NEAR.silver.blocks\nwhere EPOCH_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EPOCH_ID", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_ID__STRING__VARCHAR.f0cc32fbb4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_734a2c2b34cee703603a3e87ab72cf9e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EPOCH_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_734a2c2b34cee703603a3e87ab72cf9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_ID__STRING__VARCHAR.f0cc32fbb4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_734a2c2b34cee703603a3e87ab72cf9e.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_ID__STRING__VARCHAR", "alias": "blocks_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_734a2c2b34cee703603a3e87ab72cf9e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_734a2c2b34cee703603a3e87ab72cf9e"}, "created_at": 1658508766.1170862, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EPOCH_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EPOCH_ID", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.a7fd17668f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8bac33e140537dd127053f6c0adc218\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "EPOCH_SYNC_DATA_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8bac33e140537dd127053f6c0adc218", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.a7fd17668f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d8bac33e140537dd127053f6c0adc218.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None", "alias": "blocks_EPOCH_SYNC_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_d8bac33e140537dd127053f6c0adc218.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d8bac33e140537dd127053f6c0adc218"}, "created_at": 1658508766.1249292, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EPOCH_SYNC_DATA_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EPOCH_SYNC_DATA_HASH", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_EVENTS.d6d4d9ddb1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENTS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_EVENTS"], "unique_id": "test.near.not_null_silver__blocks_EVENTS.d6d4d9ddb1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_EVENTS.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EVENTS", "alias": "blocks_EVENTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_EVENTS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.131804, "compiled_sql": "\n    \n    \n\n\n\nselect EVENTS\nfrom NEAR.silver.blocks\nwhere EVENTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENTS", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVENTS__ARRAY__VARIANT__OBJECT.4f7e7341b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_da7addeb82d7f3351b226bbbe677f023\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "EVENTS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da7addeb82d7f3351b226bbbe677f023", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVENTS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVENTS__ARRAY__VARIANT__OBJECT.4f7e7341b5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_da7addeb82d7f3351b226bbbe677f023.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVENTS__ARRAY__VARIANT__OBJECT", "alias": "blocks_EVENTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_da7addeb82d7f3351b226bbbe677f023.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_da7addeb82d7f3351b226bbbe677f023"}, "created_at": 1658508766.1348894, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENTS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENTS", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_GAS_PRICE.d6ea3582a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_GAS_PRICE"], "unique_id": "test.near.not_null_silver__blocks_GAS_PRICE.d6ea3582a6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_GAS_PRICE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_GAS_PRICE", "alias": "blocks_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.142216, "compiled_sql": "\n    \n    \n\n\n\nselect GAS_PRICE\nfrom NEAR.silver.blocks\nwhere GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_PRICE", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_PRICE__NUMBER__FLOAT.d986a9c078": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ae892fbdd6e693af94cbdec7bed42f8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ae892fbdd6e693af94cbdec7bed42f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_PRICE__NUMBER__FLOAT.d986a9c078", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2ae892fbdd6e693af94cbdec7bed42f8.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_PRICE__NUMBER__FLOAT", "alias": "blocks_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ae892fbdd6e693af94cbdec7bed42f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2ae892fbdd6e693af94cbdec7bed42f8"}, "created_at": 1658508766.1453056, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_PRICE", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_LAST_DS_FINAL_BLOCK.2dd2764b73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_DS_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_LAST_DS_FINAL_BLOCK"], "unique_id": "test.near.not_null_silver__blocks_LAST_DS_FINAL_BLOCK.2dd2764b73", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_LAST_DS_FINAL_BLOCK.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_DS_FINAL_BLOCK", "alias": "blocks_LAST_DS_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_DS_FINAL_BLOCK.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.152169, "compiled_sql": "\n    \n    \n\n\n\nselect LAST_DS_FINAL_BLOCK\nfrom NEAR.silver.blocks\nwhere LAST_DS_FINAL_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_DS_FINAL_BLOCK", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.55b62140ba": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e183a1fe0f09ba2a7477128d812d499\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_DS_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e183a1fe0f09ba2a7477128d812d499", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.55b62140ba", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8e183a1fe0f09ba2a7477128d812d499.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR", "alias": "blocks_LAST_DS_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_8e183a1fe0f09ba2a7477128d812d499.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8e183a1fe0f09ba2a7477128d812d499"}, "created_at": 1658508766.1552863, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_DS_FINAL_BLOCK'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_DS_FINAL_BLOCK", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_LAST_FINAL_BLOCK.cd0127605a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_LAST_FINAL_BLOCK"], "unique_id": "test.near.not_null_silver__blocks_LAST_FINAL_BLOCK.cd0127605a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_LAST_FINAL_BLOCK.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_FINAL_BLOCK", "alias": "blocks_LAST_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_FINAL_BLOCK.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.1624095, "compiled_sql": "\n    \n    \n\n\n\nselect LAST_FINAL_BLOCK\nfrom NEAR.silver.blocks\nwhere LAST_FINAL_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_FINAL_BLOCK", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.012f2dca96": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d85ca80d6f0f4d106c15718ea4eae749\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d85ca80d6f0f4d106c15718ea4eae749", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_FINAL_BLOCK__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.012f2dca96", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d85ca80d6f0f4d106c15718ea4eae749.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_FINAL_BLOCK__STRING__VARCHAR", "alias": "blocks_LAST_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_d85ca80d6f0f4d106c15718ea4eae749.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d85ca80d6f0f4d106c15718ea4eae749"}, "created_at": 1658508766.1651833, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_FINAL_BLOCK'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_FINAL_BLOCK", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_LATEST_PROTOCOL_VERSION.5aa205aa7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LATEST_PROTOCOL_VERSION", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_LATEST_PROTOCOL_VERSION"], "unique_id": "test.near.not_null_silver__blocks_LATEST_PROTOCOL_VERSION.5aa205aa7c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_LATEST_PROTOCOL_VERSION.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LATEST_PROTOCOL_VERSION", "alias": "blocks_LATEST_PROTOCOL_VERSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_LATEST_PROTOCOL_VERSION.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.172246, "compiled_sql": "\n    \n    \n\n\n\nselect LATEST_PROTOCOL_VERSION\nfrom NEAR.silver.blocks\nwhere LATEST_PROTOCOL_VERSION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LATEST_PROTOCOL_VERSION", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.0acc8b26f1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_68f872cda50d55f2e5c72fa14d6fbb6c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "LATEST_PROTOCOL_VERSION", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_68f872cda50d55f2e5c72fa14d6fbb6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.0acc8b26f1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_68f872cda50d55f2e5c72fa14d6fbb6c.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT", "alias": "blocks_LATEST_PROTOCOL_VERSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_68f872cda50d55f2e5c72fa14d6fbb6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_68f872cda50d55f2e5c72fa14d6fbb6c"}, "created_at": 1658508766.1749449, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LATEST_PROTOCOL_VERSION'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LATEST_PROTOCOL_VERSION", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_NEXT_BP_HASH.8958fe32fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_BP_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_NEXT_BP_HASH"], "unique_id": "test.near.not_null_silver__blocks_NEXT_BP_HASH.8958fe32fe", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_NEXT_BP_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NEXT_BP_HASH", "alias": "blocks_NEXT_BP_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_NEXT_BP_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.181979, "compiled_sql": "\n    \n    \n\n\n\nselect NEXT_BP_HASH\nfrom NEAR.silver.blocks\nwhere NEXT_BP_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_BP_HASH", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_BP_HASH__STRING__VARCHAR.5487ce1db5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1f8d421af0c7e32b230dfb9b436398fa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_BP_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1f8d421af0c7e32b230dfb9b436398fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_BP_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_BP_HASH__STRING__VARCHAR.5487ce1db5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1f8d421af0c7e32b230dfb9b436398fa.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_BP_HASH__STRING__VARCHAR", "alias": "blocks_NEXT_BP_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1f8d421af0c7e32b230dfb9b436398fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1f8d421af0c7e32b230dfb9b436398fa"}, "created_at": 1658508766.184775, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_BP_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_BP_HASH", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_NEXT_EPOCH_ID.fa366de380": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_EPOCH_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_NEXT_EPOCH_ID"], "unique_id": "test.near.not_null_silver__blocks_NEXT_EPOCH_ID.fa366de380", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_NEXT_EPOCH_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NEXT_EPOCH_ID", "alias": "blocks_NEXT_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_NEXT_EPOCH_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.1918278, "compiled_sql": "\n    \n    \n\n\n\nselect NEXT_EPOCH_ID\nfrom NEAR.silver.blocks\nwhere NEXT_EPOCH_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_EPOCH_ID", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_EPOCH_ID__STRING__VARCHAR.75f106b40a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a48d140585410fd61513a1e8908985d8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_EPOCH_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a48d140585410fd61513a1e8908985d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_EPOCH_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_EPOCH_ID__STRING__VARCHAR.75f106b40a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a48d140585410fd61513a1e8908985d8.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_EPOCH_ID__STRING__VARCHAR", "alias": "blocks_NEXT_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a48d140585410fd61513a1e8908985d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a48d140585410fd61513a1e8908985d8"}, "created_at": 1658508766.1945431, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_EPOCH_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_EPOCH_ID", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_OUTCOME_ROOT.ab5b96f9d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OUTCOME_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_OUTCOME_ROOT"], "unique_id": "test.near.not_null_silver__blocks_OUTCOME_ROOT.ab5b96f9d8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_OUTCOME_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_OUTCOME_ROOT", "alias": "blocks_OUTCOME_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_OUTCOME_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2016127, "compiled_sql": "\n    \n    \n\n\n\nselect OUTCOME_ROOT\nfrom NEAR.silver.blocks\nwhere OUTCOME_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OUTCOME_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_OUTCOME_ROOT__STRING__VARCHAR.518869455e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1007f02aa840c9031ebc606249a17bdd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "OUTCOME_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1007f02aa840c9031ebc606249a17bdd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_OUTCOME_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_OUTCOME_ROOT__STRING__VARCHAR.518869455e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1007f02aa840c9031ebc606249a17bdd.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_OUTCOME_ROOT__STRING__VARCHAR", "alias": "blocks_OUTCOME_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1007f02aa840c9031ebc606249a17bdd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1007f02aa840c9031ebc606249a17bdd"}, "created_at": 1658508766.2043362, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OUTCOME_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OUTCOME_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_PREV_HASH.28fbc77a14": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREV_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_PREV_HASH"], "unique_id": "test.near.not_null_silver__blocks_PREV_HASH.28fbc77a14", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_PREV_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PREV_HASH", "alias": "blocks_PREV_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_PREV_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2113698, "compiled_sql": "\n    \n    \n\n\n\nselect PREV_HASH\nfrom NEAR.silver.blocks\nwhere PREV_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_HASH", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HASH__STRING__VARCHAR.8b1070f986": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a703523f41394ee154d4e08fbfdf3276\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PREV_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a703523f41394ee154d4e08fbfdf3276", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HASH__STRING__VARCHAR.8b1070f986", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a703523f41394ee154d4e08fbfdf3276.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HASH__STRING__VARCHAR", "alias": "blocks_PREV_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a703523f41394ee154d4e08fbfdf3276.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a703523f41394ee154d4e08fbfdf3276"}, "created_at": 1658508766.2141066, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PREV_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_HASH", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HEIGHT__NUMBER__FLOAT.4175a577d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_198077d822b4b818a1397d3ad6d0d0c6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PREV_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_198077d822b4b818a1397d3ad6d0d0c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HEIGHT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HEIGHT__NUMBER__FLOAT.4175a577d3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_198077d822b4b818a1397d3ad6d0d0c6.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HEIGHT__NUMBER__FLOAT", "alias": "blocks_PREV_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_198077d822b4b818a1397d3ad6d0d0c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_198077d822b4b818a1397d3ad6d0d0c6"}, "created_at": 1658508766.221196, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PREV_HEIGHT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_HEIGHT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_STATE_ROOT__STRING__VARCHAR.4b3704efd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_333ede42b10a7b97dc4f1fa323fe03d4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PREV_STATE_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_333ede42b10a7b97dc4f1fa323fe03d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_STATE_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_STATE_ROOT__STRING__VARCHAR.4b3704efd9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_333ede42b10a7b97dc4f1fa323fe03d4.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_STATE_ROOT__STRING__VARCHAR", "alias": "blocks_PREV_STATE_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_333ede42b10a7b97dc4f1fa323fe03d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_333ede42b10a7b97dc4f1fa323fe03d4"}, "created_at": 1658508766.2281377, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PREV_STATE_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_STATE_ROOT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_RANDOM_VALUE.db4ad67b9b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RANDOM_VALUE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_RANDOM_VALUE"], "unique_id": "test.near.not_null_silver__blocks_RANDOM_VALUE.db4ad67b9b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_RANDOM_VALUE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_RANDOM_VALUE", "alias": "blocks_RANDOM_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_RANDOM_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2356362, "compiled_sql": "\n    \n    \n\n\n\nselect RANDOM_VALUE\nfrom NEAR.silver.blocks\nwhere RANDOM_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RANDOM_VALUE", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RANDOM_VALUE__STRING__VARCHAR.9d93972b2c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_736e60e8911a476ba0e7a108cce6c2a2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RANDOM_VALUE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_736e60e8911a476ba0e7a108cce6c2a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RANDOM_VALUE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RANDOM_VALUE__STRING__VARCHAR.9d93972b2c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_736e60e8911a476ba0e7a108cce6c2a2.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RANDOM_VALUE__STRING__VARCHAR", "alias": "blocks_RANDOM_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_736e60e8911a476ba0e7a108cce6c2a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_736e60e8911a476ba0e7a108cce6c2a2"}, "created_at": 1658508766.2383304, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RANDOM_VALUE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RANDOM_VALUE", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_RENT_PAID.3c7dbecf7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RENT_PAID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_RENT_PAID"], "unique_id": "test.near.not_null_silver__blocks_RENT_PAID.3c7dbecf7a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_RENT_PAID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_RENT_PAID", "alias": "blocks_RENT_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_RENT_PAID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2451994, "compiled_sql": "\n    \n    \n\n\n\nselect RENT_PAID\nfrom NEAR.silver.blocks\nwhere RENT_PAID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RENT_PAID", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RENT_PAID__NUMBER__FLOAT.be9c732cbc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bdf2f33a83de3e809cabe6f895429d66\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RENT_PAID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bdf2f33a83de3e809cabe6f895429d66", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RENT_PAID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RENT_PAID__NUMBER__FLOAT.be9c732cbc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bdf2f33a83de3e809cabe6f895429d66.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RENT_PAID__NUMBER__FLOAT", "alias": "blocks_RENT_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bdf2f33a83de3e809cabe6f895429d66.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bdf2f33a83de3e809cabe6f895429d66"}, "created_at": 1658508766.2479296, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RENT_PAID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RENT_PAID", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_SIGNATURE.a341779cdc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_SIGNATURE"], "unique_id": "test.near.not_null_silver__blocks_SIGNATURE.a341779cdc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_SIGNATURE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_SIGNATURE", "alias": "blocks_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2548053, "compiled_sql": "\n    \n    \n\n\n\nselect SIGNATURE\nfrom NEAR.silver.blocks\nwhere SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIGNATURE__STRING__VARCHAR.6fdebd747e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_122e46367f7533d2b368fd0c3b1797d2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_122e46367f7533d2b368fd0c3b1797d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIGNATURE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIGNATURE__STRING__VARCHAR.6fdebd747e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_122e46367f7533d2b368fd0c3b1797d2.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIGNATURE__STRING__VARCHAR", "alias": "blocks_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_122e46367f7533d2b368fd0c3b1797d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_122e46367f7533d2b368fd0c3b1797d2"}, "created_at": 1658508766.257517, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SIGNATURE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_TOTAL_SUPPLY.5b273acde2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_TOTAL_SUPPLY"], "unique_id": "test.near.not_null_silver__blocks_TOTAL_SUPPLY.5b273acde2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_TOTAL_SUPPLY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TOTAL_SUPPLY", "alias": "blocks_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_TOTAL_SUPPLY.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2644732, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SUPPLY\nfrom NEAR.silver.blocks\nwhere TOTAL_SUPPLY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_SUPPLY__NUMBER__FLOAT.67c227c99e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cc37c165f26e807a3c724423771cc454\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cc37c165f26e807a3c724423771cc454", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_SUPPLY__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_SUPPLY__NUMBER__FLOAT.67c227c99e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_cc37c165f26e807a3c724423771cc454.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_SUPPLY__NUMBER__FLOAT", "alias": "blocks_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_cc37c165f26e807a3c724423771cc454.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_cc37c165f26e807a3c724423771cc454"}, "created_at": 1658508766.2671702, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_SUPPLY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_VALIDATOR_PROPOSALS.402c0d6cd4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_PROPOSALS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_VALIDATOR_PROPOSALS"], "unique_id": "test.near.not_null_silver__blocks_VALIDATOR_PROPOSALS.402c0d6cd4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_VALIDATOR_PROPOSALS.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_VALIDATOR_PROPOSALS", "alias": "blocks_VALIDATOR_PROPOSALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_VALIDATOR_PROPOSALS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2741525, "compiled_sql": "\n    \n    \n\n\n\nselect VALIDATOR_PROPOSALS\nfrom NEAR.silver.blocks\nwhere VALIDATOR_PROPOSALS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_PROPOSALS", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3b5e9bf985": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2a58c5127637bed7a35a77a22b0fece3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "VALIDATOR_PROPOSALS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2a58c5127637bed7a35a77a22b0fece3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3b5e9bf985", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2a58c5127637bed7a35a77a22b0fece3.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT", "alias": "blocks_VALIDATOR_PROPOSALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2a58c5127637bed7a35a77a22b0fece3.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2a58c5127637bed7a35a77a22b0fece3"}, "created_at": 1658508766.276891, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATOR_PROPOSALS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_PROPOSALS", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks_VALIDATOR_REWARD.66191ea9b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_REWARD", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks_VALIDATOR_REWARD"], "unique_id": "test.near.not_null_silver__blocks_VALIDATOR_REWARD.66191ea9b3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks_VALIDATOR_REWARD.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_VALIDATOR_REWARD", "alias": "blocks_VALIDATOR_REWARD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks_VALIDATOR_REWARD.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2843041, "compiled_sql": "\n    \n    \n\n\n\nselect VALIDATOR_REWARD\nfrom NEAR.silver.blocks\nwhere VALIDATOR_REWARD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_REWARD", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_REWARD__NUMBER__FLOAT.3b6dba6ddd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9c7b139d793501da3d52d2b638eaa58b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "VALIDATOR_REWARD", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9c7b139d793501da3d52d2b638eaa58b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_REWARD__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_REWARD__NUMBER__FLOAT.3b6dba6ddd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9c7b139d793501da3d52d2b638eaa58b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_REWARD__NUMBER__FLOAT", "alias": "blocks_VALIDATOR_REWARD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_9c7b139d793501da3d52d2b638eaa58b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9c7b139d793501da3d52d2b638eaa58b"}, "created_at": 1658508766.2870016, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATOR_REWARD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_REWARD", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks__INGESTED_AT.8dcde2b926": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks__INGESTED_AT"], "unique_id": "test.near.not_null_silver__blocks__INGESTED_AT.8dcde2b926", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks__INGESTED_AT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks__INGESTED_AT", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks__INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.2940462, "compiled_sql": "\n    \n    \n\n\n\nselect _INGESTED_AT\nfrom NEAR.silver.blocks\nwhere _INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INGESTED_AT__TIMESTAMP_NTZ.895a7802bb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a3ccb47a7c74b792eef650e64bf64d9d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a3ccb47a7c74b792eef650e64bf64d9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INGESTED_AT__TIMESTAMP_NTZ.895a7802bb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a3ccb47a7c74b792eef650e64bf64d9d.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INGESTED_AT__TIMESTAMP_NTZ", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a3ccb47a7c74b792eef650e64bf64d9d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a3ccb47a7c74b792eef650e64bf64d9d"}, "created_at": 1658508766.2968087, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__blocks__INSERTED_TIMESTAMP"], "unique_id": "test.near.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks__INSERTED_TIMESTAMP", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.303405, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom NEAR.silver.blocks\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169"}, "created_at": 1658508766.3061202, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.near.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["near", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_block_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.3126886, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id\n    from NEAR.silver.blocks\n    group by block_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.near.sequence_gaps_silver__blocks_block_id.c10db99188": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.near.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "sequence_gaps_silver", "fqn": ["near", "silver", "sequence_gaps_silver__blocks_block_id"], "unique_id": "test.near.sequence_gaps_silver__blocks_block_id.c10db99188", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "sequence_gaps_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "sequence_gaps_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__blocks.yml/sequence_gaps_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1658508766.3194609, "compiled_sql": "WITH source AS (\n    SELECT\n        \n        block_id,\n        LAG(\n            block_id,\n            1\n        ) over (\n            \n            ORDER BY\n                block_id ASC\n        ) AS prev_block_id\n    FROM\n        (select * from NEAR.silver.blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    \n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.near.not_null_silver__transactions_BLOCK_ID.ba1565770d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_BLOCK_ID"], "unique_id": "test.near.not_null_silver__transactions_BLOCK_ID.ba1565770d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_ID", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.3393836, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.silver.transactions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea"}, "created_at": 1658508766.3422377, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_BLOCK_HASH"], "unique_id": "test.near.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_HASH", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.350164, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HASH\nfrom NEAR.silver.transactions\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_HASH__STRING__VARCHAR.8e7de06afe": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d6127bdb14f5977d220cbc95b6633f2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d6127bdb14f5977d220cbc95b6633f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_HASH__STRING__VARCHAR.8e7de06afe", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0d6127bdb14f5977d220cbc95b6633f2.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_HASH__STRING__VARCHAR", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0d6127bdb14f5977d220cbc95b6633f2.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0d6127bdb14f5977d220cbc95b6633f2"}, "created_at": 1658508766.3529441, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_TX_HASH.8a2cc32062": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_TX_HASH"], "unique_id": "test.near.not_null_silver__transactions_TX_HASH.8a2cc32062", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_TX_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.3601656, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.silver.transactions\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.near.unique_silver__transactions_TX_HASH.1b18756021": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_silver", "fqn": ["near", "silver", "unique_silver__transactions_TX_HASH"], "unique_id": "test.near.unique_silver__transactions_TX_HASH.1b18756021", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_silver__transactions_TX_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "unique_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/unique_silver__transactions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.3629005, "compiled_sql": "\n    \n    \n\nselect\n    TX_HASH as unique_field,\n    count(*) as n_records\n\nfrom NEAR.silver.transactions\nwhere TX_HASH is not null\ngroup by TX_HASH\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_HASH__STRING__VARCHAR.c3974f687b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c86aa5d30940fc60b564ae6a4c3634e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c86aa5d30940fc60b564ae6a4c3634e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_HASH__STRING__VARCHAR.c3974f687b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_5c86aa5d30940fc60b564ae6a4c3634e.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_HASH__STRING__VARCHAR", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_5c86aa5d30940fc60b564ae6a4c3634e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_5c86aa5d30940fc60b564ae6a4c3634e"}, "created_at": 1658508766.3660018, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.near.tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.4e5bbcd183": {"raw_sql": "{{ test_tx_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "tx_gaps", "kwargs": {"column_block": "block_id", "column_tx_count": "tx_count", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.near.test_tx_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions", "model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "tx_gaps_silver", "fqn": ["near", "silver", "tx_gaps_silver__transactions_block_id__TX_HASH__tx_count"], "unique_id": "test.near.tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.4e5bbcd183", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "tx_gaps_silver__transactions_block_id__TX_HASH__tx_count", "alias": "transactions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"], ["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1658508766.373557, "compiled_sql": "\nWITH block_base AS (\n    SELECT\n        block_id,\n        tx_count\n    FROM\n        NEAR.silver.blocks\n),\nmodel_name AS (\n    SELECT\n        block_id,\n        COUNT(\n            DISTINCT TX_HASH\n        ) AS model_tx_count\n    FROM\n        (select * from NEAR.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n    GROUP BY\n        block_id\n)\nSELECT\n    block_base.block_id,\n    tx_count,\n    model_name.block_id,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_id = model_name.block_id\nWHERE\n    tx_count <> model_tx_count ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.3836827, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["near", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb"}, "created_at": 1658508766.386431, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        NEAR.silver.transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb"}, "created_at": 1658508766.395064, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_NONCE.3eac435cf9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_NONCE"], "unique_id": "test.near.not_null_silver__transactions_NONCE.3eac435cf9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_NONCE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_NONCE", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.401686, "compiled_sql": "\n    \n    \n\n\n\nselect NONCE\nfrom NEAR.silver.transactions\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER.c65f59222f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1d454f29099a202414a25239592e154c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1d454f29099a202414a25239592e154c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER.c65f59222f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1d454f29099a202414a25239592e154c.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_1d454f29099a202414a25239592e154c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1d454f29099a202414a25239592e154c"}, "created_at": 1658508766.4044442, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_SIGNATURE.2b66681922": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_SIGNATURE"], "unique_id": "test.near.not_null_silver__transactions_SIGNATURE.2b66681922", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_SIGNATURE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_SIGNATURE", "alias": "transactions_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4109728, "compiled_sql": "\n    \n    \n\n\n\nselect SIGNATURE\nfrom NEAR.silver.transactions\nwhere SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_SIGNATURE__STRING__VARCHAR.f8faaafc67": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_93eedbf617ebb1ded4a4cd0e5a495632\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_93eedbf617ebb1ded4a4cd0e5a495632", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_SIGNATURE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_SIGNATURE__STRING__VARCHAR.f8faaafc67", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_93eedbf617ebb1ded4a4cd0e5a495632.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_SIGNATURE__STRING__VARCHAR", "alias": "transactions_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_93eedbf617ebb1ded4a4cd0e5a495632.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_93eedbf617ebb1ded4a4cd0e5a495632"}, "created_at": 1658508766.4137418, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SIGNATURE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_TX_RECEIVER.4e66e153ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_TX_RECEIVER"], "unique_id": "test.near.not_null_silver__transactions_TX_RECEIVER.4e66e153ff", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_TX_RECEIVER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_RECEIVER", "alias": "transactions_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_RECEIVER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4208617, "compiled_sql": "\n    \n    \n\n\n\nselect TX_RECEIVER\nfrom NEAR.silver.transactions\nwhere TX_RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_RECEIVER__STRING__VARCHAR.b209d322bb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afbb5ef245f79cf53ac3354cdc24efea\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_afbb5ef245f79cf53ac3354cdc24efea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_RECEIVER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_RECEIVER__STRING__VARCHAR.b209d322bb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_afbb5ef245f79cf53ac3354cdc24efea.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_RECEIVER__STRING__VARCHAR", "alias": "transactions_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_afbb5ef245f79cf53ac3354cdc24efea.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_afbb5ef245f79cf53ac3354cdc24efea"}, "created_at": 1658508766.4236362, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_RECEIVER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_TX_SIGNER.d32526a192": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_TX_SIGNER"], "unique_id": "test.near.not_null_silver__transactions_TX_SIGNER.d32526a192", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_TX_SIGNER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_SIGNER", "alias": "transactions_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4306862, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SIGNER\nfrom NEAR.silver.transactions\nwhere TX_SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SIGNER__STRING__VARCHAR.ea1d98a242": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_34f728850e2d6a14bba62d1a35c00187\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_34f728850e2d6a14bba62d1a35c00187", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SIGNER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SIGNER__STRING__VARCHAR.ea1d98a242", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_34f728850e2d6a14bba62d1a35c00187.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SIGNER__STRING__VARCHAR", "alias": "transactions_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_34f728850e2d6a14bba62d1a35c00187.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_34f728850e2d6a14bba62d1a35c00187"}, "created_at": 1658508766.4334476, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SIGNER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_TX.9b16114c6b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_TX"], "unique_id": "test.near.not_null_silver__transactions_TX.9b16114c6b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_TX.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX", "alias": "transactions_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4405499, "compiled_sql": "\n    \n    \n\n\n\nselect TX\nfrom NEAR.silver.transactions\nwhere TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX__OBJECT__VARIANT.db7514cc23": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e870118390d29893102850ccf0811dd3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT", "VARIANT"], "column_name": "TX", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e870118390d29893102850ccf0811dd3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX__OBJECT__VARIANT.db7514cc23", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e870118390d29893102850ccf0811dd3.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX__OBJECT__VARIANT", "alias": "transactions_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_e870118390d29893102850ccf0811dd3.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e870118390d29893102850ccf0811dd3"}, "created_at": 1658508766.4432988, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX'\n            and\n            relation_column_type not in ('OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_GAS_USED.1c943486c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_GAS_USED"], "unique_id": "test.near.not_null_silver__transactions_GAS_USED.1c943486c0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_USED", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4503343, "compiled_sql": "\n    \n    \n\n\n\nselect GAS_USED\nfrom NEAR.silver.transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07"}, "created_at": 1658508766.4530737, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_ATTACHED_GAS.86e427e695": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_ATTACHED_GAS"], "unique_id": "test.near.not_null_silver__transactions_ATTACHED_GAS.86e427e695", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_ATTACHED_GAS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_ATTACHED_GAS", "alias": "transactions_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_ATTACHED_GAS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4607966, "compiled_sql": "\n    \n    \n\n\n\nselect ATTACHED_GAS\nfrom NEAR.silver.transactions\nwhere ATTACHED_GAS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ATTACHED_GAS", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_ATTACHED_GAS__NUMBER__FLOAT.ca8df525bf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_22d9b2b67b58587794317f038b05c0f8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_22d9b2b67b58587794317f038b05c0f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_ATTACHED_GAS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_ATTACHED_GAS__NUMBER__FLOAT.ca8df525bf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_22d9b2b67b58587794317f038b05c0f8.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_ATTACHED_GAS__NUMBER__FLOAT", "alias": "transactions_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_22d9b2b67b58587794317f038b05c0f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_22d9b2b67b58587794317f038b05c0f8"}, "created_at": 1658508766.4635227, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTACHED_GAS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ATTACHED_GAS", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions_TRANSACTION_FEE.f9ae18cb8e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions_TRANSACTION_FEE"], "unique_id": "test.near.not_null_silver__transactions_TRANSACTION_FEE.f9ae18cb8e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions_TRANSACTION_FEE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TRANSACTION_FEE", "alias": "transactions_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions_TRANSACTION_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4704688, "compiled_sql": "\n    \n    \n\n\n\nselect TRANSACTION_FEE\nfrom NEAR.silver.transactions\nwhere TRANSACTION_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TRANSACTION_FEE__NUMBER__FLOAT.58acc1d5fa": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c0e38fc04b02f4ccc46bcb8c5aaad3b4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c0e38fc04b02f4ccc46bcb8c5aaad3b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TRANSACTION_FEE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TRANSACTION_FEE__NUMBER__FLOAT.58acc1d5fa", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c0e38fc04b02f4ccc46bcb8c5aaad3b4.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TRANSACTION_FEE__NUMBER__FLOAT", "alias": "transactions_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_c0e38fc04b02f4ccc46bcb8c5aaad3b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c0e38fc04b02f4ccc46bcb8c5aaad3b4"}, "created_at": 1658508766.4731965, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSACTION_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions__INGESTED_AT.513b40bce6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions__INGESTED_AT"], "unique_id": "test.near.not_null_silver__transactions__INGESTED_AT.513b40bce6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions__INGESTED_AT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions__INGESTED_AT", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions__INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4802392, "compiled_sql": "\n    \n    \n\n\n\nselect _INGESTED_AT\nfrom NEAR.silver.transactions\nwhere _INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INGESTED_AT__TIMESTAMP_NTZ.9fdb673d6d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1225f0b0c2e1b772ee0715322cf85a56\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1225f0b0c2e1b772ee0715322cf85a56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INGESTED_AT__TIMESTAMP_NTZ.9fdb673d6d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1225f0b0c2e1b772ee0715322cf85a56.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INGESTED_AT__TIMESTAMP_NTZ", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_1225f0b0c2e1b772ee0715322cf85a56.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1225f0b0c2e1b772ee0715322cf85a56"}, "created_at": 1658508766.482983, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.near.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_silver", "fqn": ["near", "silver", "not_null_silver__transactions__INSERTED_TIMESTAMP"], "unique_id": "test.near.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_silver__transactions__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions__INSERTED_TIMESTAMP", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/not_null_silver__transactions__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.4897149, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom NEAR.silver.transactions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.82828385ba": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e92cb1347549a26c356b57f7b1afc07\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e92cb1347549a26c356b57f7b1afc07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["near", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.82828385ba", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3e92cb1347549a26c356b57f7b1afc07.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_expectations_expect_column_3e92cb1347549a26c356b57f7b1afc07.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3e92cb1347549a26c356b57f7b1afc07"}, "created_at": 1658508766.4925015, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.near.dbt_utils_unique_combination_of_columns_silver__transactions_tx_hash.8c46c2d054": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6992306253a37739546a5a2c99b22ffe\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_hash"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6992306253a37739546a5a2c99b22ffe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["near", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_tx_hash"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_silver__transactions_tx_hash.8c46c2d054", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_6992306253a37739546a5a2c99b22ffe.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_tx_hash", "alias": "transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/silver/silver__transactions.yml/dbt_utils_unique_combination_o_6992306253a37739546a5a2c99b22ffe.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_6992306253a37739546a5a2c99b22ffe"}, "created_at": 1658508766.4992664, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        tx_hash\n    from NEAR.silver.transactions\n    group by tx_hash\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transactions"}, "test.near.not_null_core__metrics_active_wallets_DATE.e216e96b9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_active_wallets_DATE"], "unique_id": "test.near.not_null_core__metrics_active_wallets_DATE.e216e96b9f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_active_wallets_DATE.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "not_null_core__metrics_active_wallets_DATE", "alias": "metrics_active_wallets_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/not_null_core__metrics_active_wallets_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.5092723, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.core.metrics_active_wallets\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DATE__TIMESTAMP_NTZ.c8fb0475a5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_695705c87a788dbaabd8a1b022bace08\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_695705c87a788dbaabd8a1b022bace08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DATE__TIMESTAMP_NTZ.c8fb0475a5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_695705c87a788dbaabd8a1b022bace08.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DATE__TIMESTAMP_NTZ", "alias": "metrics_active_wallets_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/dbt_expectations_expect_column_695705c87a788dbaabd8a1b022bace08.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_695705c87a788dbaabd8a1b022bace08"}, "created_at": 1658508766.5120928, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS.3d580a2aec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS.3d580a2aec", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS", "alias": "metrics_active_wallets_DAILY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.518843, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_ACTIVE_WALLETS\nfrom NEAR.core.metrics_active_wallets\nwhere DAILY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_ACTIVE_WALLETS", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.c7f44ee269": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8ccc14e9d736fc1b2a459fa2b9ae183\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8ccc14e9d736fc1b2a459fa2b9ae183", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.c7f44ee269", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b8ccc14e9d736fc1b2a459fa2b9ae183.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "metrics_active_wallets_DAILY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/dbt_expectations_expect_column_b8ccc14e9d736fc1b2a459fa2b9ae183.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b8ccc14e9d736fc1b2a459fa2b9ae183"}, "created_at": 1658508766.521638, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_ACTIVE_WALLETS", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.not_null_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.35aa4e3a63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__metrics_active__3c71dc6fb7b720372b221217eb4fa0e3\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "not_null_core__metrics_active__3c71dc6fb7b720372b221217eb4fa0e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.35aa4e3a63", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_active__3c71dc6fb7b720372b221217eb4fa0e3.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "not_null_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "alias": "metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/not_null_core__metrics_active__3c71dc6fb7b720372b221217eb4fa0e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "not_null_core__metrics_active__3c71dc6fb7b720372b221217eb4fa0e3"}, "created_at": 1658508766.5288904, "compiled_sql": "\n    \n    \n\n\n\nselect ROLLING_7DAY_ACTIVE_WALLETS\nfrom NEAR.core.metrics_active_wallets\nwhere ROLLING_7DAY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.e470f71374": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ee293cf39ac3a8350484c222d62c9599\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ee293cf39ac3a8350484c222d62c9599", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.e470f71374", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ee293cf39ac3a8350484c222d62c9599.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/dbt_expectations_expect_column_ee293cf39ac3a8350484c222d62c9599.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ee293cf39ac3a8350484c222d62c9599"}, "created_at": 1658508766.5316658, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ROLLING_7DAY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.not_null_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.2c18d2f5a2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__metrics_active__f7ae6e240cdfbbb78fda58957dff3463\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "not_null_core__metrics_active__f7ae6e240cdfbbb78fda58957dff3463", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.2c18d2f5a2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_active__f7ae6e240cdfbbb78fda58957dff3463.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "not_null_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "alias": "metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/not_null_core__metrics_active__f7ae6e240cdfbbb78fda58957dff3463.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "not_null_core__metrics_active__f7ae6e240cdfbbb78fda58957dff3463"}, "created_at": 1658508766.538776, "compiled_sql": "\n    \n    \n\n\n\nselect ROLLING_30DAY_ACTIVE_WALLETS\nfrom NEAR.core.metrics_active_wallets\nwhere ROLLING_30DAY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.b291db12c6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ea752dd8e20e552b7dded6270c522bc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('core__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ea752dd8e20e552b7dded6270c522bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.b291db12c6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2ea752dd8e20e552b7dded6270c522bc.sql", "original_file_path": "models/core/core__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_active_wallets.yml/dbt_expectations_expect_column_2ea752dd8e20e552b7dded6270c522bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2ea752dd8e20e552b7dded6270c522bc"}, "created_at": 1658508766.5415606, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ROLLING_30DAY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "file_key_name": "models.core__metrics_active_wallets"}, "test.near.not_null_core__fact_receipts_BLOCK_TIMESTAMP.2131bf1bd4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_core__fact_receipts_BLOCK_TIMESTAMP.2131bf1bd4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_BLOCK_TIMESTAMP", "alias": "fact_receipts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.5552514, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.core.fact_receipts\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.131cd7814d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_25df2e474581596631bbef74a4d1decd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_25df2e474581596631bbef74a4d1decd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.131cd7814d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_25df2e474581596631bbef74a4d1decd.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_receipts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_25df2e474581596631bbef74a4d1decd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_25df2e474581596631bbef74a4d1decd"}, "created_at": 1658508766.558136, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_BLOCK_ID.a70b3ec0f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_BLOCK_ID"], "unique_id": "test.near.not_null_core__fact_receipts_BLOCK_ID.a70b3ec0f3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_BLOCK_ID", "alias": "fact_receipts_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.5648181, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.core.fact_receipts\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_ID__NUMBER__FLOAT.ec0ede8b55": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8aa10657d86d17eba2fb1f3e9503b38\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8aa10657d86d17eba2fb1f3e9503b38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_ID__NUMBER__FLOAT.ec0ede8b55", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c8aa10657d86d17eba2fb1f3e9503b38.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_receipts_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_c8aa10657d86d17eba2fb1f3e9503b38.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c8aa10657d86d17eba2fb1f3e9503b38"}, "created_at": 1658508766.567547, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_TX_HASH.6cfac33e8b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_TX_HASH"], "unique_id": "test.near.not_null_core__fact_receipts_TX_HASH.6cfac33e8b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_TX_HASH.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_TX_HASH", "alias": "fact_receipts_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.5754375, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.core.fact_receipts\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_TX_HASH__STRING__VARCHAR.30fd0ae348": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eb22ec58b787334d1f539398d4ffd2e7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eb22ec58b787334d1f539398d4ffd2e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_TX_HASH__STRING__VARCHAR.30fd0ae348", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_eb22ec58b787334d1f539398d4ffd2e7.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_TX_HASH__STRING__VARCHAR", "alias": "fact_receipts_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_eb22ec58b787334d1f539398d4ffd2e7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_eb22ec58b787334d1f539398d4ffd2e7"}, "created_at": 1658508766.578153, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_RECEIPT_OBJECT_ID.7a20facc22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_RECEIPT_OBJECT_ID"], "unique_id": "test.near.not_null_core__fact_receipts_RECEIPT_OBJECT_ID.7a20facc22", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_RECEIPT_OBJECT_ID", "alias": "fact_receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_RECEIPT_OBJECT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.5853107, "compiled_sql": "\n    \n    \n\n\n\nselect RECEIPT_OBJECT_ID\nfrom NEAR.core.fact_receipts\nwhere RECEIPT_OBJECT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.core__fact_receipts"}, "test.near.unique_core__fact_receipts_RECEIPT_OBJECT_ID.3acffe8bbc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_core", "fqn": ["near", "core", "unique_core__fact_receipts_RECEIPT_OBJECT_ID"], "unique_id": "test.near.unique_core__fact_receipts_RECEIPT_OBJECT_ID.3acffe8bbc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_core__fact_receipts_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "unique_core__fact_receipts_RECEIPT_OBJECT_ID", "alias": "fact_receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/unique_core__fact_receipts_RECEIPT_OBJECT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.588015, "compiled_sql": "\n    \n    \n\nselect\n    RECEIPT_OBJECT_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.core.fact_receipts\nwhere RECEIPT_OBJECT_ID is not null\ngroup by RECEIPT_OBJECT_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.48ff7d111b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3c24c1bbd0d757ce13c54144b022b152\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3c24c1bbd0d757ce13c54144b022b152", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.48ff7d111b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3c24c1bbd0d757ce13c54144b022b152.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR", "alias": "fact_receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_3c24c1bbd0d757ce13c54144b022b152.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3c24c1bbd0d757ce13c54144b022b152"}, "created_at": 1658508766.5910137, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIPT_OBJECT_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_RECEIPT_OUTCOME_ID.0f88cf2275": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OUTCOME_ID", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_RECEIPT_OUTCOME_ID"], "unique_id": "test.near.not_null_core__fact_receipts_RECEIPT_OUTCOME_ID.0f88cf2275", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_RECEIPT_OUTCOME_ID.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_RECEIPT_OUTCOME_ID", "alias": "fact_receipts_RECEIPT_OUTCOME_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_RECEIPT_OUTCOME_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.5977888, "compiled_sql": "\n    \n    \n\n\n\nselect RECEIPT_OUTCOME_ID\nfrom NEAR.core.fact_receipts\nwhere RECEIPT_OUTCOME_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OUTCOME_ID", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.e6844aa406": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c56493ad76f645e43245a26314aadc8b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "RECEIPT_OUTCOME_ID", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c56493ad76f645e43245a26314aadc8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.e6844aa406", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c56493ad76f645e43245a26314aadc8b.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT", "alias": "fact_receipts_RECEIPT_OUTCOME_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_c56493ad76f645e43245a26314aadc8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c56493ad76f645e43245a26314aadc8b"}, "created_at": 1658508766.6008935, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIPT_OUTCOME_ID'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OUTCOME_ID", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_STATUS_VALUE.b9afe0d6c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS_VALUE", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_STATUS_VALUE"], "unique_id": "test.near.not_null_core__fact_receipts_STATUS_VALUE.b9afe0d6c8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_STATUS_VALUE.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_STATUS_VALUE", "alias": "fact_receipts_STATUS_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_STATUS_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6081345, "compiled_sql": "\n    \n    \n\n\n\nselect STATUS_VALUE\nfrom NEAR.core.fact_receipts\nwhere STATUS_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS_VALUE", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.8d495dea59": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0422ec381831b9a9b94afd61b753da94\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT", "OBJECT"], "column_name": "STATUS_VALUE", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0422ec381831b9a9b94afd61b753da94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_STATUS_VALUE__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.8d495dea59", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0422ec381831b9a9b94afd61b753da94.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_STATUS_VALUE__VARIANT__OBJECT", "alias": "fact_receipts_STATUS_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_0422ec381831b9a9b94afd61b753da94.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0422ec381831b9a9b94afd61b753da94"}, "created_at": 1658508766.6112008, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STATUS_VALUE'\n            and\n            relation_column_type not in ('VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS_VALUE", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_LOGS.7d958c6c70": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOGS", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_LOGS"], "unique_id": "test.near.not_null_core__fact_receipts_LOGS.7d958c6c70", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_LOGS.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_LOGS", "alias": "fact_receipts_LOGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_LOGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6182795, "compiled_sql": "\n    \n    \n\n\n\nselect LOGS\nfrom NEAR.core.fact_receipts\nwhere LOGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOGS", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.64b40f6319": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_324e97e555bc0707f1dd00141e2e4d26\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "LOGS", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_324e97e555bc0707f1dd00141e2e4d26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.64b40f6319", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_324e97e555bc0707f1dd00141e2e4d26.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT", "alias": "fact_receipts_LOGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_324e97e555bc0707f1dd00141e2e4d26.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_324e97e555bc0707f1dd00141e2e4d26"}, "created_at": 1658508766.6210353, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LOGS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOGS", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_PROOF.f87e0a861a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROOF", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_PROOF"], "unique_id": "test.near.not_null_core__fact_receipts_PROOF.f87e0a861a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_PROOF.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_PROOF", "alias": "fact_receipts_PROOF", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_PROOF.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6286287, "compiled_sql": "\n    \n    \n\n\n\nselect PROOF\nfrom NEAR.core.fact_receipts\nwhere PROOF is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROOF", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.68f68c9ca5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e06e8db4c309f24fce80152b9a20ec95\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "PROOF", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e06e8db4c309f24fce80152b9a20ec95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.68f68c9ca5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e06e8db4c309f24fce80152b9a20ec95.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT", "alias": "fact_receipts_PROOF", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_e06e8db4c309f24fce80152b9a20ec95.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e06e8db4c309f24fce80152b9a20ec95"}, "created_at": 1658508766.6313663, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROOF'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROOF", "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_receipts_METADATA.1c2890c002": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METADATA", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_receipts_METADATA"], "unique_id": "test.near.not_null_core__fact_receipts_METADATA.1c2890c002", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_receipts_METADATA.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "not_null_core__fact_receipts_METADATA", "alias": "fact_receipts_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/not_null_core__fact_receipts_METADATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6389477, "compiled_sql": "\n    \n    \n\n\n\nselect METADATA\nfrom NEAR.core.fact_receipts\nwhere METADATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METADATA", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_METADATA__VARIANT__OBJECT.2b3564522a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fa1f33afb6ef623c7d4714e3d5d725dc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT", "OBJECT"], "column_name": "METADATA", "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fa1f33afb6ef623c7d4714e3d5d725dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_METADATA__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_METADATA__VARIANT__OBJECT.2b3564522a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_fa1f33afb6ef623c7d4714e3d5d725dc.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_METADATA__VARIANT__OBJECT", "alias": "fact_receipts_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_expectations_expect_column_fa1f33afb6ef623c7d4714e3d5d725dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_fa1f33afb6ef623c7d4714e3d5d725dc"}, "created_at": 1658508766.6417382, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OUTCOME_ID' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROOF' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METADATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METADATA'\n            and\n            relation_column_type not in ('VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METADATA", "file_key_name": "models.core__fact_receipts"}, "test.near.dbt_utils_unique_combination_of_columns_core__fact_receipts_receipt_object_id.35d39f53d3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_90ea62275e608f53ae60c05ae5c0cb36\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["receipt_object_id"], "model": "{{ get_where_subquery(ref('core__fact_receipts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_receipts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_90ea62275e608f53ae60c05ae5c0cb36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["near", "core", "dbt_utils_unique_combination_of_columns_core__fact_receipts_receipt_object_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_core__fact_receipts_receipt_object_id.35d39f53d3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_90ea62275e608f53ae60c05ae5c0cb36.sql", "original_file_path": "models/core/core__fact_receipts.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_receipts_receipt_object_id", "alias": "fact_receipts_receipt_object_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_receipts.yml/dbt_utils_unique_combination_o_90ea62275e608f53ae60c05ae5c0cb36.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_90ea62275e608f53ae60c05ae5c0cb36"}, "created_at": 1658508766.6489735, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        receipt_object_id\n    from NEAR.core.fact_receipts\n    group by receipt_object_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_receipts"}, "test.near.not_null_core__fact_transfers_TX_HASH.c87ad45814": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_TX_HASH"], "unique_id": "test.near.not_null_core__fact_transfers_TX_HASH.c87ad45814", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_TX_HASH.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_TX_HASH", "alias": "fact_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6632998, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.core.fact_transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_HASH__STRING__VARCHAR.57c33210d9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_170c04e6ae3b9b2929ac97bfaa1d524a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_170c04e6ae3b9b2929ac97bfaa1d524a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_HASH__STRING__VARCHAR.57c33210d9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_170c04e6ae3b9b2929ac97bfaa1d524a.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_HASH__STRING__VARCHAR", "alias": "fact_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_170c04e6ae3b9b2929ac97bfaa1d524a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_170c04e6ae3b9b2929ac97bfaa1d524a"}, "created_at": 1658508766.6660776, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_ACTION_ID.83ca5f9491": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_ACTION_ID"], "unique_id": "test.near.not_null_core__fact_transfers_ACTION_ID.83ca5f9491", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_ACTION_ID.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_ACTION_ID", "alias": "fact_transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6730783, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.core.fact_transfers\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_transfers"}, "test.near.unique_core__fact_transfers_ACTION_ID.255545e315": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_core", "fqn": ["near", "core", "unique_core__fact_transfers_ACTION_ID"], "unique_id": "test.near.unique_core__fact_transfers_ACTION_ID.255545e315", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_core__fact_transfers_ACTION_ID.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "unique_core__fact_transfers_ACTION_ID", "alias": "fact_transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/unique_core__fact_transfers_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6757567, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.core.fact_transfers\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_ACTION_ID__STRING__VARCHAR.026af98ae9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cb2bac2a7a8c7358f8f4357e039fc0c9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cb2bac2a7a8c7358f8f4357e039fc0c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_ACTION_ID__STRING__VARCHAR.026af98ae9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_cb2bac2a7a8c7358f8f4357e039fc0c9.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_ACTION_ID__STRING__VARCHAR", "alias": "fact_transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_cb2bac2a7a8c7358f8f4357e039fc0c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_cb2bac2a7a8c7358f8f4357e039fc0c9"}, "created_at": 1658508766.6784248, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_BLOCK_ID.648269a816": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_BLOCK_ID"], "unique_id": "test.near.not_null_core__fact_transfers_BLOCK_ID.648269a816", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_BLOCK_ID", "alias": "fact_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6859868, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.core.fact_transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_ID__NUMBER__FLOAT.e7d2e322db": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0423277bff126dc42e2522b829c631e0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0423277bff126dc42e2522b829c631e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_ID__NUMBER__FLOAT.e7d2e322db", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0423277bff126dc42e2522b829c631e0.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_0423277bff126dc42e2522b829c631e0.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0423277bff126dc42e2522b829c631e0"}, "created_at": 1658508766.6886952, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_BLOCK_TIMESTAMP", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.6955717, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.core.fact_transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c7d4b2dcc4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a2a8a3d50abcdb10c6c982b00f73c685\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a2a8a3d50abcdb10c6c982b00f73c685", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c7d4b2dcc4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a2a8a3d50abcdb10c6c982b00f73c685.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_a2a8a3d50abcdb10c6c982b00f73c685.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a2a8a3d50abcdb10c6c982b00f73c685"}, "created_at": 1658508766.6982536, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_TX_SIGNER.72b64bbdc5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_TX_SIGNER"], "unique_id": "test.near.not_null_core__fact_transfers_TX_SIGNER.72b64bbdc5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_TX_SIGNER.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_TX_SIGNER", "alias": "fact_transfers_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_TX_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.7046833, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SIGNER\nfrom NEAR.core.fact_transfers\nwhere TX_SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_SIGNER__STRING__VARCHAR.41f78a5cbf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55162b139938cb9196db36d32c51259c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55162b139938cb9196db36d32c51259c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_SIGNER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_SIGNER__STRING__VARCHAR.41f78a5cbf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_55162b139938cb9196db36d32c51259c.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_SIGNER__STRING__VARCHAR", "alias": "fact_transfers_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_55162b139938cb9196db36d32c51259c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_55162b139938cb9196db36d32c51259c"}, "created_at": 1658508766.7073777, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SIGNER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_TX_RECEIVER.b26269ec01": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_TX_RECEIVER"], "unique_id": "test.near.not_null_core__fact_transfers_TX_RECEIVER.b26269ec01", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_TX_RECEIVER.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_TX_RECEIVER", "alias": "fact_transfers_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_TX_RECEIVER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.714244, "compiled_sql": "\n    \n    \n\n\n\nselect TX_RECEIVER\nfrom NEAR.core.fact_transfers\nwhere TX_RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_RECEIVER__STRING__VARCHAR.544777a31b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_370f4d17a6dc1038cf1f409aff25cf81\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_370f4d17a6dc1038cf1f409aff25cf81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_RECEIVER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_RECEIVER__STRING__VARCHAR.544777a31b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_370f4d17a6dc1038cf1f409aff25cf81.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_RECEIVER__STRING__VARCHAR", "alias": "fact_transfers_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_370f4d17a6dc1038cf1f409aff25cf81.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_370f4d17a6dc1038cf1f409aff25cf81"}, "created_at": 1658508766.7169511, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_RECEIVER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_DEPOSIT__NUMBER__FLOAT.ca85ed9e7b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9f1ed9cf32670e71ca011ecec063d760\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DEPOSIT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9f1ed9cf32670e71ca011ecec063d760", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_DEPOSIT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_DEPOSIT__NUMBER__FLOAT.ca85ed9e7b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9f1ed9cf32670e71ca011ecec063d760.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_DEPOSIT__NUMBER__FLOAT", "alias": "fact_transfers_DEPOSIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_9f1ed9cf32670e71ca011ecec063d760.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9f1ed9cf32670e71ca011ecec063d760"}, "created_at": 1658508766.7238672, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DEPOSIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DEPOSIT", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_RECEIPT_OBJECT_ID.ed751abb27": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_RECEIPT_OBJECT_ID"], "unique_id": "test.near.not_null_core__fact_transfers_RECEIPT_OBJECT_ID.ed751abb27", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_RECEIPT_OBJECT_ID", "alias": "fact_transfers_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_RECEIPT_OBJECT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.730692, "compiled_sql": "\n    \n    \n\n\n\nselect RECEIPT_OBJECT_ID\nfrom NEAR.core.fact_transfers\nwhere RECEIPT_OBJECT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.43115f488b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bfbe8ce5ae5a4ed1acbe28cc181ce1ab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bfbe8ce5ae5a4ed1acbe28cc181ce1ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.43115f488b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bfbe8ce5ae5a4ed1acbe28cc181ce1ab.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR", "alias": "fact_transfers_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_bfbe8ce5ae5a4ed1acbe28cc181ce1ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bfbe8ce5ae5a4ed1acbe28cc181ce1ab"}, "created_at": 1658508766.7334042, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIPT_OBJECT_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_TRANSACTION_FEE.978781f3e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_TRANSACTION_FEE"], "unique_id": "test.near.not_null_core__fact_transfers_TRANSACTION_FEE.978781f3e2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_TRANSACTION_FEE.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_TRANSACTION_FEE", "alias": "fact_transfers_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_TRANSACTION_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.7403255, "compiled_sql": "\n    \n    \n\n\n\nselect TRANSACTION_FEE\nfrom NEAR.core.fact_transfers\nwhere TRANSACTION_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.ca559cda44": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_907b50561fd86a7cb45ea02271b9b845\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_907b50561fd86a7cb45ea02271b9b845", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.ca559cda44", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_907b50561fd86a7cb45ea02271b9b845.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT", "alias": "fact_transfers_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_907b50561fd86a7cb45ea02271b9b845.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_907b50561fd86a7cb45ea02271b9b845"}, "created_at": 1658508766.7430203, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSACTION_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_GAS_USED.2d21e3e13b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_GAS_USED"], "unique_id": "test.near.not_null_core__fact_transfers_GAS_USED.2d21e3e13b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_GAS_USED.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_GAS_USED", "alias": "fact_transfers_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.7498872, "compiled_sql": "\n    \n    \n\n\n\nselect GAS_USED\nfrom NEAR.core.fact_transfers\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_GAS_USED__NUMBER__FLOAT.94be9f0e75": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96d259871ff38725dc565ec583738630\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96d259871ff38725dc565ec583738630", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_GAS_USED__NUMBER__FLOAT.94be9f0e75", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_96d259871ff38725dc565ec583738630.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_GAS_USED__NUMBER__FLOAT", "alias": "fact_transfers_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_96d259871ff38725dc565ec583738630.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_96d259871ff38725dc565ec583738630"}, "created_at": 1658508766.7526124, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__fact_transfers_STATUS.e9e8e89071": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transfers_STATUS"], "unique_id": "test.near.not_null_core__fact_transfers_STATUS.e9e8e89071", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transfers_STATUS.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_STATUS", "alias": "fact_transfers_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_STATUS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.7595057, "compiled_sql": "\n    \n    \n\n\n\nselect STATUS\nfrom NEAR.core.fact_transfers\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_STATUS__BOOLEAN.627be1deff": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_178b7f79e8b2e16a2f22e80e5d2c50a5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "STATUS", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_178b7f79e8b2e16a2f22e80e5d2c50a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_STATUS__BOOLEAN"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_STATUS__BOOLEAN.627be1deff", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_178b7f79e8b2e16a2f22e80e5d2c50a5.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_STATUS__BOOLEAN", "alias": "fact_transfers_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_178b7f79e8b2e16a2f22e80e5d2c50a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_178b7f79e8b2e16a2f22e80e5d2c50a5"}, "created_at": 1658508766.7622013, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPT_OBJECT_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('BOOLEAN' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STATUS'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS", "file_key_name": "models.core__fact_transfers"}, "test.near.dbt_utils_unique_combination_of_columns_core__fact_transfers_action_id.c40db96f05": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_452301229bdce27da2bdc2d403ed1f26\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_452301229bdce27da2bdc2d403ed1f26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["near", "core", "dbt_utils_unique_combination_of_columns_core__fact_transfers_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_core__fact_transfers_action_id.c40db96f05", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_452301229bdce27da2bdc2d403ed1f26.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_transfers_action_id", "alias": "fact_transfers_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transfers.yml/dbt_utils_unique_combination_o_452301229bdce27da2bdc2d403ed1f26.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_452301229bdce27da2bdc2d403ed1f26"}, "created_at": 1658508766.7686622, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.core.fact_transfers\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transfers"}, "test.near.not_null_core__metrics_daily_gas_DATE.e93f30304c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('core__metrics_daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_daily_gas_DATE"], "unique_id": "test.near.not_null_core__metrics_daily_gas_DATE.e93f30304c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_daily_gas_DATE.sql", "original_file_path": "models/core/core__metrics_daily_gas.yml", "name": "not_null_core__metrics_daily_gas_DATE", "alias": "metrics_daily_gas_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_gas.yml/not_null_core__metrics_daily_gas_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.7778356, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.core.metrics_daily_gas\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.core__metrics_daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DATE__TIMESTAMP_NTZ.7fc22ddbd1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_18520f532a0f56c988b6f6e50b290674\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('core__metrics_daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_18520f532a0f56c988b6f6e50b290674", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DATE__TIMESTAMP_NTZ.7fc22ddbd1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_18520f532a0f56c988b6f6e50b290674.sql", "original_file_path": "models/core/core__metrics_daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DATE__TIMESTAMP_NTZ", "alias": "metrics_daily_gas_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_gas.yml/dbt_expectations_expect_column_18520f532a0f56c988b6f6e50b290674.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_18520f532a0f56c988b6f6e50b290674"}, "created_at": 1658508766.7806063, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.core__metrics_daily_gas"}, "test.near.not_null_core__metrics_daily_gas_DAILY_GAS_USED.81dbf7d774": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_GAS_USED", "model": "{{ get_where_subquery(ref('core__metrics_daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_daily_gas_DAILY_GAS_USED"], "unique_id": "test.near.not_null_core__metrics_daily_gas_DAILY_GAS_USED.81dbf7d774", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_daily_gas_DAILY_GAS_USED.sql", "original_file_path": "models/core/core__metrics_daily_gas.yml", "name": "not_null_core__metrics_daily_gas_DAILY_GAS_USED", "alias": "metrics_daily_gas_DAILY_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_gas.yml/not_null_core__metrics_daily_gas_DAILY_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.786981, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_GAS_USED\nfrom NEAR.core.metrics_daily_gas\nwhere DAILY_GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_GAS_USED", "file_key_name": "models.core__metrics_daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dc5579812f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4b2322328e176c90daf67955c6bebf51\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_GAS_USED", "model": "{{ get_where_subquery(ref('core__metrics_daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4b2322328e176c90daf67955c6bebf51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dc5579812f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_4b2322328e176c90daf67955c6bebf51.sql", "original_file_path": "models/core/core__metrics_daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT", "alias": "metrics_daily_gas_DAILY_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_gas.yml/dbt_expectations_expect_column_4b2322328e176c90daf67955c6bebf51.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_4b2322328e176c90daf67955c6bebf51"}, "created_at": 1658508766.7896893, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_GAS_USED", "file_key_name": "models.core__metrics_daily_gas"}, "test.near.not_null_core__metrics_daily_gas_AVG_GAS_PRICE.cfe52e479f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVG_GAS_PRICE", "model": "{{ get_where_subquery(ref('core__metrics_daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_daily_gas_AVG_GAS_PRICE"], "unique_id": "test.near.not_null_core__metrics_daily_gas_AVG_GAS_PRICE.cfe52e479f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_daily_gas_AVG_GAS_PRICE.sql", "original_file_path": "models/core/core__metrics_daily_gas.yml", "name": "not_null_core__metrics_daily_gas_AVG_GAS_PRICE", "alias": "metrics_daily_gas_AVG_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_gas.yml/not_null_core__metrics_daily_gas_AVG_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.7972836, "compiled_sql": "\n    \n    \n\n\n\nselect AVG_GAS_PRICE\nfrom NEAR.core.metrics_daily_gas\nwhere AVG_GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AVG_GAS_PRICE", "file_key_name": "models.core__metrics_daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.c7b6707f47": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ffcc079eba8e68e6969481e576e8839\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AVG_GAS_PRICE", "model": "{{ get_where_subquery(ref('core__metrics_daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ffcc079eba8e68e6969481e576e8839", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.c7b6707f47", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3ffcc079eba8e68e6969481e576e8839.sql", "original_file_path": "models/core/core__metrics_daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT", "alias": "metrics_daily_gas_AVG_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_gas.yml/dbt_expectations_expect_column_3ffcc079eba8e68e6969481e576e8839.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3ffcc079eba8e68e6969481e576e8839"}, "created_at": 1658508766.7999787, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AVG_GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AVG_GAS_PRICE", "file_key_name": "models.core__metrics_daily_gas"}, "test.near.not_null_core__metrics_daily_transactions_DATE.e6a4a28bb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('core__metrics_daily_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_daily_transactions_DATE"], "unique_id": "test.near.not_null_core__metrics_daily_transactions_DATE.e6a4a28bb7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_daily_transactions_DATE.sql", "original_file_path": "models/core/core__metrics_daily_transactions.yml", "name": "not_null_core__metrics_daily_transactions_DATE", "alias": "metrics_daily_transactions_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_transactions.yml/not_null_core__metrics_daily_transactions_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.8089387, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.core.metrics_daily_transactions\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.core__metrics_daily_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.c5185f3b2e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_83fb6d701d604cd72cc1a431a8868025\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('core__metrics_daily_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_83fb6d701d604cd72cc1a431a8868025", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.c5185f3b2e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_83fb6d701d604cd72cc1a431a8868025.sql", "original_file_path": "models/core/core__metrics_daily_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DATE__TIMESTAMP_NTZ", "alias": "metrics_daily_transactions_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_transactions.yml/dbt_expectations_expect_column_83fb6d701d604cd72cc1a431a8868025.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_83fb6d701d604cd72cc1a431a8868025"}, "created_at": 1658508766.811934, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_TRANSACTIONS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.core__metrics_daily_transactions"}, "test.near.not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS.97ecb32576": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_TRANSACTIONS", "model": "{{ get_where_subquery(ref('core__metrics_daily_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS"], "unique_id": "test.near.not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS.97ecb32576", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS.sql", "original_file_path": "models/core/core__metrics_daily_transactions.yml", "name": "not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS", "alias": "metrics_daily_transactions_DAILY_TRANSACTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_transactions.yml/not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.8179998, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_TRANSACTIONS\nfrom NEAR.core.metrics_daily_transactions\nwhere DAILY_TRANSACTIONS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_TRANSACTIONS", "file_key_name": "models.core__metrics_daily_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.7aae6c528a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d4fa449ee7a9192f27bb01fae204bb0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_TRANSACTIONS", "model": "{{ get_where_subquery(ref('core__metrics_daily_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d4fa449ee7a9192f27bb01fae204bb0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.7aae6c528a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8d4fa449ee7a9192f27bb01fae204bb0.sql", "original_file_path": "models/core/core__metrics_daily_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT", "alias": "metrics_daily_transactions_DAILY_TRANSACTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__metrics_daily_transactions.yml/dbt_expectations_expect_column_8d4fa449ee7a9192f27bb01fae204bb0.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8d4fa449ee7a9192f27bb01fae204bb0"}, "created_at": 1658508766.8210163, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_TRANSACTIONS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_TRANSACTIONS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_TRANSACTIONS", "file_key_name": "models.core__metrics_daily_transactions"}, "test.near.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_BLOCK_ID"], "unique_id": "test.near.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_BLOCK_ID", "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.8358872, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.core.fact_transactions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER__FLOAT.aaaed2f742": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cfc1b1a7d28e08903fc8b83fb46fbb08\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cfc1b1a7d28e08903fc8b83fb46fbb08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER__FLOAT.aaaed2f742", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_cfc1b1a7d28e08903fc8b83fb46fbb08.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_cfc1b1a7d28e08903fc8b83fb46fbb08.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_cfc1b1a7d28e08903fc8b83fb46fbb08"}, "created_at": 1658508766.838821, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_BLOCK_HASH.9c04323b46": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_BLOCK_HASH"], "unique_id": "test.near.not_null_core__fact_transactions_BLOCK_HASH.9c04323b46", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_BLOCK_HASH.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_BLOCK_HASH", "alias": "fact_transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.8454177, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HASH\nfrom NEAR.core.fact_transactions\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_HASH__STRING__VARCHAR.a8595b41b4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_78c08fe86983b8b7fe6436fc56887e4d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_78c08fe86983b8b7fe6436fc56887e4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_HASH__STRING__VARCHAR.a8595b41b4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_78c08fe86983b8b7fe6436fc56887e4d.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_HASH__STRING__VARCHAR", "alias": "fact_transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_78c08fe86983b8b7fe6436fc56887e4d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_78c08fe86983b8b7fe6436fc56887e4d"}, "created_at": 1658508766.8484392, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_TX_HASH.39424a47eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_TX_HASH"], "unique_id": "test.near.not_null_core__fact_transactions_TX_HASH.39424a47eb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_TX_HASH.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_HASH", "alias": "fact_transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.855342, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.core.fact_transactions\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_transactions"}, "test.near.unique_core__fact_transactions_TX_HASH.bd5b814c00": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_core", "fqn": ["near", "core", "unique_core__fact_transactions_TX_HASH"], "unique_id": "test.near.unique_core__fact_transactions_TX_HASH.bd5b814c00", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_core__fact_transactions_TX_HASH.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "unique_core__fact_transactions_TX_HASH", "alias": "fact_transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/unique_core__fact_transactions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.8580096, "compiled_sql": "\n    \n    \n\nselect\n    TX_HASH as unique_field,\n    count(*) as n_records\n\nfrom NEAR.core.fact_transactions\nwhere TX_HASH is not null\ngroup by TX_HASH\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_HASH__STRING__VARCHAR.22d1ce92d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d9ff0fcfbd806a118da8b420e90bec5b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d9ff0fcfbd806a118da8b420e90bec5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_HASH__STRING__VARCHAR.22d1ce92d4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d9ff0fcfbd806a118da8b420e90bec5b.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_HASH__STRING__VARCHAR", "alias": "fact_transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_d9ff0fcfbd806a118da8b420e90bec5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d9ff0fcfbd806a118da8b420e90bec5b"}, "created_at": 1658508766.8607032, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_transactions"}, "test.near.tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.bda374f7b7": {"raw_sql": "{{ test_tx_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "tx_gaps", "kwargs": {"column_block": "block_id", "column_tx_count": "tx_count", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.near.test_tx_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions", "model.near.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "tx_gaps_core", "fqn": ["near", "core", "tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count"], "unique_id": "test.near.tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.bda374f7b7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count", "alias": "fact_transactions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"], ["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1658508766.8682044, "compiled_sql": "\nWITH block_base AS (\n    SELECT\n        block_id,\n        tx_count\n    FROM\n        NEAR.silver.blocks\n),\nmodel_name AS (\n    SELECT\n        block_id,\n        COUNT(\n            DISTINCT TX_HASH\n        ) AS model_tx_count\n    FROM\n        (select * from NEAR.core.fact_transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n    GROUP BY\n        block_id\n)\nSELECT\n    block_base.block_id,\n    tx_count,\n    model_name.block_id,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_id = model_name.block_id\nWHERE\n    tx_count <> model_tx_count ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_BLOCK_TIMESTAMP", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.8752177, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.core.fact_transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["near", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df"}, "created_at": 1658508766.8779218, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        NEAR.core.fact_transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60"}, "created_at": 1658508766.8861763, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_NONCE.c2d5fd20f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_NONCE"], "unique_id": "test.near.not_null_core__fact_transactions_NONCE.c2d5fd20f8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_NONCE.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_NONCE", "alias": "fact_transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.8926213, "compiled_sql": "\n    \n    \n\n\n\nselect NONCE\nfrom NEAR.core.fact_transactions\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_NONCE__NUMBER.ee76e273d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_978200471162e63b6fd19d928de598db\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_978200471162e63b6fd19d928de598db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_NONCE__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_NONCE__NUMBER.ee76e273d4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_978200471162e63b6fd19d928de598db.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_NONCE__NUMBER", "alias": "fact_transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_978200471162e63b6fd19d928de598db.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_978200471162e63b6fd19d928de598db"}, "created_at": 1658508766.895343, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_SIGNATURE.a81f4191ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_SIGNATURE"], "unique_id": "test.near.not_null_core__fact_transactions_SIGNATURE.a81f4191ab", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_SIGNATURE.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_SIGNATURE", "alias": "fact_transactions_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.9022439, "compiled_sql": "\n    \n    \n\n\n\nselect SIGNATURE\nfrom NEAR.core.fact_transactions\nwhere SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_SIGNATURE__STRING__VARCHAR.cf9e07fb1f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1bfee4ce84844c072a23db7c4851d8dc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1bfee4ce84844c072a23db7c4851d8dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_SIGNATURE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_SIGNATURE__STRING__VARCHAR.cf9e07fb1f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1bfee4ce84844c072a23db7c4851d8dc.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_SIGNATURE__STRING__VARCHAR", "alias": "fact_transactions_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_1bfee4ce84844c072a23db7c4851d8dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1bfee4ce84844c072a23db7c4851d8dc"}, "created_at": 1658508766.9049451, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SIGNATURE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_TX_RECEIVER.4aa25511f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_TX_RECEIVER"], "unique_id": "test.near.not_null_core__fact_transactions_TX_RECEIVER.4aa25511f1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_TX_RECEIVER.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_RECEIVER", "alias": "fact_transactions_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_RECEIVER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.9118145, "compiled_sql": "\n    \n    \n\n\n\nselect TX_RECEIVER\nfrom NEAR.core.fact_transactions\nwhere TX_RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_RECEIVER__STRING__VARCHAR.a022fd33f0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ba229556df1c8bdd7f37c4a905ededb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ba229556df1c8bdd7f37c4a905ededb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_RECEIVER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_RECEIVER__STRING__VARCHAR.a022fd33f0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2ba229556df1c8bdd7f37c4a905ededb.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_RECEIVER__STRING__VARCHAR", "alias": "fact_transactions_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_2ba229556df1c8bdd7f37c4a905ededb.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2ba229556df1c8bdd7f37c4a905ededb"}, "created_at": 1658508766.9144874, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_RECEIVER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_RECEIVER", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_TX_SIGNER.1e3f66037b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_TX_SIGNER"], "unique_id": "test.near.not_null_core__fact_transactions_TX_SIGNER.1e3f66037b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_TX_SIGNER.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_SIGNER", "alias": "fact_transactions_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.9213734, "compiled_sql": "\n    \n    \n\n\n\nselect TX_SIGNER\nfrom NEAR.core.fact_transactions\nwhere TX_SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SIGNER__STRING__VARCHAR.5e2ba493c7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_222c2e500778e7871fe28d3ad2178101\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_222c2e500778e7871fe28d3ad2178101", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SIGNER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SIGNER__STRING__VARCHAR.5e2ba493c7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_222c2e500778e7871fe28d3ad2178101.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SIGNER__STRING__VARCHAR", "alias": "fact_transactions_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_222c2e500778e7871fe28d3ad2178101.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_222c2e500778e7871fe28d3ad2178101"}, "created_at": 1658508766.9240987, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SIGNER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_SIGNER", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_TX.73062d241f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_TX"], "unique_id": "test.near.not_null_core__fact_transactions_TX.73062d241f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_TX.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX", "alias": "fact_transactions_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.9309301, "compiled_sql": "\n    \n    \n\n\n\nselect TX\nfrom NEAR.core.fact_transactions\nwhere TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX__OBJECT__VARIANT.ddb63cbbfb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cdf485643849072a6449dea7a7ccf91a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT", "VARIANT"], "column_name": "TX", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cdf485643849072a6449dea7a7ccf91a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX__OBJECT__VARIANT.ddb63cbbfb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_cdf485643849072a6449dea7a7ccf91a.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX__OBJECT__VARIANT", "alias": "fact_transactions_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_cdf485643849072a6449dea7a7ccf91a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_cdf485643849072a6449dea7a7ccf91a"}, "created_at": 1658508766.9336483, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX'\n            and\n            relation_column_type not in ('OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_GAS_USED.2e66666fc1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_GAS_USED"], "unique_id": "test.near.not_null_core__fact_transactions_GAS_USED.2e66666fc1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_GAS_USED.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_GAS_USED", "alias": "fact_transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.9405646, "compiled_sql": "\n    \n    \n\n\n\nselect GAS_USED\nfrom NEAR.core.fact_transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_GAS_USED__NUMBER__FLOAT.20eb0c8c56": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca64a128eb4bd40a762fb94cf2b28b4f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca64a128eb4bd40a762fb94cf2b28b4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_GAS_USED__NUMBER__FLOAT.20eb0c8c56", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ca64a128eb4bd40a762fb94cf2b28b4f.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_GAS_USED__NUMBER__FLOAT", "alias": "fact_transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_ca64a128eb4bd40a762fb94cf2b28b4f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ca64a128eb4bd40a762fb94cf2b28b4f"}, "created_at": 1658508766.943299, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_ATTACHED_GAS.037947542a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_ATTACHED_GAS"], "unique_id": "test.near.not_null_core__fact_transactions_ATTACHED_GAS.037947542a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_ATTACHED_GAS.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_ATTACHED_GAS", "alias": "fact_transactions_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_ATTACHED_GAS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.95017, "compiled_sql": "\n    \n    \n\n\n\nselect ATTACHED_GAS\nfrom NEAR.core.fact_transactions\nwhere ATTACHED_GAS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ATTACHED_GAS", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.71a10af259": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ce27d71524b0661e58511e036adfc91e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ce27d71524b0661e58511e036adfc91e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.71a10af259", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ce27d71524b0661e58511e036adfc91e.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT", "alias": "fact_transactions_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_ce27d71524b0661e58511e036adfc91e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ce27d71524b0661e58511e036adfc91e"}, "created_at": 1658508766.9529054, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTACHED_GAS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ATTACHED_GAS", "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_transactions_TRANSACTION_FEE.3a5a122a8a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_transactions_TRANSACTION_FEE"], "unique_id": "test.near.not_null_core__fact_transactions_TRANSACTION_FEE.3a5a122a8a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_transactions_TRANSACTION_FEE.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TRANSACTION_FEE", "alias": "fact_transactions_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TRANSACTION_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.9598258, "compiled_sql": "\n    \n    \n\n\n\nselect TRANSACTION_FEE\nfrom NEAR.core.fact_transactions\nwhere TRANSACTION_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.c2ea03089f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f74b1cfd0449d7c0d0a5d799a0d7cefa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f74b1cfd0449d7c0d0a5d799a0d7cefa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.c2ea03089f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f74b1cfd0449d7c0d0a5d799a0d7cefa.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT", "alias": "fact_transactions_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_f74b1cfd0449d7c0d0a5d799a0d7cefa.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f74b1cfd0449d7c0d0a5d799a0d7cefa"}, "created_at": 1658508766.9625392, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_RECEIVER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SIGNER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTION_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSACTION_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TRANSACTION_FEE", "file_key_name": "models.core__fact_transactions"}, "test.near.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_hash.3d89edf2d5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_435895a909949683d1a4f51cb4db427c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_hash"], "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_435895a909949683d1a4f51cb4db427c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["near", "core", "dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_hash"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_hash.3d89edf2d5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_435895a909949683d1a4f51cb4db427c.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_hash", "alias": "fact_transactions_tx_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_transactions.yml/dbt_utils_unique_combination_o_435895a909949683d1a4f51cb4db427c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_435895a909949683d1a4f51cb4db427c"}, "created_at": 1658508766.9695284, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        tx_hash\n    from NEAR.core.fact_transactions\n    group by tx_hash\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_transactions"}, "test.near.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_BLOCK_ID"], "unique_id": "test.near.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_ID", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508766.995789, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.core.fact_blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec"}, "created_at": 1658508766.9985876, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_TIMESTAMP", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0055227, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.core.fact_blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["near", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7"}, "created_at": 1658508767.0082388, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        NEAR.core.fact_blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc"}, "created_at": 1658508767.0174215, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_BLOCK_HASH"], "unique_id": "test.near.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_BLOCK_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_HASH", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0235674, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_HASH\nfrom NEAR.core.fact_blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11"}, "created_at": 1658508767.0265741, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_TX_COUNT.dd649c1087": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_TX_COUNT"], "unique_id": "test.near.not_null_core__fact_blocks_TX_COUNT.dd649c1087", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_TX_COUNT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_TX_COUNT", "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.033148, "compiled_sql": "\n    \n    \n\n\n\nselect TX_COUNT\nfrom NEAR.core.fact_blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT", "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634"}, "created_at": 1658508767.0361474, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_BLOCK_AUTHOR.03877d0ca8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_AUTHOR", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_BLOCK_AUTHOR"], "unique_id": "test.near.not_null_core__fact_blocks_BLOCK_AUTHOR.03877d0ca8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_BLOCK_AUTHOR.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_AUTHOR", "alias": "fact_blocks_BLOCK_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_AUTHOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0427115, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_AUTHOR\nfrom NEAR.core.fact_blocks\nwhere BLOCK_AUTHOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_AUTHOR", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.7f1e1839b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3927e5e70c4017f874dcc7650a37750f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_AUTHOR", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3927e5e70c4017f874dcc7650a37750f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.7f1e1839b5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3927e5e70c4017f874dcc7650a37750f.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_3927e5e70c4017f874dcc7650a37750f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3927e5e70c4017f874dcc7650a37750f"}, "created_at": 1658508767.0457249, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_AUTHOR'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_AUTHOR", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT.0d9408b3d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_CHALLENGES_RESULT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT"], "unique_id": "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT.0d9408b3d7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT", "alias": "fact_blocks_BLOCK_CHALLENGES_RESULT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0523314, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_CHALLENGES_RESULT\nfrom NEAR.core.fact_blocks\nwhere BLOCK_CHALLENGES_RESULT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_RESULT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ce8453804e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15342adfa667dd5e3519177d36a868d6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "BLOCK_CHALLENGES_RESULT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15342adfa667dd5e3519177d36a868d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ce8453804e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_15342adfa667dd5e3519177d36a868d6.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_BLOCK_CHALLENGES_RESULT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_15342adfa667dd5e3519177d36a868d6.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_15342adfa667dd5e3519177d36a868d6"}, "created_at": 1658508767.0553427, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_CHALLENGES_RESULT'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_RESULT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT.f8a53e4a6f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_CHALLENGES_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT"], "unique_id": "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT.f8a53e4a6f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT", "alias": "fact_blocks_BLOCK_CHALLENGES_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0627322, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_CHALLENGES_ROOT\nfrom NEAR.core.fact_blocks\nwhere BLOCK_CHALLENGES_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.9f986cff8f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d868d4602ff007a9bd6d9d4e405b259\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_CHALLENGES_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d868d4602ff007a9bd6d9d4e405b259", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.9f986cff8f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8d868d4602ff007a9bd6d9d4e405b259.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_CHALLENGES_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_8d868d4602ff007a9bd6d9d4e405b259.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8d868d4602ff007a9bd6d9d4e405b259"}, "created_at": 1658508767.0654552, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_CHALLENGES_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_CHALLENGES_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_CHUNK_HEADERS_ROOT.180c276606": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_HEADERS_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_CHUNK_HEADERS_ROOT"], "unique_id": "test.near.not_null_core__fact_blocks_CHUNK_HEADERS_ROOT.180c276606", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_CHUNK_HEADERS_ROOT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHUNK_HEADERS_ROOT", "alias": "fact_blocks_CHUNK_HEADERS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHUNK_HEADERS_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0724478, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_HEADERS_ROOT\nfrom NEAR.core.fact_blocks\nwhere CHUNK_HEADERS_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_HEADERS_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.523ab13c7b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_97f78a4a00820a8079a8f41f7f261878\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_HEADERS_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_97f78a4a00820a8079a8f41f7f261878", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.523ab13c7b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_97f78a4a00820a8079a8f41f7f261878.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR", "alias": "fact_blocks_CHUNK_HEADERS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_97f78a4a00820a8079a8f41f7f261878.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_97f78a4a00820a8079a8f41f7f261878"}, "created_at": 1658508767.075135, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_HEADERS_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_HEADERS_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_CHUNK_MASK.dc734c8cdc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_MASK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_CHUNK_MASK"], "unique_id": "test.near.not_null_core__fact_blocks_CHUNK_MASK.dc734c8cdc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_CHUNK_MASK.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHUNK_MASK", "alias": "fact_blocks_CHUNK_MASK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHUNK_MASK.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0821056, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_MASK\nfrom NEAR.core.fact_blocks\nwhere CHUNK_MASK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_MASK", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.371605784f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6d417b5ebab6df15797fef11ceb066d9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "CHUNK_MASK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6d417b5ebab6df15797fef11ceb066d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.371605784f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6d417b5ebab6df15797fef11ceb066d9.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_CHUNK_MASK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_6d417b5ebab6df15797fef11ceb066d9.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6d417b5ebab6df15797fef11ceb066d9"}, "created_at": 1658508767.084822, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_MASK'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_MASK", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT.8452bbf40e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT"], "unique_id": "test.near.not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT.8452bbf40e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT", "alias": "fact_blocks_CHUNK_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.0922527, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_RECEIPTS_ROOT\nfrom NEAR.core.fact_blocks\nwhere CHUNK_RECEIPTS_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_RECEIPTS_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.dd534c5f41": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_416d66c556790a818923c1077839111d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_416d66c556790a818923c1077839111d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.dd534c5f41", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_416d66c556790a818923c1077839111d.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR", "alias": "fact_blocks_CHUNK_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_416d66c556790a818923c1077839111d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_416d66c556790a818923c1077839111d"}, "created_at": 1658508767.0949743, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_RECEIPTS_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_RECEIPTS_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_CHUNK_TX_ROOT.e511e456ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_TX_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_CHUNK_TX_ROOT"], "unique_id": "test.near.not_null_core__fact_blocks_CHUNK_TX_ROOT.e511e456ca", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_CHUNK_TX_ROOT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHUNK_TX_ROOT", "alias": "fact_blocks_CHUNK_TX_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHUNK_TX_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1021147, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNK_TX_ROOT\nfrom NEAR.core.fact_blocks\nwhere CHUNK_TX_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_TX_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.2bcb6419e4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_167c7e7d6ec57261fd3d8be742781ee9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_TX_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_167c7e7d6ec57261fd3d8be742781ee9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.2bcb6419e4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_167c7e7d6ec57261fd3d8be742781ee9.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR", "alias": "fact_blocks_CHUNK_TX_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_167c7e7d6ec57261fd3d8be742781ee9.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_167c7e7d6ec57261fd3d8be742781ee9"}, "created_at": 1658508767.1048872, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNK_TX_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNK_TX_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_CHUNKS.f92140c302": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNKS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_CHUNKS"], "unique_id": "test.near.not_null_core__fact_blocks_CHUNKS.f92140c302", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_CHUNKS.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHUNKS", "alias": "fact_blocks_CHUNKS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHUNKS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1123152, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNKS\nfrom NEAR.core.fact_blocks\nwhere CHUNKS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.64870ea308": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_de7fd52b23cb7daba8fe42bb4d5199ba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "CHUNKS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_de7fd52b23cb7daba8fe42bb4d5199ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.64870ea308", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_de7fd52b23cb7daba8fe42bb4d5199ba.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_CHUNKS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_de7fd52b23cb7daba8fe42bb4d5199ba.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_de7fd52b23cb7daba8fe42bb4d5199ba"}, "created_at": 1658508767.1151135, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNKS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_CHUNKS_INCLUDED.937aec6f78": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNKS_INCLUDED", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_CHUNKS_INCLUDED"], "unique_id": "test.near.not_null_core__fact_blocks_CHUNKS_INCLUDED.937aec6f78", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_CHUNKS_INCLUDED.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHUNKS_INCLUDED", "alias": "fact_blocks_CHUNKS_INCLUDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHUNKS_INCLUDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1235232, "compiled_sql": "\n    \n    \n\n\n\nselect CHUNKS_INCLUDED\nfrom NEAR.core.fact_blocks\nwhere CHUNKS_INCLUDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS_INCLUDED", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS_INCLUDED__NUMBER.e4c1b3aa07": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1e12a3e1f0802a8c1f65a0b22540707b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "CHUNKS_INCLUDED", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1e12a3e1f0802a8c1f65a0b22540707b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS_INCLUDED__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS_INCLUDED__NUMBER.e4c1b3aa07", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1e12a3e1f0802a8c1f65a0b22540707b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS_INCLUDED__NUMBER", "alias": "fact_blocks_CHUNKS_INCLUDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_1e12a3e1f0802a8c1f65a0b22540707b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1e12a3e1f0802a8c1f65a0b22540707b"}, "created_at": 1658508767.1263251, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHUNKS_INCLUDED'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHUNKS_INCLUDED", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_EPOCH_ID.fc61bf616f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EPOCH_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_EPOCH_ID"], "unique_id": "test.near.not_null_core__fact_blocks_EPOCH_ID.fc61bf616f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_EPOCH_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_EPOCH_ID", "alias": "fact_blocks_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_EPOCH_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1332226, "compiled_sql": "\n    \n    \n\n\n\nselect EPOCH_ID\nfrom NEAR.core.fact_blocks\nwhere EPOCH_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EPOCH_ID", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_ID__STRING__VARCHAR.6859f40465": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_66b555f12b2da5d31233f932d7dc2ae6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EPOCH_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_66b555f12b2da5d31233f932d7dc2ae6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_ID__STRING__VARCHAR.6859f40465", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_66b555f12b2da5d31233f932d7dc2ae6.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_ID__STRING__VARCHAR", "alias": "fact_blocks_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_66b555f12b2da5d31233f932d7dc2ae6.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_66b555f12b2da5d31233f932d7dc2ae6"}, "created_at": 1658508767.136007, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EPOCH_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EPOCH_ID", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.98f9b955fd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_32cf759bea0ca73626a555a22bddb18d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "EPOCH_SYNC_DATA_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_32cf759bea0ca73626a555a22bddb18d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.98f9b955fd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_32cf759bea0ca73626a555a22bddb18d.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None", "alias": "fact_blocks_EPOCH_SYNC_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_32cf759bea0ca73626a555a22bddb18d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_32cf759bea0ca73626a555a22bddb18d"}, "created_at": 1658508767.1434314, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EPOCH_SYNC_DATA_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EPOCH_SYNC_DATA_HASH", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_EVENTS.e54a49d376": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENTS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_EVENTS"], "unique_id": "test.near.not_null_core__fact_blocks_EVENTS.e54a49d376", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_EVENTS.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_EVENTS", "alias": "fact_blocks_EVENTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_EVENTS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1507404, "compiled_sql": "\n    \n    \n\n\n\nselect EVENTS\nfrom NEAR.core.fact_blocks\nwhere EVENTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENTS", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.46b3985524": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_10e5430be5360296afed3a3b2a43be3c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "EVENTS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_10e5430be5360296afed3a3b2a43be3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.46b3985524", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_10e5430be5360296afed3a3b2a43be3c.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_EVENTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_10e5430be5360296afed3a3b2a43be3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_10e5430be5360296afed3a3b2a43be3c"}, "created_at": 1658508767.1535628, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENTS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENTS", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_GAS_PRICE.58aa885a95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_GAS_PRICE"], "unique_id": "test.near.not_null_core__fact_blocks_GAS_PRICE.58aa885a95", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_GAS_PRICE.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_GAS_PRICE", "alias": "fact_blocks_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1612864, "compiled_sql": "\n    \n    \n\n\n\nselect GAS_PRICE\nfrom NEAR.core.fact_blocks\nwhere GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_PRICE", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_GAS_PRICE__NUMBER__FLOAT.fa7e1b932c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4c1b938939f4ce105964e44a49f648f1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4c1b938939f4ce105964e44a49f648f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_GAS_PRICE__NUMBER__FLOAT.fa7e1b932c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_4c1b938939f4ce105964e44a49f648f1.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_GAS_PRICE__NUMBER__FLOAT", "alias": "fact_blocks_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_4c1b938939f4ce105964e44a49f648f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_4c1b938939f4ce105964e44a49f648f1"}, "created_at": 1658508767.1640618, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_PRICE", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK.495c60fd78": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_DS_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK"], "unique_id": "test.near.not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK.495c60fd78", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK", "alias": "fact_blocks_LAST_DS_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.171283, "compiled_sql": "\n    \n    \n\n\n\nselect LAST_DS_FINAL_BLOCK\nfrom NEAR.core.fact_blocks\nwhere LAST_DS_FINAL_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_DS_FINAL_BLOCK", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.9e09f6d941": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_53d3a9afbb42820de862965e0f57d863\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_DS_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_53d3a9afbb42820de862965e0f57d863", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.9e09f6d941", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_53d3a9afbb42820de862965e0f57d863.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR", "alias": "fact_blocks_LAST_DS_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_53d3a9afbb42820de862965e0f57d863.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_53d3a9afbb42820de862965e0f57d863"}, "created_at": 1658508767.1740346, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_DS_FINAL_BLOCK'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_DS_FINAL_BLOCK", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_LAST_FINAL_BLOCK.d990393f83": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_LAST_FINAL_BLOCK"], "unique_id": "test.near.not_null_core__fact_blocks_LAST_FINAL_BLOCK.d990393f83", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_LAST_FINAL_BLOCK.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_FINAL_BLOCK", "alias": "fact_blocks_LAST_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_FINAL_BLOCK.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1811252, "compiled_sql": "\n    \n    \n\n\n\nselect LAST_FINAL_BLOCK\nfrom NEAR.core.fact_blocks\nwhere LAST_FINAL_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_FINAL_BLOCK", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.25992c91ad": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_99df9c2e2dd11124def575e2b0fefdc5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_99df9c2e2dd11124def575e2b0fefdc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.25992c91ad", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_99df9c2e2dd11124def575e2b0fefdc5.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR", "alias": "fact_blocks_LAST_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_99df9c2e2dd11124def575e2b0fefdc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_99df9c2e2dd11124def575e2b0fefdc5"}, "created_at": 1658508767.1839337, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_FINAL_BLOCK'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LAST_FINAL_BLOCK", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION.d77e1eb866": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LATEST_PROTOCOL_VERSION", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION"], "unique_id": "test.near.not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION.d77e1eb866", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION", "alias": "fact_blocks_LATEST_PROTOCOL_VERSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.1909866, "compiled_sql": "\n    \n    \n\n\n\nselect LATEST_PROTOCOL_VERSION\nfrom NEAR.core.fact_blocks\nwhere LATEST_PROTOCOL_VERSION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LATEST_PROTOCOL_VERSION", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.4d169e143d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc23981c7f948dc6fe5eefeaed3c2161\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "LATEST_PROTOCOL_VERSION", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc23981c7f948dc6fe5eefeaed3c2161", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.4d169e143d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_dc23981c7f948dc6fe5eefeaed3c2161.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT", "alias": "fact_blocks_LATEST_PROTOCOL_VERSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_dc23981c7f948dc6fe5eefeaed3c2161.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_dc23981c7f948dc6fe5eefeaed3c2161"}, "created_at": 1658508767.1937747, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LATEST_PROTOCOL_VERSION'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LATEST_PROTOCOL_VERSION", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_NEXT_BP_HASH.a8e45079bd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_BP_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_NEXT_BP_HASH"], "unique_id": "test.near.not_null_core__fact_blocks_NEXT_BP_HASH.a8e45079bd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_NEXT_BP_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_NEXT_BP_HASH", "alias": "fact_blocks_NEXT_BP_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_NEXT_BP_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.200924, "compiled_sql": "\n    \n    \n\n\n\nselect NEXT_BP_HASH\nfrom NEAR.core.fact_blocks\nwhere NEXT_BP_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_BP_HASH", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.d82841de9b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4fbaa9d1f0b2b4b7bf6ac39e1789ae6b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_BP_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4fbaa9d1f0b2b4b7bf6ac39e1789ae6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.d82841de9b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_4fbaa9d1f0b2b4b7bf6ac39e1789ae6b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR", "alias": "fact_blocks_NEXT_BP_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_4fbaa9d1f0b2b4b7bf6ac39e1789ae6b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_4fbaa9d1f0b2b4b7bf6ac39e1789ae6b"}, "created_at": 1658508767.20368, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_BP_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_BP_HASH", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_NEXT_EPOCH_ID.bd4ec4a2ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_EPOCH_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_NEXT_EPOCH_ID"], "unique_id": "test.near.not_null_core__fact_blocks_NEXT_EPOCH_ID.bd4ec4a2ff", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_NEXT_EPOCH_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_NEXT_EPOCH_ID", "alias": "fact_blocks_NEXT_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_NEXT_EPOCH_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.2106674, "compiled_sql": "\n    \n    \n\n\n\nselect NEXT_EPOCH_ID\nfrom NEAR.core.fact_blocks\nwhere NEXT_EPOCH_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_EPOCH_ID", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.5a9d13bab7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b585ffacc5ce2b5626742d7d492b7bd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_EPOCH_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b585ffacc5ce2b5626742d7d492b7bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.5a9d13bab7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0b585ffacc5ce2b5626742d7d492b7bd.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR", "alias": "fact_blocks_NEXT_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_0b585ffacc5ce2b5626742d7d492b7bd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0b585ffacc5ce2b5626742d7d492b7bd"}, "created_at": 1658508767.2137263, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_EPOCH_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NEXT_EPOCH_ID", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_OUTCOME_ROOT.f6f91076b5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OUTCOME_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_OUTCOME_ROOT"], "unique_id": "test.near.not_null_core__fact_blocks_OUTCOME_ROOT.f6f91076b5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_OUTCOME_ROOT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_OUTCOME_ROOT", "alias": "fact_blocks_OUTCOME_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_OUTCOME_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.220441, "compiled_sql": "\n    \n    \n\n\n\nselect OUTCOME_ROOT\nfrom NEAR.core.fact_blocks\nwhere OUTCOME_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OUTCOME_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.06f7e42899": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7fbe8cfeb453cf6e85ac43e92c7441ff\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "OUTCOME_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7fbe8cfeb453cf6e85ac43e92c7441ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.06f7e42899", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7fbe8cfeb453cf6e85ac43e92c7441ff.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR", "alias": "fact_blocks_OUTCOME_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_7fbe8cfeb453cf6e85ac43e92c7441ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7fbe8cfeb453cf6e85ac43e92c7441ff"}, "created_at": 1658508767.2234776, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OUTCOME_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OUTCOME_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_PREV_HASH.3d44f4d8e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREV_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_PREV_HASH"], "unique_id": "test.near.not_null_core__fact_blocks_PREV_HASH.3d44f4d8e3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_PREV_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_PREV_HASH", "alias": "fact_blocks_PREV_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_PREV_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.2301493, "compiled_sql": "\n    \n    \n\n\n\nselect PREV_HASH\nfrom NEAR.core.fact_blocks\nwhere PREV_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_HASH", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HASH__STRING__VARCHAR.cb8c19abe8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7b33ac1dd828a0ea69ba24746baaad2d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PREV_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7b33ac1dd828a0ea69ba24746baaad2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HASH__STRING__VARCHAR.cb8c19abe8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7b33ac1dd828a0ea69ba24746baaad2d.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HASH__STRING__VARCHAR", "alias": "fact_blocks_PREV_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_7b33ac1dd828a0ea69ba24746baaad2d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7b33ac1dd828a0ea69ba24746baaad2d"}, "created_at": 1658508767.2337844, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PREV_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_HASH", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.1abb35f272": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_742986c29350270526788c08185fb7cf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PREV_HEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_742986c29350270526788c08185fb7cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.1abb35f272", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_742986c29350270526788c08185fb7cf.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT", "alias": "fact_blocks_PREV_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_742986c29350270526788c08185fb7cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_742986c29350270526788c08185fb7cf"}, "created_at": 1658508767.2404232, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PREV_HEIGHT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_HEIGHT", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.1f0ccb1649": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f16b0ebf31c9c9e62c5f6c6b8f240354\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PREV_STATE_ROOT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f16b0ebf31c9c9e62c5f6c6b8f240354", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.1f0ccb1649", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f16b0ebf31c9c9e62c5f6c6b8f240354.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR", "alias": "fact_blocks_PREV_STATE_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_f16b0ebf31c9c9e62c5f6c6b8f240354.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f16b0ebf31c9c9e62c5f6c6b8f240354"}, "created_at": 1658508767.247305, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PREV_STATE_ROOT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREV_STATE_ROOT", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_RANDOM_VALUE.b03444e241": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RANDOM_VALUE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_RANDOM_VALUE"], "unique_id": "test.near.not_null_core__fact_blocks_RANDOM_VALUE.b03444e241", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_RANDOM_VALUE.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_RANDOM_VALUE", "alias": "fact_blocks_RANDOM_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_RANDOM_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.254153, "compiled_sql": "\n    \n    \n\n\n\nselect RANDOM_VALUE\nfrom NEAR.core.fact_blocks\nwhere RANDOM_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RANDOM_VALUE", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.962f1c1f84": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ca12185aec1d3f2326981c2d1fc7bd4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RANDOM_VALUE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ca12185aec1d3f2326981c2d1fc7bd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RANDOM_VALUE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.962f1c1f84", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7ca12185aec1d3f2326981c2d1fc7bd4.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RANDOM_VALUE__STRING__VARCHAR", "alias": "fact_blocks_RANDOM_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_7ca12185aec1d3f2326981c2d1fc7bd4.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7ca12185aec1d3f2326981c2d1fc7bd4"}, "created_at": 1658508767.2568786, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RANDOM_VALUE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RANDOM_VALUE", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_RENT_PAID.ddb4e81a61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RENT_PAID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_RENT_PAID"], "unique_id": "test.near.not_null_core__fact_blocks_RENT_PAID.ddb4e81a61", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_RENT_PAID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_RENT_PAID", "alias": "fact_blocks_RENT_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_RENT_PAID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.2638218, "compiled_sql": "\n    \n    \n\n\n\nselect RENT_PAID\nfrom NEAR.core.fact_blocks\nwhere RENT_PAID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RENT_PAID", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RENT_PAID__NUMBER__FLOAT.763ecc5553": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e0d77d2a9ae446f921cf0ba68fd64f4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RENT_PAID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e0d77d2a9ae446f921cf0ba68fd64f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RENT_PAID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RENT_PAID__NUMBER__FLOAT.763ecc5553", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9e0d77d2a9ae446f921cf0ba68fd64f4.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RENT_PAID__NUMBER__FLOAT", "alias": "fact_blocks_RENT_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_9e0d77d2a9ae446f921cf0ba68fd64f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9e0d77d2a9ae446f921cf0ba68fd64f4"}, "created_at": 1658508767.2665179, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RENT_PAID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RENT_PAID", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_SIGNATURE.15645d592a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_SIGNATURE"], "unique_id": "test.near.not_null_core__fact_blocks_SIGNATURE.15645d592a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_SIGNATURE.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_SIGNATURE", "alias": "fact_blocks_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.2735686, "compiled_sql": "\n    \n    \n\n\n\nselect SIGNATURE\nfrom NEAR.core.fact_blocks\nwhere SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_SIGNATURE__STRING__VARCHAR.26c1b90668": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d2755c2dda15983228ffc5214f19e350\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d2755c2dda15983228ffc5214f19e350", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_SIGNATURE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_SIGNATURE__STRING__VARCHAR.26c1b90668", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d2755c2dda15983228ffc5214f19e350.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_SIGNATURE__STRING__VARCHAR", "alias": "fact_blocks_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_d2755c2dda15983228ffc5214f19e350.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d2755c2dda15983228ffc5214f19e350"}, "created_at": 1658508767.2762847, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SIGNATURE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNATURE", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_TOTAL_SUPPLY.3f37be811b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_TOTAL_SUPPLY"], "unique_id": "test.near.not_null_core__fact_blocks_TOTAL_SUPPLY.3f37be811b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_TOTAL_SUPPLY.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_TOTAL_SUPPLY", "alias": "fact_blocks_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_TOTAL_SUPPLY.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.2832544, "compiled_sql": "\n    \n    \n\n\n\nselect TOTAL_SUPPLY\nfrom NEAR.core.fact_blocks\nwhere TOTAL_SUPPLY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.ec94b7fc4e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_de9055418584450771cbacfe6cf1169d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_de9055418584450771cbacfe6cf1169d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.ec94b7fc4e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_de9055418584450771cbacfe6cf1169d.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT", "alias": "fact_blocks_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_de9055418584450771cbacfe6cf1169d.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_de9055418584450771cbacfe6cf1169d"}, "created_at": 1658508767.285956, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_SUPPLY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_VALIDATOR_PROPOSALS.07b595a2da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_PROPOSALS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_VALIDATOR_PROPOSALS"], "unique_id": "test.near.not_null_core__fact_blocks_VALIDATOR_PROPOSALS.07b595a2da", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_VALIDATOR_PROPOSALS.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_VALIDATOR_PROPOSALS", "alias": "fact_blocks_VALIDATOR_PROPOSALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_VALIDATOR_PROPOSALS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.2929602, "compiled_sql": "\n    \n    \n\n\n\nselect VALIDATOR_PROPOSALS\nfrom NEAR.core.fact_blocks\nwhere VALIDATOR_PROPOSALS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_PROPOSALS", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3bfbd1964d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d667c2b8eae3384d389828cad2232d7c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "VALIDATOR_PROPOSALS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d667c2b8eae3384d389828cad2232d7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3bfbd1964d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d667c2b8eae3384d389828cad2232d7c.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_VALIDATOR_PROPOSALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_d667c2b8eae3384d389828cad2232d7c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d667c2b8eae3384d389828cad2232d7c"}, "created_at": 1658508767.295698, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATOR_PROPOSALS'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_PROPOSALS", "file_key_name": "models.core__fact_blocks"}, "test.near.not_null_core__fact_blocks_VALIDATOR_REWARD.9e6492b364": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_blocks_VALIDATOR_REWARD"], "unique_id": "test.near.not_null_core__fact_blocks_VALIDATOR_REWARD.9e6492b364", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_blocks_VALIDATOR_REWARD.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_VALIDATOR_REWARD", "alias": "fact_blocks_VALIDATOR_REWARD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_VALIDATOR_REWARD.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.3031306, "compiled_sql": "\n    \n    \n\n\n\nselect VALIDATOR_REWARD\nfrom NEAR.core.fact_blocks\nwhere VALIDATOR_REWARD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_REWARD", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.920e7b7fdf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_39d9fe2c43d4e1449ce3b93374de04b6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "VALIDATOR_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_39d9fe2c43d4e1449ce3b93374de04b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.920e7b7fdf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_39d9fe2c43d4e1449ce3b93374de04b6.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT", "alias": "fact_blocks_VALIDATOR_REWARD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_39d9fe2c43d4e1449ce3b93374de04b6.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_39d9fe2c43d4e1449ce3b93374de04b6"}, "created_at": 1658508767.3058732, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_AUTHOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_RESULT' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_CHALLENGES_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_HEADERS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_TX_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_MASK' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNK_RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CHUNKS_INCLUDED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EPOCH_SYNC_DATA_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENTS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_DS_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_FINAL_BLOCK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LATEST_PROTOCOL_VERSION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_BP_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_EPOCH_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTCOME_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_HEIGHT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PREV_STATE_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RANDOM_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RENT_PAID' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_SUPPLY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_PROPOSALS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_REWARD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATOR_REWARD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALIDATOR_REWARD", "file_key_name": "models.core__fact_blocks"}, "test.near.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id"], "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["near", "core", "dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id", "alias": "fact_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171"}, "created_at": 1658508767.3129165, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id\n    from NEAR.core.fact_blocks\n    group by block_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_blocks"}, "test.near.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.near.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "sequence_gaps_core", "fqn": ["near", "core", "sequence_gaps_core__fact_blocks_block_id"], "unique_id": "test.near.sequence_gaps_core__fact_blocks_block_id.2dfe19480e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "sequence_gaps_core__fact_blocks_block_id.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "sequence_gaps_core__fact_blocks_block_id", "alias": "fact_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_blocks.yml/sequence_gaps_core__fact_blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1658508767.3200853, "compiled_sql": "WITH source AS (\n    SELECT\n        \n        block_id,\n        LAG(\n            block_id,\n            1\n        ) over (\n            \n            ORDER BY\n                block_id ASC\n        ) AS prev_block_id\n    FROM\n        (select * from NEAR.core.fact_blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    \n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_blocks"}, "test.near.unique_core__fact_actions_events_ACTION_ID.14a38faeff": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_core", "fqn": ["near", "core", "unique_core__fact_actions_events_ACTION_ID"], "unique_id": "test.near.unique_core__fact_actions_events_ACTION_ID.14a38faeff", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_core__fact_actions_events_ACTION_ID.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "unique_core__fact_actions_events_ACTION_ID", "alias": "fact_actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/unique_core__fact_actions_events_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.331205, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.core.fact_actions_events\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events"}, "test.near.not_null_core__fact_actions_events_ACTION_ID.afe8ac7f43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_ACTION_ID"], "unique_id": "test.near.not_null_core__fact_actions_events_ACTION_ID.afe8ac7f43", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_ACTION_ID.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "not_null_core__fact_actions_events_ACTION_ID", "alias": "fact_actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/not_null_core__fact_actions_events_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.3339767, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.core.fact_actions_events\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_ID__STRING__VARCHAR.74fc819b38": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bafb5cb20a3a5bf10f93117028108d9f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bafb5cb20a3a5bf10f93117028108d9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_ID__STRING__VARCHAR.74fc819b38", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bafb5cb20a3a5bf10f93117028108d9f.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_ID__STRING__VARCHAR", "alias": "fact_actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_expectations_expect_column_bafb5cb20a3a5bf10f93117028108d9f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bafb5cb20a3a5bf10f93117028108d9f"}, "created_at": 1658508767.3370578, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events"}, "test.near.not_null_core__fact_actions_events_TX_HASH.9a2156dfa3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_TX_HASH"], "unique_id": "test.near.not_null_core__fact_actions_events_TX_HASH.9a2156dfa3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_TX_HASH.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "not_null_core__fact_actions_events_TX_HASH", "alias": "fact_actions_events_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/not_null_core__fact_actions_events_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.344982, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.core.fact_actions_events\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_TX_HASH__STRING__VARCHAR.b0c91a3528": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c7c9a7e97460ebd01ae2db9ea1cc425\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c7c9a7e97460ebd01ae2db9ea1cc425", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_TX_HASH__STRING__VARCHAR.b0c91a3528", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6c7c9a7e97460ebd01ae2db9ea1cc425.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_TX_HASH__STRING__VARCHAR", "alias": "fact_actions_events_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_expectations_expect_column_6c7c9a7e97460ebd01ae2db9ea1cc425.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6c7c9a7e97460ebd01ae2db9ea1cc425"}, "created_at": 1658508767.3477097, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_actions_events"}, "test.near.not_null_core__fact_actions_events_BLOCK_ID.34d4029e61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_BLOCK_ID"], "unique_id": "test.near.not_null_core__fact_actions_events_BLOCK_ID.34d4029e61", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "not_null_core__fact_actions_events_BLOCK_ID", "alias": "fact_actions_events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/not_null_core__fact_actions_events_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.3546958, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.core.fact_actions_events\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_ID__NUMBER__FLOAT.632f6cabad": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2d49485a8020f83a0bf4c73fb22baef\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2d49485a8020f83a0bf4c73fb22baef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_ID__NUMBER__FLOAT.632f6cabad", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e2d49485a8020f83a0bf4c73fb22baef.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_actions_events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_expectations_expect_column_e2d49485a8020f83a0bf4c73fb22baef.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e2d49485a8020f83a0bf4c73fb22baef"}, "created_at": 1658508767.3573964, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_actions_events"}, "test.near.not_null_core__fact_actions_events_BLOCK_TIMESTAMP.a689694c81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_core__fact_actions_events_BLOCK_TIMESTAMP.a689694c81", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "not_null_core__fact_actions_events_BLOCK_TIMESTAMP", "alias": "fact_actions_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/not_null_core__fact_actions_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.3644252, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.core.fact_actions_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77b3fcda85": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_476eaf0c095465665f518397fb867344\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_476eaf0c095465665f518397fb867344", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77b3fcda85", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_476eaf0c095465665f518397fb867344.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_actions_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_expectations_expect_column_476eaf0c095465665f518397fb867344.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_476eaf0c095465665f518397fb867344"}, "created_at": 1658508767.3671389, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_actions_events"}, "test.near.not_null_core__fact_actions_events_ACTION_INDEX.5ac72a11ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_INDEX", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_ACTION_INDEX"], "unique_id": "test.near.not_null_core__fact_actions_events_ACTION_INDEX.5ac72a11ef", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_ACTION_INDEX.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "not_null_core__fact_actions_events_ACTION_INDEX", "alias": "fact_actions_events_ACTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/not_null_core__fact_actions_events_ACTION_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.3739843, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_INDEX\nfrom NEAR.core.fact_actions_events\nwhere ACTION_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_INDEX", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_INDEX__NUMBER.079ff35912": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b07d07002f5ef575f0da92af969ce63f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "ACTION_INDEX", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b07d07002f5ef575f0da92af969ce63f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_INDEX__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_INDEX__NUMBER.079ff35912", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b07d07002f5ef575f0da92af969ce63f.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_INDEX__NUMBER", "alias": "fact_actions_events_ACTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_expectations_expect_column_b07d07002f5ef575f0da92af969ce63f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b07d07002f5ef575f0da92af969ce63f"}, "created_at": 1658508767.3767421, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_INDEX", "file_key_name": "models.core__fact_actions_events"}, "test.near.not_null_core__fact_actions_events_ACTION_NAME.ce486ef218": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_ACTION_NAME"], "unique_id": "test.near.not_null_core__fact_actions_events_ACTION_NAME.ce486ef218", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_ACTION_NAME.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "not_null_core__fact_actions_events_ACTION_NAME", "alias": "fact_actions_events_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/not_null_core__fact_actions_events_ACTION_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.383398, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_NAME\nfrom NEAR.core.fact_actions_events\nwhere ACTION_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_NAME__STRING__VARCHAR.ecec2e0760": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5dc0227c498da89bf6df3adc3d90db18\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5dc0227c498da89bf6df3adc3d90db18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_NAME__STRING__VARCHAR.ecec2e0760", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_5dc0227c498da89bf6df3adc3d90db18.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_NAME__STRING__VARCHAR", "alias": "fact_actions_events_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_expectations_expect_column_5dc0227c498da89bf6df3adc3d90db18.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_5dc0227c498da89bf6df3adc3d90db18"}, "created_at": 1658508767.386109, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.core__fact_actions_events"}, "test.near.not_null_core__fact_actions_events_ACTION_DATA.315199ec0d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_DATA", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_ACTION_DATA"], "unique_id": "test.near.not_null_core__fact_actions_events_ACTION_DATA.315199ec0d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_ACTION_DATA.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "not_null_core__fact_actions_events_ACTION_DATA", "alias": "fact_actions_events_ACTION_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/not_null_core__fact_actions_events_ACTION_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.393238, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_DATA\nfrom NEAR.core.fact_actions_events\nwhere ACTION_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_DATA", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.3e5207fbd8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_54223c786b23a7972d49a1616bbdd66a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT", "VARIANT"], "column_name": "ACTION_DATA", "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_54223c786b23a7972d49a1616bbdd66a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_DATA__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.3e5207fbd8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_54223c786b23a7972d49a1616bbdd66a.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_DATA__OBJECT__VARIANT", "alias": "fact_actions_events_ACTION_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_expectations_expect_column_54223c786b23a7972d49a1616bbdd66a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_54223c786b23a7972d49a1616bbdd66a"}, "created_at": 1658508767.3959696, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_INDEX' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_DATA' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_DATA'\n            and\n            relation_column_type not in ('OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_DATA", "file_key_name": "models.core__fact_actions_events"}, "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_action_id.a5163dfbf7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ed2fc762bd4e5904fed8ab1fa0dbe472\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('core__fact_actions_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ed2fc762bd4e5904fed8ab1fa0dbe472", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["near", "core", "dbt_utils_unique_combination_of_columns_core__fact_actions_events_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_action_id.a5163dfbf7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_ed2fc762bd4e5904fed8ab1fa0dbe472.sql", "original_file_path": "models/core/core__fact_actions_events.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_actions_events_action_id", "alias": "fact_actions_events_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events.yml/dbt_utils_unique_combination_o_ed2fc762bd4e5904fed8ab1fa0dbe472.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_ed2fc762bd4e5904fed8ab1fa0dbe472"}, "created_at": 1658508767.4030461, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.core.fact_actions_events\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_actions_events"}, "test.near.unique_core__fact_actions_events_addkey_ACTION_ID.216a213bdc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_core", "fqn": ["near", "core", "unique_core__fact_actions_events_addkey_ACTION_ID"], "unique_id": "test.near.unique_core__fact_actions_events_addkey_ACTION_ID.216a213bdc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_core__fact_actions_events_addkey_ACTION_ID.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "unique_core__fact_actions_events_addkey_ACTION_ID", "alias": "fact_actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/unique_core__fact_actions_events_addkey_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.4164503, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.core.fact_actions_events_addkey\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.not_null_core__fact_actions_events_addkey_ACTION_ID.dccfec4147": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_addkey_ACTION_ID"], "unique_id": "test.near.not_null_core__fact_actions_events_addkey_ACTION_ID.dccfec4147", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_addkey_ACTION_ID.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "not_null_core__fact_actions_events_addkey_ACTION_ID", "alias": "fact_actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/not_null_core__fact_actions_events_addkey_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.4195392, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.core.fact_actions_events_addkey\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ACTION_ID__STRING__VARCHAR.9e0178a829": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e5f792d0ebe015af24fce639ae13bc86\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e5f792d0ebe015af24fce639ae13bc86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ACTION_ID__STRING__VARCHAR.9e0178a829", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e5f792d0ebe015af24fce639ae13bc86.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ACTION_ID__STRING__VARCHAR", "alias": "fact_actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_e5f792d0ebe015af24fce639ae13bc86.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e5f792d0ebe015af24fce639ae13bc86"}, "created_at": 1658508767.4222622, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.not_null_core__fact_actions_events_addkey_TX_HASH.e89dbaf1ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_addkey_TX_HASH"], "unique_id": "test.near.not_null_core__fact_actions_events_addkey_TX_HASH.e89dbaf1ea", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_addkey_TX_HASH.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "not_null_core__fact_actions_events_addkey_TX_HASH", "alias": "fact_actions_events_addkey_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/not_null_core__fact_actions_events_addkey_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.429406, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.core.fact_actions_events_addkey\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_TX_HASH__STRING__VARCHAR.b088e4c818": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ddc1564761673d99fd34ef078b976063\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ddc1564761673d99fd34ef078b976063", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_TX_HASH__STRING__VARCHAR.b088e4c818", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ddc1564761673d99fd34ef078b976063.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_TX_HASH__STRING__VARCHAR", "alias": "fact_actions_events_addkey_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_ddc1564761673d99fd34ef078b976063.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ddc1564761673d99fd34ef078b976063"}, "created_at": 1658508767.4321678, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.not_null_core__fact_actions_events_addkey_BLOCK_ID.dedba2fccf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_addkey_BLOCK_ID"], "unique_id": "test.near.not_null_core__fact_actions_events_addkey_BLOCK_ID.dedba2fccf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_addkey_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "not_null_core__fact_actions_events_addkey_BLOCK_ID", "alias": "fact_actions_events_addkey_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/not_null_core__fact_actions_events_addkey_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.4393358, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.core.fact_actions_events_addkey\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.fb08eaa895": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_17630b0f549743cadba42fed5aebce13\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_17630b0f549743cadba42fed5aebce13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.fb08eaa895", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_17630b0f549743cadba42fed5aebce13.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_actions_events_addkey_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_17630b0f549743cadba42fed5aebce13.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_17630b0f549743cadba42fed5aebce13"}, "created_at": 1658508767.4420633, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP.f40ba74833": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP.f40ba74833", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP", "alias": "fact_actions_events_addkey_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.4491358, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.core.fact_actions_events_addkey\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b9da13f93b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a947d5fed1ef8d0e92674364d9ded56e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a947d5fed1ef8d0e92674364d9ded56e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b9da13f93b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a947d5fed1ef8d0e92674364d9ded56e.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_actions_events_addkey_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_a947d5fed1ef8d0e92674364d9ded56e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a947d5fed1ef8d0e92674364d9ded56e"}, "created_at": 1658508767.4518955, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.not_null_core__fact_actions_events_addkey_NONCE.00a670b423": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_addkey_NONCE"], "unique_id": "test.near.not_null_core__fact_actions_events_addkey_NONCE.00a670b423", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_addkey_NONCE.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "not_null_core__fact_actions_events_addkey_NONCE", "alias": "fact_actions_events_addkey_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/not_null_core__fact_actions_events_addkey_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.4593053, "compiled_sql": "\n    \n    \n\n\n\nselect NONCE\nfrom NEAR.core.fact_actions_events_addkey\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_NONCE__NUMBER__FLOAT.cde0474be1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_22f7a04a9d8f9acbb5eb690d5535dff5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_22f7a04a9d8f9acbb5eb690d5535dff5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_NONCE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_NONCE__NUMBER__FLOAT.cde0474be1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_22f7a04a9d8f9acbb5eb690d5535dff5.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_NONCE__NUMBER__FLOAT", "alias": "fact_actions_events_addkey_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_22f7a04a9d8f9acbb5eb690d5535dff5.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_22f7a04a9d8f9acbb5eb690d5535dff5"}, "created_at": 1658508767.4619932, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.0746fc57ee": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d86dcb4eddfe5812e6a20f174ec6730c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "PUBLIC_KEY", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d86dcb4eddfe5812e6a20f174ec6730c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.0746fc57ee", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d86dcb4eddfe5812e6a20f174ec6730c.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None", "alias": "fact_actions_events_addkey_PUBLIC_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_d86dcb4eddfe5812e6a20f174ec6730c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d86dcb4eddfe5812e6a20f174ec6730c"}, "created_at": 1658508767.469056, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PUBLIC_KEY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PUBLIC_KEY", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.not_null_core__fact_actions_events_addkey_PERMISSION.784eed916e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PERMISSION", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_addkey_PERMISSION"], "unique_id": "test.near.not_null_core__fact_actions_events_addkey_PERMISSION.784eed916e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_addkey_PERMISSION.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "not_null_core__fact_actions_events_addkey_PERMISSION", "alias": "fact_actions_events_addkey_PERMISSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/not_null_core__fact_actions_events_addkey_PERMISSION.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.4762564, "compiled_sql": "\n    \n    \n\n\n\nselect PERMISSION\nfrom NEAR.core.fact_actions_events_addkey\nwhere PERMISSION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PERMISSION", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.d9006fbe3b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6f3e67c1ee36fd2dcf7afdd10eac948b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", "OBJECT", "VARIANT"], "column_name": "PERMISSION", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6f3e67c1ee36fd2dcf7afdd10eac948b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.d9006fbe3b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6f3e67c1ee36fd2dcf7afdd10eac948b.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT", "alias": "fact_actions_events_addkey_PERMISSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_6f3e67c1ee36fd2dcf7afdd10eac948b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6f3e67c1ee36fd2dcf7afdd10eac948b"}, "created_at": 1658508767.479008, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PERMISSION'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PERMISSION", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.70c63ee616": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_872fa9bc0f977f00d3e6481b4bccbe24\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT", null], "column_name": "ALLOWANCE", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_872fa9bc0f977f00d3e6481b4bccbe24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.70c63ee616", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_872fa9bc0f977f00d3e6481b4bccbe24.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None", "alias": "fact_actions_events_addkey_ALLOWANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_872fa9bc0f977f00d3e6481b4bccbe24.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_872fa9bc0f977f00d3e6481b4bccbe24"}, "created_at": 1658508767.4873502, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ALLOWANCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ALLOWANCE", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.64aec323e5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b4ac2b07793066f43447eee4e921e038\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT", null], "column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b4ac2b07793066f43447eee4e921e038", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.64aec323e5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b4ac2b07793066f43447eee4e921e038.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None", "alias": "fact_actions_events_addkey_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_b4ac2b07793066f43447eee4e921e038.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b4ac2b07793066f43447eee4e921e038"}, "created_at": 1658508767.4946237, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METHOD_NAME'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.ee3c8e9b0c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e3a74101488d9129b92b0d5e40a3641f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "RECEIVER_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e3a74101488d9129b92b0d5e40a3641f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.ee3c8e9b0c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e3a74101488d9129b92b0d5e40a3641f.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None", "alias": "fact_actions_events_addkey_RECEIVER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_expectations_expect_column_e3a74101488d9129b92b0d5e40a3641f.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e3a74101488d9129b92b0d5e40a3641f"}, "created_at": 1658508767.5022798, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIVER_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIVER_ID", "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_addkey_action_id.6cc237fc2b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_df9a3f0f4fd2a5fc14287e6dfc3051d3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('core__fact_actions_events_addkey')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_df9a3f0f4fd2a5fc14287e6dfc3051d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["near", "core", "dbt_utils_unique_combination_of_columns_core__fact_actions_events_addkey_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_addkey_action_id.6cc237fc2b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_df9a3f0f4fd2a5fc14287e6dfc3051d3.sql", "original_file_path": "models/core/core__fact_actions_events_addkey.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_actions_events_addkey_action_id", "alias": "fact_actions_events_addkey_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_addkey.yml/dbt_utils_unique_combination_o_df9a3f0f4fd2a5fc14287e6dfc3051d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_df9a3f0f4fd2a5fc14287e6dfc3051d3"}, "created_at": 1658508767.5095458, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.core.fact_actions_events_addkey\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_actions_events_addkey"}, "test.near.unique_core__fact_actions_events_function_call_ACTION_ID.b4577325c1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_core", "fqn": ["near", "core", "unique_core__fact_actions_events_function_call_ACTION_ID"], "unique_id": "test.near.unique_core__fact_actions_events_function_call_ACTION_ID.b4577325c1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_core__fact_actions_events_function_call_ACTION_ID.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "unique_core__fact_actions_events_function_call_ACTION_ID", "alias": "fact_actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/unique_core__fact_actions_events_function_call_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.5226474, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.core.fact_actions_events_function_call\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_core__fact_actions_events_function_call_ACTION_ID.9f9becf33c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_function_call_ACTION_ID"], "unique_id": "test.near.not_null_core__fact_actions_events_function_call_ACTION_ID.9f9becf33c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_function_call_ACTION_ID.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "not_null_core__fact_actions_events_function_call_ACTION_ID", "alias": "fact_actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/not_null_core__fact_actions_events_function_call_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.525518, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.core.fact_actions_events_function_call\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_ID__STRING__VARCHAR.6ea7dbc24c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_958cfee6f81da3d5ea502cd3d110edd6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_958cfee6f81da3d5ea502cd3d110edd6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_ID__STRING__VARCHAR.6ea7dbc24c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_958cfee6f81da3d5ea502cd3d110edd6.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_ID__STRING__VARCHAR", "alias": "fact_actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_958cfee6f81da3d5ea502cd3d110edd6.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_958cfee6f81da3d5ea502cd3d110edd6"}, "created_at": 1658508767.528561, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_core__fact_actions_events_function_call_TX_HASH.8d8f00d929": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_function_call_TX_HASH"], "unique_id": "test.near.not_null_core__fact_actions_events_function_call_TX_HASH.8d8f00d929", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_function_call_TX_HASH.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "not_null_core__fact_actions_events_function_call_TX_HASH", "alias": "fact_actions_events_function_call_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/not_null_core__fact_actions_events_function_call_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.535548, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom NEAR.core.fact_actions_events_function_call\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_TX_HASH__STRING__VARCHAR.35c28539f2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e135bb33957d55004a99b191d23496a9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e135bb33957d55004a99b191d23496a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_TX_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_TX_HASH__STRING__VARCHAR.35c28539f2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e135bb33957d55004a99b191d23496a9.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_TX_HASH__STRING__VARCHAR", "alias": "fact_actions_events_function_call_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_e135bb33957d55004a99b191d23496a9.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e135bb33957d55004a99b191d23496a9"}, "created_at": 1658508767.5386338, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_core__fact_actions_events_function_call_BLOCK_ID.bc91cebe92": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_function_call_BLOCK_ID"], "unique_id": "test.near.not_null_core__fact_actions_events_function_call_BLOCK_ID.bc91cebe92", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_function_call_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "not_null_core__fact_actions_events_function_call_BLOCK_ID", "alias": "fact_actions_events_function_call_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/not_null_core__fact_actions_events_function_call_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.5454826, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_ID\nfrom NEAR.core.fact_actions_events_function_call\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.08e78462cf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6d4da92a539561266130fa5e053821f8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6d4da92a539561266130fa5e053821f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.08e78462cf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6d4da92a539561266130fa5e053821f8.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_actions_events_function_call_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_6d4da92a539561266130fa5e053821f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6d4da92a539561266130fa5e053821f8"}, "created_at": 1658508767.5485854, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_core__fact_actions_events_function_call_BLOCK_TIMESTAMP.ca4ba7867c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_actions_ev_c3636adbb735c62d1bbd5a2b6cc2ff2c\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "not_null_core__fact_actions_ev_c3636adbb735c62d1bbd5a2b6cc2ff2c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_function_call_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_core__fact_actions_events_function_call_BLOCK_TIMESTAMP.ca4ba7867c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_ev_c3636adbb735c62d1bbd5a2b6cc2ff2c.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "not_null_core__fact_actions_events_function_call_BLOCK_TIMESTAMP", "alias": "fact_actions_events_function_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/not_null_core__fact_actions_ev_c3636adbb735c62d1bbd5a2b6cc2ff2c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "not_null_core__fact_actions_ev_c3636adbb735c62d1bbd5a2b6cc2ff2c"}, "created_at": 1658508767.5559733, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.core.fact_actions_events_function_call\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7290f88a39": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_efa0c1360123cce4027151012c927948\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_efa0c1360123cce4027151012c927948", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7290f88a39", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_efa0c1360123cce4027151012c927948.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_actions_events_function_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_efa0c1360123cce4027151012c927948.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_efa0c1360123cce4027151012c927948"}, "created_at": 1658508767.5587628, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_core__fact_actions_events_function_call_ACTION_NAME.2cf18d974f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_function_call_ACTION_NAME"], "unique_id": "test.near.not_null_core__fact_actions_events_function_call_ACTION_NAME.2cf18d974f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_function_call_ACTION_NAME.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "not_null_core__fact_actions_events_function_call_ACTION_NAME", "alias": "fact_actions_events_function_call_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/not_null_core__fact_actions_events_function_call_ACTION_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.566245, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_NAME\nfrom NEAR.core.fact_actions_events_function_call\nwhere ACTION_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_NAME__STRING__VARCHAR.c7023a515b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e48a1febfc2c7147979ffdf39b1ddf10\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e48a1febfc2c7147979ffdf39b1ddf10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_NAME__STRING__VARCHAR.c7023a515b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e48a1febfc2c7147979ffdf39b1ddf10.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_NAME__STRING__VARCHAR", "alias": "fact_actions_events_function_call_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_e48a1febfc2c7147979ffdf39b1ddf10.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e48a1febfc2c7147979ffdf39b1ddf10"}, "created_at": 1658508767.569053, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_core__fact_actions_events_function_call_METHOD_NAME.2baddbe78e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_function_call_METHOD_NAME"], "unique_id": "test.near.not_null_core__fact_actions_events_function_call_METHOD_NAME.2baddbe78e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_function_call_METHOD_NAME.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "not_null_core__fact_actions_events_function_call_METHOD_NAME", "alias": "fact_actions_events_function_call_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/not_null_core__fact_actions_events_function_call_METHOD_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.576453, "compiled_sql": "\n    \n    \n\n\n\nselect METHOD_NAME\nfrom NEAR.core.fact_actions_events_function_call\nwhere METHOD_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_METHOD_NAME__STRING__VARCHAR.f53ecaf4ea": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8587746c8d6c8d994c27c3788b3dc2c2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8587746c8d6c8d994c27c3788b3dc2c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_METHOD_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_METHOD_NAME__STRING__VARCHAR.f53ecaf4ea", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8587746c8d6c8d994c27c3788b3dc2c2.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_METHOD_NAME__STRING__VARCHAR", "alias": "fact_actions_events_function_call_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_8587746c8d6c8d994c27c3788b3dc2c2.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8587746c8d6c8d994c27c3788b3dc2c2"}, "created_at": 1658508767.5792382, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METHOD_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_core__fact_actions_events_function_call_ARGS.967716b874": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ARGS", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_core", "fqn": ["near", "core", "not_null_core__fact_actions_events_function_call_ARGS"], "unique_id": "test.near.not_null_core__fact_actions_events_function_call_ARGS.967716b874", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_core__fact_actions_events_function_call_ARGS.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "not_null_core__fact_actions_events_function_call_ARGS", "alias": "fact_actions_events_function_call_ARGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/not_null_core__fact_actions_events_function_call_ARGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.58638, "compiled_sql": "\n    \n    \n\n\n\nselect ARGS\nfrom NEAR.core.fact_actions_events_function_call\nwhere ARGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ARGS", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ARGS__STRING__VARCHAR.c1cd00ec20": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_152feab4a15d97f6a24592e11c9c7fc7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ARGS", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_152feab4a15d97f6a24592e11c9c7fc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ARGS__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ARGS__STRING__VARCHAR.c1cd00ec20", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_152feab4a15d97f6a24592e11c9c7fc7.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ARGS__STRING__VARCHAR", "alias": "fact_actions_events_function_call_ARGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_152feab4a15d97f6a24592e11c9c7fc7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_152feab4a15d97f6a24592e11c9c7fc7"}, "created_at": 1658508767.589123, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ARGS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ARGS", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_DEPOSIT__NUMBER__FLOAT.4ce2dd5fea": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b1c4d1c2e20025c26779f927add8932\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DEPOSIT", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3b1c4d1c2e20025c26779f927add8932", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_DEPOSIT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_DEPOSIT__NUMBER__FLOAT.4ce2dd5fea", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3b1c4d1c2e20025c26779f927add8932.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_DEPOSIT__NUMBER__FLOAT", "alias": "fact_actions_events_function_call_DEPOSIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_3b1c4d1c2e20025c26779f927add8932.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3b1c4d1c2e20025c26779f927add8932"}, "created_at": 1658508767.5962806, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DEPOSIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DEPOSIT", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.ffc83d58d0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b0a82edaba6605f39dcfa874f9414fb7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b0a82edaba6605f39dcfa874f9414fb7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["near", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.ffc83d58d0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b0a82edaba6605f39dcfa874f9414fb7.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT", "alias": "fact_actions_events_function_call_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_expectations_expect_column_b0a82edaba6605f39dcfa874f9414fb7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b0a82edaba6605f39dcfa874f9414fb7"}, "created_at": 1658508767.603754, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTACHED_GAS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ATTACHED_GAS", "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_function_call_action_id.8fa1f51914": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ab19b42abc78c38185ad6842a99e50bc\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('core__fact_actions_events_function_call')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.core__fact_actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ab19b42abc78c38185ad6842a99e50bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["near", "core", "dbt_utils_unique_combination_of_columns_core__fact_actions_events_function_call_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_function_call_action_id.8fa1f51914", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_ab19b42abc78c38185ad6842a99e50bc.sql", "original_file_path": "models/core/core__fact_actions_events_function_call.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_actions_events_function_call_action_id", "alias": "fact_actions_events_function_call_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/core/core__fact_actions_events_function_call.yml/dbt_utils_unique_combination_o_ab19b42abc78c38185ad6842a99e50bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_ab19b42abc78c38185ad6842a99e50bc"}, "created_at": 1658508767.6109238, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.core.fact_actions_events_function_call\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_actions_events_function_call"}, "test.near.not_null_legacy__fact_transactions_BLOCK_HEIGHT.f6f420e0ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_BLOCK_HEIGHT"], "unique_id": "test.near.not_null_legacy__fact_transactions_BLOCK_HEIGHT.f6f420e0ca", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_BLOCK_HEIGHT.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_BLOCK_HEIGHT", "alias": "fact_transactions_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.6268587, "column_name": "BLOCK_HEIGHT", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HEIGHT__NUMBER__FLOAT.cdbbea33c8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_35d1f0b5cb0ac1443e74f73436caabed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_35d1f0b5cb0ac1443e74f73436caabed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HEIGHT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HEIGHT__NUMBER__FLOAT.cdbbea33c8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_35d1f0b5cb0ac1443e74f73436caabed.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HEIGHT__NUMBER__FLOAT", "alias": "fact_transactions_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_35d1f0b5cb0ac1443e74f73436caabed"}, "created_at": 1658508767.6296809, "column_name": "BLOCK_HEIGHT", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_BLOCK_HASH.3e1b276ffe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_BLOCK_HASH"], "unique_id": "test.near.not_null_legacy__fact_transactions_BLOCK_HASH.3e1b276ffe", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_BLOCK_HASH.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_BLOCK_HASH", "alias": "fact_transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.636782, "column_name": "BLOCK_HASH", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HASH__STRING__VARCHAR.567551ac57": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f13b8e2b7db4061686d96bb5f33955ff\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_f13b8e2b7db4061686d96bb5f33955ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HASH__STRING__VARCHAR.567551ac57", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f13b8e2b7db4061686d96bb5f33955ff.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HASH__STRING__VARCHAR", "alias": "fact_transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f13b8e2b7db4061686d96bb5f33955ff"}, "created_at": 1658508767.6395504, "column_name": "BLOCK_HASH", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_TXN_HASH.e7d990ff22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_TXN_HASH"], "unique_id": "test.near.not_null_legacy__fact_transactions_TXN_HASH.e7d990ff22", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_TXN_HASH.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_TXN_HASH", "alias": "fact_transactions_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.646571, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_transactions"}, "test.near.unique_legacy__fact_transactions_TXN_HASH.778f45dbb7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_legacy", "fqn": ["near", "legacy", "unique_legacy__fact_transactions_TXN_HASH"], "unique_id": "test.near.unique_legacy__fact_transactions_TXN_HASH.778f45dbb7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_legacy__fact_transactions_TXN_HASH.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "unique_legacy__fact_transactions_TXN_HASH", "alias": "fact_transactions_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.6496305, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TXN_HASH__STRING__VARCHAR.5bfca8f9fc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ab857749fb73c49e7d044bc042bb68b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_3ab857749fb73c49e7d044bc042bb68b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TXN_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TXN_HASH__STRING__VARCHAR.5bfca8f9fc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3ab857749fb73c49e7d044bc042bb68b.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TXN_HASH__STRING__VARCHAR", "alias": "fact_transactions_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3ab857749fb73c49e7d044bc042bb68b"}, "created_at": 1658508767.652372, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_transactions"}, "test.near.tx_gaps_legacy__fact_transactions_block_height__TXN_HASH__tx_count.dcf3282caa": {"raw_sql": "{{ test_tx_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\",alias=\"tx_gaps_legacy__fact_transacti_cd914cdea1189f66f92b7de38a8d75df\") }}", "test_metadata": {"name": "tx_gaps", "kwargs": {"column_block": "block_height", "column_tx_count": "tx_count", "column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.near.test_tx_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.near.silver__blocks"]}, "config": {"enabled": false, "alias": "tx_gaps_legacy__fact_transacti_cd914cdea1189f66f92b7de38a8d75df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "tx_gaps_legacy", "fqn": ["near", "legacy", "tx_gaps_legacy__fact_transactions_block_height__TXN_HASH__tx_count"], "unique_id": "test.near.tx_gaps_legacy__fact_transactions_block_height__TXN_HASH__tx_count.dcf3282caa", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "tx_gaps_legacy__fact_transacti_cd914cdea1189f66f92b7de38a8d75df.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "tx_gaps_legacy__fact_transactions_block_height__TXN_HASH__tx_count", "alias": "fact_transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"], ["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "alias": "tx_gaps_legacy__fact_transacti_cd914cdea1189f66f92b7de38a8d75df"}, "created_at": 1658508767.6600056, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_BLOCK_TIMESTAMP.63bab18e0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_legacy__fact_transactions_BLOCK_TIMESTAMP.63bab18e0b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_BLOCK_TIMESTAMP", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.6667948, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_transactions_BLOCK_TIMESTAMP__day__1.8ba22e6a63": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b8a3efa9060c989ba3902f9ab049f238\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_row_va_b8a3efa9060c989ba3902f9ab049f238", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_transactions_BLOCK_TIMESTAMP__day__1.8ba22e6a63", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_row_va_b8a3efa9060c989ba3902f9ab049f238.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_transactions_BLOCK_TIMESTAMP__day__1", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_row_va_b8a3efa9060c989ba3902f9ab049f238"}, "created_at": 1658508767.6698918, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.215332aabd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e0821aa922b9161455acbabf89c656dd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_e0821aa922b9161455acbabf89c656dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.215332aabd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e0821aa922b9161455acbabf89c656dd.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e0821aa922b9161455acbabf89c656dd"}, "created_at": 1658508767.6788366, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_NONCE.d1de0f7bc3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_NONCE"], "unique_id": "test.near.not_null_legacy__fact_transactions_NONCE.d1de0f7bc3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_NONCE.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_NONCE", "alias": "fact_transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.6854012, "column_name": "NONCE", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_NONCE__NUMBER.c5ed129d92": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8f90408f9297a7af09d6d703594e6eb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_d8f90408f9297a7af09d6d703594e6eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_NONCE__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_NONCE__NUMBER.c5ed129d92", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d8f90408f9297a7af09d6d703594e6eb.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_NONCE__NUMBER", "alias": "fact_transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d8f90408f9297a7af09d6d703594e6eb"}, "created_at": 1658508767.688117, "column_name": "NONCE", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_SIGNATURE.7b2054b4f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_SIGNATURE"], "unique_id": "test.near.not_null_legacy__fact_transactions_SIGNATURE.7b2054b4f8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_SIGNATURE.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_SIGNATURE", "alias": "fact_transactions_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.694617, "column_name": "SIGNATURE", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_SIGNATURE__STRING__VARCHAR.f3af377c90": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_17c3ae421999e5f26bf97d05b1440da2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_17c3ae421999e5f26bf97d05b1440da2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_SIGNATURE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_SIGNATURE__STRING__VARCHAR.f3af377c90", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_17c3ae421999e5f26bf97d05b1440da2.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_SIGNATURE__STRING__VARCHAR", "alias": "fact_transactions_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_17c3ae421999e5f26bf97d05b1440da2"}, "created_at": 1658508767.6973403, "column_name": "SIGNATURE", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_TX_RECEIVER.9898736721": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_TX_RECEIVER"], "unique_id": "test.near.not_null_legacy__fact_transactions_TX_RECEIVER.9898736721", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_TX_RECEIVER.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_TX_RECEIVER", "alias": "fact_transactions_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.704668, "column_name": "TX_RECEIVER", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_RECEIVER__STRING__VARCHAR.1825318b52": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bbe3ed9da65d2e6cf1393a3c79a58665\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_bbe3ed9da65d2e6cf1393a3c79a58665", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_RECEIVER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_RECEIVER__STRING__VARCHAR.1825318b52", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bbe3ed9da65d2e6cf1393a3c79a58665.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_RECEIVER__STRING__VARCHAR", "alias": "fact_transactions_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bbe3ed9da65d2e6cf1393a3c79a58665"}, "created_at": 1658508767.707611, "column_name": "TX_RECEIVER", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_TX_SIGNER.150b389871": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_TX_SIGNER"], "unique_id": "test.near.not_null_legacy__fact_transactions_TX_SIGNER.150b389871", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_TX_SIGNER.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_TX_SIGNER", "alias": "fact_transactions_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.714765, "column_name": "TX_SIGNER", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_SIGNER__STRING__VARCHAR.4613bf6268": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0198e0836cf0c390dc6e74e13f4a1f1b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_0198e0836cf0c390dc6e74e13f4a1f1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_SIGNER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_SIGNER__STRING__VARCHAR.4613bf6268", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0198e0836cf0c390dc6e74e13f4a1f1b.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_SIGNER__STRING__VARCHAR", "alias": "fact_transactions_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0198e0836cf0c390dc6e74e13f4a1f1b"}, "created_at": 1658508767.717497, "column_name": "TX_SIGNER", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_TX.cf8fb8cefd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_TX"], "unique_id": "test.near.not_null_legacy__fact_transactions_TX.cf8fb8cefd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_TX.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_TX", "alias": "fact_transactions_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.7246547, "column_name": "TX", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX__OBJECT__VARIANT.310bce14a5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf6f2deb56b44e62196264c1783626b4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT", "VARIANT"], "column_name": "TX", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_bf6f2deb56b44e62196264c1783626b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX__OBJECT__VARIANT.310bce14a5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bf6f2deb56b44e62196264c1783626b4.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX__OBJECT__VARIANT", "alias": "fact_transactions_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bf6f2deb56b44e62196264c1783626b4"}, "created_at": 1658508767.7273865, "column_name": "TX", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_GAS_USED.8ba235ae95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_GAS_USED"], "unique_id": "test.near.not_null_legacy__fact_transactions_GAS_USED.8ba235ae95", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_GAS_USED.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_GAS_USED", "alias": "fact_transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.73445, "column_name": "GAS_USED", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_GAS_USED__NUMBER__FLOAT.ceb684ac3a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f11daa9e01146840cd0b0f5474dd3208\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_f11daa9e01146840cd0b0f5474dd3208", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_GAS_USED__NUMBER__FLOAT.ceb684ac3a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f11daa9e01146840cd0b0f5474dd3208.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_GAS_USED__NUMBER__FLOAT", "alias": "fact_transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f11daa9e01146840cd0b0f5474dd3208"}, "created_at": 1658508767.7371936, "column_name": "GAS_USED", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_ATTACHED_GAS.68eff6bb1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_ATTACHED_GAS"], "unique_id": "test.near.not_null_legacy__fact_transactions_ATTACHED_GAS.68eff6bb1f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_ATTACHED_GAS.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_ATTACHED_GAS", "alias": "fact_transactions_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.7442613, "column_name": "ATTACHED_GAS", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.7112e3bcc2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_75a35091574b2f35ca699cf913c5e842\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_75a35091574b2f35ca699cf913c5e842", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.7112e3bcc2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_75a35091574b2f35ca699cf913c5e842.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT", "alias": "fact_transactions_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_75a35091574b2f35ca699cf913c5e842"}, "created_at": 1658508767.7469707, "column_name": "ATTACHED_GAS", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_TRANSACTION_FEE.026038f06e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_TRANSACTION_FEE"], "unique_id": "test.near.not_null_legacy__fact_transactions_TRANSACTION_FEE.026038f06e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_TRANSACTION_FEE.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_TRANSACTION_FEE", "alias": "fact_transactions_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.7540007, "column_name": "TRANSACTION_FEE", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.4bb3f91f80": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_39cbaa4a62e00e8b6f6b6e5f3305fd2c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_39cbaa4a62e00e8b6f6b6e5f3305fd2c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.4bb3f91f80", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_39cbaa4a62e00e8b6f6b6e5f3305fd2c.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT", "alias": "fact_transactions_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_39cbaa4a62e00e8b6f6b6e5f3305fd2c"}, "created_at": 1658508767.7567477, "column_name": "TRANSACTION_FEE", "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_transactions_INGESTED_AT.18e806fe80": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transactions_INGESTED_AT"], "unique_id": "test.near.not_null_legacy__fact_transactions_INGESTED_AT.18e806fe80", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transactions_INGESTED_AT.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "not_null_legacy__fact_transactions_INGESTED_AT", "alias": "fact_transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.7638125, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_INGESTED_AT__TIMESTAMP_NTZ.3cce6e8e12": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bb01ccac7732f4a6ee55da66384c2176\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_bb01ccac7732f4a6ee55da66384c2176", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_INGESTED_AT__TIMESTAMP_NTZ.3cce6e8e12", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bb01ccac7732f4a6ee55da66384c2176.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_INGESTED_AT__TIMESTAMP_NTZ", "alias": "fact_transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bb01ccac7732f4a6ee55da66384c2176"}, "created_at": 1658508767.7665246, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_transactions"}, "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transactions_txn_hash.920aa0eac1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b4af093bd6cdf93530b70fddaa3ef368\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["txn_hash"], "model": "{{ get_where_subquery(ref('legacy__fact_transactions')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_b4af093bd6cdf93530b70fddaa3ef368", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_legacy", "fqn": ["near", "legacy", "dbt_utils_unique_combination_of_columns_legacy__fact_transactions_txn_hash"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transactions_txn_hash.920aa0eac1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_b4af093bd6cdf93530b70fddaa3ef368.sql", "original_file_path": "models/legacy/legacy__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_legacy__fact_transactions_txn_hash", "alias": "fact_transactions_txn_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_b4af093bd6cdf93530b70fddaa3ef368"}, "created_at": 1658508767.7731338, "column_name": null, "file_key_name": "models.legacy__fact_transactions"}, "test.near.not_null_legacy__fact_receipts_BLOCK_TIMESTAMP.0a993c019c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_legacy__fact_receipts_BLOCK_TIMESTAMP.0a993c019c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_BLOCK_TIMESTAMP.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_BLOCK_TIMESTAMP", "alias": "fact_receipts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.7885556, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e94352b542": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b6bdf263ec5b180488e001509d5c27a0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_b6bdf263ec5b180488e001509d5c27a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e94352b542", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b6bdf263ec5b180488e001509d5c27a0.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_receipts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b6bdf263ec5b180488e001509d5c27a0"}, "created_at": 1658508767.7913883, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_BLOCK_HASH.b3bb9714b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_BLOCK_HASH"], "unique_id": "test.near.not_null_legacy__fact_receipts_BLOCK_HASH.b3bb9714b6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_BLOCK_HASH.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_BLOCK_HASH", "alias": "fact_receipts_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.7981584, "column_name": "BLOCK_HASH", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_HASH__STRING__VARCHAR.bf119892a0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7635504fad94b1db66137c6a2a13d218\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_7635504fad94b1db66137c6a2a13d218", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_HASH__STRING__VARCHAR.bf119892a0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7635504fad94b1db66137c6a2a13d218.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_HASH__STRING__VARCHAR", "alias": "fact_receipts_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7635504fad94b1db66137c6a2a13d218"}, "created_at": 1658508767.80097, "column_name": "BLOCK_HASH", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_TXN_HASH.be70ce3052": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_TXN_HASH"], "unique_id": "test.near.not_null_legacy__fact_receipts_TXN_HASH.be70ce3052", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_TXN_HASH.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_TXN_HASH", "alias": "fact_receipts_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.8081212, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_TXN_HASH__STRING__VARCHAR.35121e913f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_54cd73824fbbc4067cfcc795d423581b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_54cd73824fbbc4067cfcc795d423581b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_TXN_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_TXN_HASH__STRING__VARCHAR.35121e913f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_54cd73824fbbc4067cfcc795d423581b.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_TXN_HASH__STRING__VARCHAR", "alias": "fact_receipts_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_54cd73824fbbc4067cfcc795d423581b"}, "created_at": 1658508767.8108451, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_RECEIPT_OBJECT_ID.ca05b958b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_RECEIPT_OBJECT_ID"], "unique_id": "test.near.not_null_legacy__fact_receipts_RECEIPT_OBJECT_ID.ca05b958b0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_RECEIPT_OBJECT_ID", "alias": "fact_receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.8178482, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.legacy__fact_receipts"}, "test.near.unique_legacy__fact_receipts_RECEIPT_OBJECT_ID.0406b31ae4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_legacy", "fqn": ["near", "legacy", "unique_legacy__fact_receipts_RECEIPT_OBJECT_ID"], "unique_id": "test.near.unique_legacy__fact_receipts_RECEIPT_OBJECT_ID.0406b31ae4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_legacy__fact_receipts_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "unique_legacy__fact_receipts_RECEIPT_OBJECT_ID", "alias": "fact_receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.8205502, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.a2943d41f6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c81793a04668e4eb44e1b3af7ef2741\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_6c81793a04668e4eb44e1b3af7ef2741", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.a2943d41f6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6c81793a04668e4eb44e1b3af7ef2741.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR", "alias": "fact_receipts_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6c81793a04668e4eb44e1b3af7ef2741"}, "created_at": 1658508767.8232396, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_RECEIPT_OUTCOME_ID.a03ccee4f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OUTCOME_ID", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_RECEIPT_OUTCOME_ID"], "unique_id": "test.near.not_null_legacy__fact_receipts_RECEIPT_OUTCOME_ID.a03ccee4f9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_RECEIPT_OUTCOME_ID.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_RECEIPT_OUTCOME_ID", "alias": "fact_receipts_RECEIPT_OUTCOME_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.8303216, "column_name": "RECEIPT_OUTCOME_ID", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.6fe6c1421a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7360b4db83a9f4b943def89abc483647\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "RECEIPT_OUTCOME_ID", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_7360b4db83a9f4b943def89abc483647", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.6fe6c1421a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7360b4db83a9f4b943def89abc483647.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT", "alias": "fact_receipts_RECEIPT_OUTCOME_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7360b4db83a9f4b943def89abc483647"}, "created_at": 1658508767.8330503, "column_name": "RECEIPT_OUTCOME_ID", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_STATUS_VALUE.0d7d7478f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS_VALUE", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_STATUS_VALUE"], "unique_id": "test.near.not_null_legacy__fact_receipts_STATUS_VALUE.0d7d7478f9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_STATUS_VALUE.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_STATUS_VALUE", "alias": "fact_receipts_STATUS_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.840553, "column_name": "STATUS_VALUE", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.a0ee8199b8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c4e19035bee9464cee4e956f15dc2ccb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT", "OBJECT"], "column_name": "STATUS_VALUE", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_c4e19035bee9464cee4e956f15dc2ccb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_STATUS_VALUE__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.a0ee8199b8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c4e19035bee9464cee4e956f15dc2ccb.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_STATUS_VALUE__VARIANT__OBJECT", "alias": "fact_receipts_STATUS_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c4e19035bee9464cee4e956f15dc2ccb"}, "created_at": 1658508767.8432615, "column_name": "STATUS_VALUE", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_LOGS.d78268315a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOGS", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_LOGS"], "unique_id": "test.near.not_null_legacy__fact_receipts_LOGS.d78268315a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_LOGS.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_LOGS", "alias": "fact_receipts_LOGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.8502905, "column_name": "LOGS", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.f83a3bef09": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_97edf05b54c40237adf160f709f03867\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "LOGS", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_97edf05b54c40237adf160f709f03867", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.f83a3bef09", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_97edf05b54c40237adf160f709f03867.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT", "alias": "fact_receipts_LOGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_97edf05b54c40237adf160f709f03867"}, "created_at": 1658508767.853011, "column_name": "LOGS", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_PROOF.a87d9a5d78": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROOF", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_PROOF"], "unique_id": "test.near.not_null_legacy__fact_receipts_PROOF.a87d9a5d78", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_PROOF.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_PROOF", "alias": "fact_receipts_PROOF", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.860522, "column_name": "PROOF", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.2b1b4ea49a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1a1455bd1cb1f54a2e36ac8fd1066fd8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "PROOF", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_1a1455bd1cb1f54a2e36ac8fd1066fd8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.2b1b4ea49a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1a1455bd1cb1f54a2e36ac8fd1066fd8.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT", "alias": "fact_receipts_PROOF", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1a1455bd1cb1f54a2e36ac8fd1066fd8"}, "created_at": 1658508767.8632336, "column_name": "PROOF", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_METADATA.f0a09f639b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METADATA", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_METADATA"], "unique_id": "test.near.not_null_legacy__fact_receipts_METADATA.f0a09f639b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_METADATA.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_METADATA", "alias": "fact_receipts_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.8706563, "column_name": "METADATA", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_METADATA__VARIANT__OBJECT.7c60b3b5d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2748b44057000e9fe0ff316389a839dc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT", "OBJECT"], "column_name": "METADATA", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_2748b44057000e9fe0ff316389a839dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_METADATA__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_METADATA__VARIANT__OBJECT.7c60b3b5d3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2748b44057000e9fe0ff316389a839dc.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_METADATA__VARIANT__OBJECT", "alias": "fact_receipts_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2748b44057000e9fe0ff316389a839dc"}, "created_at": 1658508767.8738165, "column_name": "METADATA", "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__fact_receipts_INGESTED_AT.ca007600fa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_receipts_INGESTED_AT"], "unique_id": "test.near.not_null_legacy__fact_receipts_INGESTED_AT.ca007600fa", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_receipts_INGESTED_AT.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "not_null_legacy__fact_receipts_INGESTED_AT", "alias": "fact_receipts_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.880564, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_INGESTED_AT__TIMESTAMP_NTZ.0c3ae85bc8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a14ee34fdb4f866bdda4025a68069bfb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a14ee34fdb4f866bdda4025a68069bfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_INGESTED_AT__TIMESTAMP_NTZ.0c3ae85bc8", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a14ee34fdb4f866bdda4025a68069bfb.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_INGESTED_AT__TIMESTAMP_NTZ", "alias": "fact_receipts_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a14ee34fdb4f866bdda4025a68069bfb"}, "created_at": 1658508767.8836021, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_receipts"}, "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_receipts_receipt_object_id.6f207b9f68": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_122b5b40de8bad2f8a50d6489e0d78ed\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["receipt_object_id"], "model": "{{ get_where_subquery(ref('legacy__fact_receipts')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_122b5b40de8bad2f8a50d6489e0d78ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_legacy", "fqn": ["near", "legacy", "dbt_utils_unique_combination_of_columns_legacy__fact_receipts_receipt_object_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_receipts_receipt_object_id.6f207b9f68", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_122b5b40de8bad2f8a50d6489e0d78ed.sql", "original_file_path": "models/legacy/legacy__receipts.yml", "name": "dbt_utils_unique_combination_of_columns_legacy__fact_receipts_receipt_object_id", "alias": "fact_receipts_receipt_object_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_receipts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_122b5b40de8bad2f8a50d6489e0d78ed"}, "created_at": 1658508767.8897884, "column_name": null, "file_key_name": "models.legacy__fact_receipts"}, "test.near.not_null_legacy__metrics_daily_gas_DATE.b7ce3e8705": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_daily_gas_DATE"], "unique_id": "test.near.not_null_legacy__metrics_daily_gas_DATE.b7ce3e8705", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_daily_gas_DATE.sql", "original_file_path": "models/legacy/legacy__metrics_daily_gas.yml", "name": "not_null_legacy__metrics_daily_gas_DATE", "alias": "metrics_daily_gas_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_gas.yml/not_null_legacy__metrics_daily_gas_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.8990355, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.legacy.metrics_daily_gas\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.legacy__metrics_daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DATE__TIMESTAMP_NTZ.6c3efd0549": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_22bd2448dd063410ec693d192c580efc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_22bd2448dd063410ec693d192c580efc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DATE__TIMESTAMP_NTZ.6c3efd0549", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_22bd2448dd063410ec693d192c580efc.sql", "original_file_path": "models/legacy/legacy__metrics_daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DATE__TIMESTAMP_NTZ", "alias": "metrics_daily_gas_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_gas.yml/dbt_expectations_expect_column_22bd2448dd063410ec693d192c580efc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_22bd2448dd063410ec693d192c580efc"}, "created_at": 1658508767.902709, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.legacy__metrics_daily_gas"}, "test.near.not_null_legacy__metrics_daily_gas_DAILY_GAS_USED.8dde196c1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_GAS_USED", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_daily_gas_DAILY_GAS_USED"], "unique_id": "test.near.not_null_legacy__metrics_daily_gas_DAILY_GAS_USED.8dde196c1f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_daily_gas_DAILY_GAS_USED.sql", "original_file_path": "models/legacy/legacy__metrics_daily_gas.yml", "name": "not_null_legacy__metrics_daily_gas_DAILY_GAS_USED", "alias": "metrics_daily_gas_DAILY_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_gas.yml/not_null_legacy__metrics_daily_gas_DAILY_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.9089975, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_GAS_USED\nfrom NEAR.legacy.metrics_daily_gas\nwhere DAILY_GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_GAS_USED", "file_key_name": "models.legacy__metrics_daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dee5e60275": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f822942be358b50ea4ae9d72ad7552da\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_GAS_USED", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f822942be358b50ea4ae9d72ad7552da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dee5e60275", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f822942be358b50ea4ae9d72ad7552da.sql", "original_file_path": "models/legacy/legacy__metrics_daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT", "alias": "metrics_daily_gas_DAILY_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_gas.yml/dbt_expectations_expect_column_f822942be358b50ea4ae9d72ad7552da.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f822942be358b50ea4ae9d72ad7552da"}, "created_at": 1658508767.912095, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_GAS_USED", "file_key_name": "models.legacy__metrics_daily_gas"}, "test.near.not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE.224ef8b8fa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVG_GAS_PRICE", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_gas')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_gas"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE"], "unique_id": "test.near.not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE.224ef8b8fa", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE.sql", "original_file_path": "models/legacy/legacy__metrics_daily_gas.yml", "name": "not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE", "alias": "metrics_daily_gas_AVG_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_gas.yml/not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.9187438, "compiled_sql": "\n    \n    \n\n\n\nselect AVG_GAS_PRICE\nfrom NEAR.legacy.metrics_daily_gas\nwhere AVG_GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AVG_GAS_PRICE", "file_key_name": "models.legacy__metrics_daily_gas"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fc74c08c1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bdeffc30814985c9cae82c98e1380134\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AVG_GAS_PRICE", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_gas')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_gas"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bdeffc30814985c9cae82c98e1380134", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fc74c08c1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_bdeffc30814985c9cae82c98e1380134.sql", "original_file_path": "models/legacy/legacy__metrics_daily_gas.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT", "alias": "metrics_daily_gas_AVG_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_gas"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_gas.yml/dbt_expectations_expect_column_bdeffc30814985c9cae82c98e1380134.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_bdeffc30814985c9cae82c98e1380134"}, "created_at": 1658508767.9218216, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('AVG_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DAILY_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AVG_GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AVG_GAS_PRICE", "file_key_name": "models.legacy__metrics_daily_gas"}, "test.near.unique_legacy__actions_events_addkey_ACTION_ID.40bbecd7f5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_legacy", "fqn": ["near", "legacy", "unique_legacy__actions_events_addkey_ACTION_ID"], "unique_id": "test.near.unique_legacy__actions_events_addkey_ACTION_ID.40bbecd7f5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_legacy__actions_events_addkey_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "unique_legacy__actions_events_addkey_ACTION_ID", "alias": "actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/unique_legacy__actions_events_addkey_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.9355855, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.legacy.actions_events_addkey\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.not_null_legacy__actions_events_addkey_ACTION_ID.dc8eb8f528": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_addkey_ACTION_ID"], "unique_id": "test.near.not_null_legacy__actions_events_addkey_ACTION_ID.dc8eb8f528", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_addkey_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "not_null_legacy__actions_events_addkey_ACTION_ID", "alias": "actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/not_null_legacy__actions_events_addkey_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.938303, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.legacy.actions_events_addkey\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ACTION_ID__STRING__VARCHAR.3f1dab391f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_592956283406638fd28158071e96dbba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_592956283406638fd28158071e96dbba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ACTION_ID__STRING__VARCHAR.3f1dab391f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_592956283406638fd28158071e96dbba.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ACTION_ID__STRING__VARCHAR", "alias": "actions_events_addkey_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_592956283406638fd28158071e96dbba.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_592956283406638fd28158071e96dbba"}, "created_at": 1658508767.9413226, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.not_null_legacy__actions_events_addkey_TXN_HASH.2faf69db95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_addkey_TXN_HASH"], "unique_id": "test.near.not_null_legacy__actions_events_addkey_TXN_HASH.2faf69db95", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_addkey_TXN_HASH.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "not_null_legacy__actions_events_addkey_TXN_HASH", "alias": "actions_events_addkey_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/not_null_legacy__actions_events_addkey_TXN_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.9480278, "compiled_sql": "\n    \n    \n\n\n\nselect TXN_HASH\nfrom NEAR.legacy.actions_events_addkey\nwhere TXN_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TXN_HASH", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_TXN_HASH__STRING__VARCHAR.2fb84e452c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_334f662394aedcd4bdf81752e46f7e72\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_334f662394aedcd4bdf81752e46f7e72", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_TXN_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_TXN_HASH__STRING__VARCHAR.2fb84e452c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_334f662394aedcd4bdf81752e46f7e72.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_TXN_HASH__STRING__VARCHAR", "alias": "actions_events_addkey_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_334f662394aedcd4bdf81752e46f7e72.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_334f662394aedcd4bdf81752e46f7e72"}, "created_at": 1658508767.9510517, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TXN_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TXN_HASH", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP.5b0fded5e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP.5b0fded5e2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP", "alias": "actions_events_addkey_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.9578142, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.legacy.actions_events_addkey\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.061fffe0f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ab346010784021a8e70e6b9c4d7eecd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ab346010784021a8e70e6b9c4d7eecd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.061fffe0f5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3ab346010784021a8e70e6b9c4d7eecd.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events_addkey_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_3ab346010784021a8e70e6b9c4d7eecd.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3ab346010784021a8e70e6b9c4d7eecd"}, "created_at": 1658508767.9609108, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.not_null_legacy__actions_events_addkey_NONCE.d16bc1a85f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_addkey_NONCE"], "unique_id": "test.near.not_null_legacy__actions_events_addkey_NONCE.d16bc1a85f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_addkey_NONCE.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "not_null_legacy__actions_events_addkey_NONCE", "alias": "actions_events_addkey_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/not_null_legacy__actions_events_addkey_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.9672444, "compiled_sql": "\n    \n    \n\n\n\nselect NONCE\nfrom NEAR.legacy.actions_events_addkey\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_NONCE__NUMBER__FLOAT.2ec337e9fb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58ab6bdfa106164d1407d9018111ba49\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58ab6bdfa106164d1407d9018111ba49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_NONCE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_NONCE__NUMBER__FLOAT.2ec337e9fb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_58ab6bdfa106164d1407d9018111ba49.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_NONCE__NUMBER__FLOAT", "alias": "actions_events_addkey_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_58ab6bdfa106164d1407d9018111ba49.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_58ab6bdfa106164d1407d9018111ba49"}, "created_at": 1658508767.9703474, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.8c9f09e891": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d5058c23fc390a0ceeca695017034df\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "PUBLIC_KEY", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d5058c23fc390a0ceeca695017034df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.8c9f09e891", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3d5058c23fc390a0ceeca695017034df.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None", "alias": "actions_events_addkey_PUBLIC_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_3d5058c23fc390a0ceeca695017034df.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3d5058c23fc390a0ceeca695017034df"}, "created_at": 1658508767.9774961, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PUBLIC_KEY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PUBLIC_KEY", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.not_null_legacy__actions_events_addkey_PERMISSION.4e70882555": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PERMISSION", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_addkey_PERMISSION"], "unique_id": "test.near.not_null_legacy__actions_events_addkey_PERMISSION.4e70882555", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_addkey_PERMISSION.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "not_null_legacy__actions_events_addkey_PERMISSION", "alias": "actions_events_addkey_PERMISSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/not_null_legacy__actions_events_addkey_PERMISSION.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508767.984257, "compiled_sql": "\n    \n    \n\n\n\nselect PERMISSION\nfrom NEAR.legacy.actions_events_addkey\nwhere PERMISSION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PERMISSION", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.3432f433a3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fded303798390830f2597e45385129bc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", "OBJECT", "VARIANT"], "column_name": "PERMISSION", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fded303798390830f2597e45385129bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.3432f433a3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_fded303798390830f2597e45385129bc.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT", "alias": "actions_events_addkey_PERMISSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_fded303798390830f2597e45385129bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_fded303798390830f2597e45385129bc"}, "created_at": 1658508767.987339, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PERMISSION'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'OBJECT', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PERMISSION", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.595b784062": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8184892adaedbe2206807644b1a36889\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT", null], "column_name": "ALLOWANCE", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8184892adaedbe2206807644b1a36889", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.595b784062", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8184892adaedbe2206807644b1a36889.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None", "alias": "actions_events_addkey_ALLOWANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_8184892adaedbe2206807644b1a36889.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8184892adaedbe2206807644b1a36889"}, "created_at": 1658508767.9950206, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ALLOWANCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ALLOWANCE", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.131f54ed4c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0722a146e3382e13be8cc1db66993a2e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT", null], "column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0722a146e3382e13be8cc1db66993a2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.131f54ed4c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0722a146e3382e13be8cc1db66993a2e.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None", "alias": "actions_events_addkey_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_0722a146e3382e13be8cc1db66993a2e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0722a146e3382e13be8cc1db66993a2e"}, "created_at": 1658508768.0020669, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METHOD_NAME'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.484af82c3f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_73690134558338cab723ffea3a39b365\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "RECEIVER_ID", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_73690134558338cab723ffea3a39b365", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.484af82c3f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_73690134558338cab723ffea3a39b365.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None", "alias": "actions_events_addkey_RECEIVER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_73690134558338cab723ffea3a39b365.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_73690134558338cab723ffea3a39b365"}, "created_at": 1658508768.0094807, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIVER_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR', 'NONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIVER_ID", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.not_null_legacy__actions_events_addkey_INGESTED_AT.44974f3f39": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_addkey_INGESTED_AT"], "unique_id": "test.near.not_null_legacy__actions_events_addkey_INGESTED_AT.44974f3f39", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_addkey_INGESTED_AT.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "not_null_legacy__actions_events_addkey_INGESTED_AT", "alias": "actions_events_addkey_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/not_null_legacy__actions_events_addkey_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.0167637, "compiled_sql": "\n    \n    \n\n\n\nselect INGESTED_AT\nfrom NEAR.legacy.actions_events_addkey\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_INGESTED_AT__TIMESTAMP_NTZ.a51c00d639": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12eb5935f35f7ce74321f2041756fcf7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12eb5935f35f7ce74321f2041756fcf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_INGESTED_AT__TIMESTAMP_NTZ.a51c00d639", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_12eb5935f35f7ce74321f2041756fcf7.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_INGESTED_AT__TIMESTAMP_NTZ", "alias": "actions_events_addkey_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_expectations_expect_column_12eb5935f35f7ce74321f2041756fcf7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_12eb5935f35f7ce74321f2041756fcf7"}, "created_at": 1658508768.0194998, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLIC_KEY' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PERMISSION' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ALLOWANCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('ARRAY' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_addkey_action_id.fbca6bc6f5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a58218a708b24761eb15e02cb7198219\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('legacy__actions_events_addkey')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_addkey"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a58218a708b24761eb15e02cb7198219", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_legacy", "fqn": ["near", "legacy", "dbt_utils_unique_combination_of_columns_legacy__actions_events_addkey_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_addkey_action_id.fbca6bc6f5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_a58218a708b24761eb15e02cb7198219.sql", "original_file_path": "models/legacy/legacy__actions_events_addkey.yml", "name": "dbt_utils_unique_combination_of_columns_legacy__actions_events_addkey_action_id", "alias": "actions_events_addkey_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_addkey"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_addkey.yml/dbt_utils_unique_combination_o_a58218a708b24761eb15e02cb7198219.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_a58218a708b24761eb15e02cb7198219"}, "created_at": 1658508768.0259976, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.legacy.actions_events_addkey\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.legacy__actions_events_addkey"}, "test.near.not_null_legacy__metrics_daily_transactions_DATE.c07730a5cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_daily_transactions_DATE"], "unique_id": "test.near.not_null_legacy__metrics_daily_transactions_DATE.c07730a5cb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_daily_transactions_DATE.sql", "original_file_path": "models/legacy/legacy__metrics_daily_transactions.yml", "name": "not_null_legacy__metrics_daily_transactions_DATE", "alias": "metrics_daily_transactions_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_transactions.yml/not_null_legacy__metrics_daily_transactions_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.0347033, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.legacy.metrics_daily_transactions\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.legacy__metrics_daily_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.214854c836": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_934e15707b2565a8e93a833ff351cef4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_934e15707b2565a8e93a833ff351cef4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.214854c836", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_934e15707b2565a8e93a833ff351cef4.sql", "original_file_path": "models/legacy/legacy__metrics_daily_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DATE__TIMESTAMP_NTZ", "alias": "metrics_daily_transactions_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_transactions.yml/dbt_expectations_expect_column_934e15707b2565a8e93a833ff351cef4.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_934e15707b2565a8e93a833ff351cef4"}, "created_at": 1658508768.03745, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_TRANSACTIONS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.legacy__metrics_daily_transactions"}, "test.near.not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS.1fc65733ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_TRANSACTIONS", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS"], "unique_id": "test.near.not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS.1fc65733ab", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS.sql", "original_file_path": "models/legacy/legacy__metrics_daily_transactions.yml", "name": "not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS", "alias": "metrics_daily_transactions_DAILY_TRANSACTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_transactions.yml/not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.0439577, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_TRANSACTIONS\nfrom NEAR.legacy.metrics_daily_transactions\nwhere DAILY_TRANSACTIONS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_TRANSACTIONS", "file_key_name": "models.legacy__metrics_daily_transactions"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.b78d14e061": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca3a98e5a0eab3c2d482de35fd9b4ecc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_TRANSACTIONS", "model": "{{ get_where_subquery(ref('legacy__metrics_daily_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_daily_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca3a98e5a0eab3c2d482de35fd9b4ecc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.b78d14e061", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ca3a98e5a0eab3c2d482de35fd9b4ecc.sql", "original_file_path": "models/legacy/legacy__metrics_daily_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT", "alias": "metrics_daily_transactions_DAILY_TRANSACTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_daily_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_daily_transactions.yml/dbt_expectations_expect_column_ca3a98e5a0eab3c2d482de35fd9b4ecc.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ca3a98e5a0eab3c2d482de35fd9b4ecc"}, "created_at": 1658508768.04666, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_TRANSACTIONS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_TRANSACTIONS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_TRANSACTIONS", "file_key_name": "models.legacy__metrics_daily_transactions"}, "test.near.not_null_legacy__metrics_active_wallets_DATE.8088614fba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_active_wallets_DATE"], "unique_id": "test.near.not_null_legacy__metrics_active_wallets_DATE.8088614fba", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_active_wallets_DATE.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "not_null_legacy__metrics_active_wallets_DATE", "alias": "metrics_active_wallets_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/not_null_legacy__metrics_active_wallets_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.0568943, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom NEAR.legacy.metrics_active_wallets\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DATE__TIMESTAMP_NTZ.6bef460b85": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0f7ffe032c14f777ca758fe57c700f1e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "DATE", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f7ffe032c14f777ca758fe57c700f1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DATE__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DATE__TIMESTAMP_NTZ.6bef460b85", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0f7ffe032c14f777ca758fe57c700f1e.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DATE__TIMESTAMP_NTZ", "alias": "metrics_active_wallets_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/dbt_expectations_expect_column_0f7ffe032c14f777ca758fe57c700f1e.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0f7ffe032c14f777ca758fe57c700f1e"}, "created_at": 1658508768.0600085, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS.4936c0f6c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAILY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS.4936c0f6c7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS", "alias": "metrics_active_wallets_DAILY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.0662727, "compiled_sql": "\n    \n    \n\n\n\nselect DAILY_ACTIVE_WALLETS\nfrom NEAR.legacy.metrics_active_wallets\nwhere DAILY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_ACTIVE_WALLETS", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.cff654759a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b371672049693f08f17b5b0cb16efaf7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DAILY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b371672049693f08f17b5b0cb16efaf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.cff654759a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b371672049693f08f17b5b0cb16efaf7.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "metrics_active_wallets_DAILY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/dbt_expectations_expect_column_b371672049693f08f17b5b0cb16efaf7.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b371672049693f08f17b5b0cb16efaf7"}, "created_at": 1658508768.06938, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DAILY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DAILY_ACTIVE_WALLETS", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.not_null_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.66a6e18833": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_legacy__metrics_activ_8d0da4de23add356020125e69abc9904\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "not_null_legacy__metrics_activ_8d0da4de23add356020125e69abc9904", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.66a6e18833", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_activ_8d0da4de23add356020125e69abc9904.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "not_null_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "alias": "metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/not_null_legacy__metrics_activ_8d0da4de23add356020125e69abc9904.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "not_null_legacy__metrics_activ_8d0da4de23add356020125e69abc9904"}, "created_at": 1658508768.0761268, "compiled_sql": "\n    \n    \n\n\n\nselect ROLLING_7DAY_ACTIVE_WALLETS\nfrom NEAR.legacy.metrics_active_wallets\nwhere ROLLING_7DAY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.882a8911ad": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b04260c02f6f95fca158a6fdca30f4b1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b04260c02f6f95fca158a6fdca30f4b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.882a8911ad", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b04260c02f6f95fca158a6fdca30f4b1.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/dbt_expectations_expect_column_b04260c02f6f95fca158a6fdca30f4b1.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b04260c02f6f95fca158a6fdca30f4b1"}, "created_at": 1658508768.0792408, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ROLLING_7DAY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_7DAY_ACTIVE_WALLETS", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.not_null_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.4591283c55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_legacy__metrics_activ_1f1c84221f72fc159ac9bd1d2a051ea5\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "not_null_legacy__metrics_activ_1f1c84221f72fc159ac9bd1d2a051ea5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS"], "unique_id": "test.near.not_null_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.4591283c55", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__metrics_activ_1f1c84221f72fc159ac9bd1d2a051ea5.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "not_null_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "alias": "metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/not_null_legacy__metrics_activ_1f1c84221f72fc159ac9bd1d2a051ea5.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "not_null_legacy__metrics_activ_1f1c84221f72fc159ac9bd1d2a051ea5"}, "created_at": 1658508768.0860276, "compiled_sql": "\n    \n    \n\n\n\nselect ROLLING_30DAY_ACTIVE_WALLETS\nfrom NEAR.legacy.metrics_active_wallets\nwhere ROLLING_30DAY_ACTIVE_WALLETS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.5b88245628": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6aab9c76b153efc580883c9b16f64aef\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "model": "{{ get_where_subquery(ref('legacy__metrics_active_wallets')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__metrics_active_wallets"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6aab9c76b153efc580883c9b16f64aef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.5b88245628", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6aab9c76b153efc580883c9b16f64aef.sql", "original_file_path": "models/legacy/legacy__metrics_active_wallets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT", "alias": "metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__metrics_active_wallets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__metrics_active_wallets.yml/dbt_expectations_expect_column_6aab9c76b153efc580883c9b16f64aef.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6aab9c76b153efc580883c9b16f64aef"}, "created_at": 1658508768.0891109, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DAILY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_30DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROLLING_7DAY_ACTIVE_WALLETS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ROLLING_30DAY_ACTIVE_WALLETS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ROLLING_30DAY_ACTIVE_WALLETS", "file_key_name": "models.legacy__metrics_active_wallets"}, "test.near.unique_legacy__fact_actions_events_ACTION_ID.7a6ef791b6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_legacy", "fqn": ["near", "legacy", "unique_legacy__fact_actions_events_ACTION_ID"], "unique_id": "test.near.unique_legacy__fact_actions_events_ACTION_ID.7a6ef791b6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_legacy__fact_actions_events_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "unique_legacy__fact_actions_events_ACTION_ID", "alias": "fact_actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.1018505, "column_name": "ACTION_ID", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_actions_events_ACTION_ID.c704b98de5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_actions_events_ACTION_ID"], "unique_id": "test.near.not_null_legacy__fact_actions_events_ACTION_ID.c704b98de5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_actions_events_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "not_null_legacy__fact_actions_events_ACTION_ID", "alias": "fact_actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.1045835, "column_name": "ACTION_ID", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_ID__STRING__VARCHAR.104e8d459b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_475429e23661b087ae1f6f464997bf0e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_475429e23661b087ae1f6f464997bf0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_ID__STRING__VARCHAR.104e8d459b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_475429e23661b087ae1f6f464997bf0e.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_ID__STRING__VARCHAR", "alias": "fact_actions_events_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_475429e23661b087ae1f6f464997bf0e"}, "created_at": 1658508768.1075835, "column_name": "ACTION_ID", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_actions_events_TXN_HASH.689b1e068c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_actions_events_TXN_HASH"], "unique_id": "test.near.not_null_legacy__fact_actions_events_TXN_HASH.689b1e068c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_actions_events_TXN_HASH.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "not_null_legacy__fact_actions_events_TXN_HASH", "alias": "fact_actions_events_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.1143737, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_TXN_HASH__STRING__VARCHAR.77878f662a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_176fc18b413edc9ef3993a6b67e85b15\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_176fc18b413edc9ef3993a6b67e85b15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_TXN_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_TXN_HASH__STRING__VARCHAR.77878f662a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_176fc18b413edc9ef3993a6b67e85b15.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_TXN_HASH__STRING__VARCHAR", "alias": "fact_actions_events_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_176fc18b413edc9ef3993a6b67e85b15"}, "created_at": 1658508768.117408, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_actions_events_BLOCK_TIMESTAMP.38bc1deb2d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_actions_events_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_legacy__fact_actions_events_BLOCK_TIMESTAMP.38bc1deb2d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_actions_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "not_null_legacy__fact_actions_events_BLOCK_TIMESTAMP", "alias": "fact_actions_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.1242018, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.da1290b149": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_13ee3c8c836eef1ef19d06ee990dc7dd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_13ee3c8c836eef1ef19d06ee990dc7dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.da1290b149", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_13ee3c8c836eef1ef19d06ee990dc7dd.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_actions_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_13ee3c8c836eef1ef19d06ee990dc7dd"}, "created_at": 1658508768.1277475, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_actions_events_ACTION_INDEX.d33d9ab9c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_INDEX", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_actions_events_ACTION_INDEX"], "unique_id": "test.near.not_null_legacy__fact_actions_events_ACTION_INDEX.d33d9ab9c5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_actions_events_ACTION_INDEX.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "not_null_legacy__fact_actions_events_ACTION_INDEX", "alias": "fact_actions_events_ACTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.133978, "column_name": "ACTION_INDEX", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_INDEX__NUMBER.6a60f2bc0c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d521dc30e35313f17a069fb213d34eff\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "ACTION_INDEX", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_d521dc30e35313f17a069fb213d34eff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_INDEX__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_INDEX__NUMBER.6a60f2bc0c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d521dc30e35313f17a069fb213d34eff.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_INDEX__NUMBER", "alias": "fact_actions_events_ACTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d521dc30e35313f17a069fb213d34eff"}, "created_at": 1658508768.1370573, "column_name": "ACTION_INDEX", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_actions_events_ACTION_NAME.3f266126d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_actions_events_ACTION_NAME"], "unique_id": "test.near.not_null_legacy__fact_actions_events_ACTION_NAME.3f266126d5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_actions_events_ACTION_NAME.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "not_null_legacy__fact_actions_events_ACTION_NAME", "alias": "fact_actions_events_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.1433358, "column_name": "ACTION_NAME", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_NAME__STRING__VARCHAR.b942c238b0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2e669d1ecfb484e1af8952e2b694e627\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_2e669d1ecfb484e1af8952e2b694e627", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_NAME__STRING__VARCHAR.b942c238b0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2e669d1ecfb484e1af8952e2b694e627.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_NAME__STRING__VARCHAR", "alias": "fact_actions_events_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2e669d1ecfb484e1af8952e2b694e627"}, "created_at": 1658508768.1463678, "column_name": "ACTION_NAME", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_actions_events_ACTION_DATA.291c032316": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_DATA", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_actions_events_ACTION_DATA"], "unique_id": "test.near.not_null_legacy__fact_actions_events_ACTION_DATA.291c032316", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_actions_events_ACTION_DATA.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "not_null_legacy__fact_actions_events_ACTION_DATA", "alias": "fact_actions_events_ACTION_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.1530635, "column_name": "ACTION_DATA", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.cc5dcc3177": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ecac8381ca7daaa6935212cae1f59b93\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT", "VARIANT"], "column_name": "ACTION_DATA", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_ecac8381ca7daaa6935212cae1f59b93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_DATA__OBJECT__VARIANT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.cc5dcc3177", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ecac8381ca7daaa6935212cae1f59b93.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_DATA__OBJECT__VARIANT", "alias": "fact_actions_events_ACTION_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ecac8381ca7daaa6935212cae1f59b93"}, "created_at": 1658508768.156156, "column_name": "ACTION_DATA", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_actions_events_INGESTED_AT.c7a191a7b2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_actions_events_INGESTED_AT"], "unique_id": "test.near.not_null_legacy__fact_actions_events_INGESTED_AT.c7a191a7b2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_actions_events_INGESTED_AT.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "not_null_legacy__fact_actions_events_INGESTED_AT", "alias": "fact_actions_events_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.1632888, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_INGESTED_AT__TIMESTAMP_NTZ.5635930a89": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14fd71d44289fb3c6e5e23431c8cc86b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_14fd71d44289fb3c6e5e23431c8cc86b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_INGESTED_AT__TIMESTAMP_NTZ.5635930a89", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_14fd71d44289fb3c6e5e23431c8cc86b.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_INGESTED_AT__TIMESTAMP_NTZ", "alias": "fact_actions_events_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_14fd71d44289fb3c6e5e23431c8cc86b"}, "created_at": 1658508768.1660037, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_actions_events"}, "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_actions_events_action_id.df6ecf13a3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3a899a44aec44ce7ad9ab4ff9798e9da\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('legacy__fact_actions_events')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_3a899a44aec44ce7ad9ab4ff9798e9da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_legacy", "fqn": ["near", "legacy", "dbt_utils_unique_combination_of_columns_legacy__fact_actions_events_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_actions_events_action_id.df6ecf13a3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_3a899a44aec44ce7ad9ab4ff9798e9da.sql", "original_file_path": "models/legacy/legacy__actions_events.yml", "name": "dbt_utils_unique_combination_of_columns_legacy__fact_actions_events_action_id", "alias": "fact_actions_events_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_actions_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_3a899a44aec44ce7ad9ab4ff9798e9da"}, "created_at": 1658508768.1726413, "column_name": null, "file_key_name": "models.legacy__fact_actions_events"}, "test.near.not_null_legacy__fact_blocks_BLOCK_HEIGHT.0c72c24b53": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_BLOCK_HEIGHT"], "unique_id": "test.near.not_null_legacy__fact_blocks_BLOCK_HEIGHT.0c72c24b53", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_BLOCK_HEIGHT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_BLOCK_HEIGHT", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2001777, "column_name": "BLOCK_HEIGHT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HEIGHT__NUMBER__FLOAT.0b88ef0890": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3a023a970cbc4ace66be4a0ddb67df86\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_3a023a970cbc4ace66be4a0ddb67df86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HEIGHT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HEIGHT__NUMBER__FLOAT.0b88ef0890", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3a023a970cbc4ace66be4a0ddb67df86.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HEIGHT__NUMBER__FLOAT", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3a023a970cbc4ace66be4a0ddb67df86"}, "created_at": 1658508768.2033205, "column_name": "BLOCK_HEIGHT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_BLOCK_TIMESTAMP.5125651933": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_legacy__fact_blocks_BLOCK_TIMESTAMP.5125651933", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_BLOCK_TIMESTAMP", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2102234, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_blocks_BLOCK_TIMESTAMP__day__1.041b5d1089": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a6646aa1916367ae1d2d0939a7206583\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_row_va_a6646aa1916367ae1d2d0939a7206583", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_blocks_BLOCK_TIMESTAMP__day__1.041b5d1089", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_row_va_a6646aa1916367ae1d2d0939a7206583.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_blocks_BLOCK_TIMESTAMP__day__1", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_row_va_a6646aa1916367ae1d2d0939a7206583"}, "created_at": 1658508768.213307, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b0361409f6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05a479fe9f850089473b6265414940c0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_05a479fe9f850089473b6265414940c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b0361409f6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_05a479fe9f850089473b6265414940c0.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_05a479fe9f850089473b6265414940c0"}, "created_at": 1658508768.221694, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_BLOCK_HASH.8cbfe88315": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_BLOCK_HASH"], "unique_id": "test.near.not_null_legacy__fact_blocks_BLOCK_HASH.8cbfe88315", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_BLOCK_HASH.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_BLOCK_HASH", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2283194, "column_name": "BLOCK_HASH", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HASH__STRING__VARCHAR.bab378c107": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ab56f0229b6a540e3283482b31c2e1d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_4ab56f0229b6a540e3283482b31c2e1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HASH__STRING__VARCHAR.bab378c107", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_4ab56f0229b6a540e3283482b31c2e1d.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HASH__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_4ab56f0229b6a540e3283482b31c2e1d"}, "created_at": 1658508768.2310257, "column_name": "BLOCK_HASH", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_TX_COUNT.74c06f6cb0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_TX_COUNT"], "unique_id": "test.near.not_null_legacy__fact_blocks_TX_COUNT.74c06f6cb0", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_TX_COUNT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_TX_COUNT", "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2384336, "column_name": "TX_COUNT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TX_COUNT__NUMBER__FLOAT.ca9ccb68ac": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5148e09304d11e1758450da440fac34a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_5148e09304d11e1758450da440fac34a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TX_COUNT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TX_COUNT__NUMBER__FLOAT.ca9ccb68ac", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_5148e09304d11e1758450da440fac34a.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TX_COUNT__NUMBER__FLOAT", "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_5148e09304d11e1758450da440fac34a"}, "created_at": 1658508768.2411308, "column_name": "TX_COUNT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_BLOCK_AUTHOR.c18782dd0a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_AUTHOR", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_BLOCK_AUTHOR"], "unique_id": "test.near.not_null_legacy__fact_blocks_BLOCK_AUTHOR.c18782dd0a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_BLOCK_AUTHOR.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_BLOCK_AUTHOR", "alias": "fact_blocks_BLOCK_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2480657, "column_name": "BLOCK_AUTHOR", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.ddbca22b31": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dcf9d9ca33b2dbaabd31d8e8218cbf88\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_AUTHOR", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_dcf9d9ca33b2dbaabd31d8e8218cbf88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.ddbca22b31", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_dcf9d9ca33b2dbaabd31d8e8218cbf88.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_dcf9d9ca33b2dbaabd31d8e8218cbf88"}, "created_at": 1658508768.2507486, "column_name": "BLOCK_AUTHOR", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT.2cce92b62d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_CHALLENGES_RESULT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT"], "unique_id": "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT.2cce92b62d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT", "alias": "fact_blocks_BLOCK_CHALLENGES_RESULT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2577415, "column_name": "BLOCK_CHALLENGES_RESULT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ebf655d3ad": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_99a293a89998c553c9b034233878b1fa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "BLOCK_CHALLENGES_RESULT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_99a293a89998c553c9b034233878b1fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ebf655d3ad", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_99a293a89998c553c9b034233878b1fa.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_BLOCK_CHALLENGES_RESULT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_99a293a89998c553c9b034233878b1fa"}, "created_at": 1658508768.2604527, "column_name": "BLOCK_CHALLENGES_RESULT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT.b107e77a10": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_CHALLENGES_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT"], "unique_id": "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT.b107e77a10", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT", "alias": "fact_blocks_BLOCK_CHALLENGES_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2679646, "column_name": "BLOCK_CHALLENGES_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.c505daa4f9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ae3c73af081682405f415992e5928a80\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_CHALLENGES_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_ae3c73af081682405f415992e5928a80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.c505daa4f9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ae3c73af081682405f415992e5928a80.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_CHALLENGES_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ae3c73af081682405f415992e5928a80"}, "created_at": 1658508768.270664, "column_name": "BLOCK_CHALLENGES_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_CHUNK_HEADERS_ROOT.f539519d87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_HEADERS_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_CHUNK_HEADERS_ROOT"], "unique_id": "test.near.not_null_legacy__fact_blocks_CHUNK_HEADERS_ROOT.f539519d87", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_CHUNK_HEADERS_ROOT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_CHUNK_HEADERS_ROOT", "alias": "fact_blocks_CHUNK_HEADERS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2776413, "column_name": "CHUNK_HEADERS_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.08bc739a9a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fbc93a37843b2b37db0c2dfc00fbd75a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_HEADERS_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_fbc93a37843b2b37db0c2dfc00fbd75a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.08bc739a9a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_fbc93a37843b2b37db0c2dfc00fbd75a.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR", "alias": "fact_blocks_CHUNK_HEADERS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_fbc93a37843b2b37db0c2dfc00fbd75a"}, "created_at": 1658508768.2803962, "column_name": "CHUNK_HEADERS_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_CHUNK_MASK.925795b1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_MASK", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_CHUNK_MASK"], "unique_id": "test.near.not_null_legacy__fact_blocks_CHUNK_MASK.925795b1ed", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_CHUNK_MASK.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_CHUNK_MASK", "alias": "fact_blocks_CHUNK_MASK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2874055, "column_name": "CHUNK_MASK", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.c7fc4626cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_44fff9d8b9d5c765d6d7b99f34ed7310\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "CHUNK_MASK", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_44fff9d8b9d5c765d6d7b99f34ed7310", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.c7fc4626cd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_44fff9d8b9d5c765d6d7b99f34ed7310.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_CHUNK_MASK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_44fff9d8b9d5c765d6d7b99f34ed7310"}, "created_at": 1658508768.2901042, "column_name": "CHUNK_MASK", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT.09b07dc5ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT"], "unique_id": "test.near.not_null_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT.09b07dc5ba", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT", "alias": "fact_blocks_CHUNK_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.2975237, "column_name": "CHUNK_RECEIPTS_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.e5acf07216": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9036a527dacbcd85875bcdff025a3630\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_9036a527dacbcd85875bcdff025a3630", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.e5acf07216", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9036a527dacbcd85875bcdff025a3630.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR", "alias": "fact_blocks_CHUNK_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9036a527dacbcd85875bcdff025a3630"}, "created_at": 1658508768.3002381, "column_name": "CHUNK_RECEIPTS_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_CHUNK_TX_ROOT.af05587c81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNK_TX_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_CHUNK_TX_ROOT"], "unique_id": "test.near.not_null_legacy__fact_blocks_CHUNK_TX_ROOT.af05587c81", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_CHUNK_TX_ROOT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_CHUNK_TX_ROOT", "alias": "fact_blocks_CHUNK_TX_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3071656, "column_name": "CHUNK_TX_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.36cdd7f908": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_33a64aae1ce6db90a2e72293c132acb5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHUNK_TX_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_33a64aae1ce6db90a2e72293c132acb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.36cdd7f908", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_33a64aae1ce6db90a2e72293c132acb5.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR", "alias": "fact_blocks_CHUNK_TX_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_33a64aae1ce6db90a2e72293c132acb5"}, "created_at": 1658508768.30987, "column_name": "CHUNK_TX_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_CHUNKS.a355b30fb6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNKS", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_CHUNKS"], "unique_id": "test.near.not_null_legacy__fact_blocks_CHUNKS.a355b30fb6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_CHUNKS.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_CHUNKS", "alias": "fact_blocks_CHUNKS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3167894, "column_name": "CHUNKS", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.8beb7e7ce9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37ae68a61edafa1496b582e31f14381e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "CHUNKS", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_37ae68a61edafa1496b582e31f14381e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.8beb7e7ce9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_37ae68a61edafa1496b582e31f14381e.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_CHUNKS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_37ae68a61edafa1496b582e31f14381e"}, "created_at": 1658508768.3194966, "column_name": "CHUNKS", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_CHUNKS_INCLUDED.2d284e80be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHUNKS_INCLUDED", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_CHUNKS_INCLUDED"], "unique_id": "test.near.not_null_legacy__fact_blocks_CHUNKS_INCLUDED.2d284e80be", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_CHUNKS_INCLUDED.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_CHUNKS_INCLUDED", "alias": "fact_blocks_CHUNKS_INCLUDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3268473, "column_name": "CHUNKS_INCLUDED", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS_INCLUDED__NUMBER.ed92aa0bdb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_585b6a21253d1ca3f44f074d890f5619\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "CHUNKS_INCLUDED", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_585b6a21253d1ca3f44f074d890f5619", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS_INCLUDED__NUMBER"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS_INCLUDED__NUMBER.ed92aa0bdb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_585b6a21253d1ca3f44f074d890f5619.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS_INCLUDED__NUMBER", "alias": "fact_blocks_CHUNKS_INCLUDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_585b6a21253d1ca3f44f074d890f5619"}, "created_at": 1658508768.3299007, "column_name": "CHUNKS_INCLUDED", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_EPOCH_ID.de14654928": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EPOCH_ID", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_EPOCH_ID"], "unique_id": "test.near.not_null_legacy__fact_blocks_EPOCH_ID.de14654928", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_EPOCH_ID.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_EPOCH_ID", "alias": "fact_blocks_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3360426, "column_name": "EPOCH_ID", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_ID__STRING__VARCHAR.9e4c5feda2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ae88f0a093f870e208b8197db9365de7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EPOCH_ID", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_ae88f0a093f870e208b8197db9365de7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_ID__STRING__VARCHAR.9e4c5feda2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ae88f0a093f870e208b8197db9365de7.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_ID__STRING__VARCHAR", "alias": "fact_blocks_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ae88f0a093f870e208b8197db9365de7"}, "created_at": 1658508768.3390708, "column_name": "EPOCH_ID", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.76ae679417": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8dc8ada8b6a17b4905848aeda40f4a60\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR", null], "column_name": "EPOCH_SYNC_DATA_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_8dc8ada8b6a17b4905848aeda40f4a60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.76ae679417", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8dc8ada8b6a17b4905848aeda40f4a60.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None", "alias": "fact_blocks_EPOCH_SYNC_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8dc8ada8b6a17b4905848aeda40f4a60"}, "created_at": 1658508768.3457546, "column_name": "EPOCH_SYNC_DATA_HASH", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_EVENTS.40547dd206": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENTS", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_EVENTS"], "unique_id": "test.near.not_null_legacy__fact_blocks_EVENTS.40547dd206", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_EVENTS.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_EVENTS", "alias": "fact_blocks_EVENTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3532026, "column_name": "EVENTS", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.a449d09069": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_241f1e6ae9799856e938402bbdd62a11\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "EVENTS", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_241f1e6ae9799856e938402bbdd62a11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.a449d09069", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_241f1e6ae9799856e938402bbdd62a11.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_EVENTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_241f1e6ae9799856e938402bbdd62a11"}, "created_at": 1658508768.355907, "column_name": "EVENTS", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_GAS_PRICE.084565c029": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_GAS_PRICE"], "unique_id": "test.near.not_null_legacy__fact_blocks_GAS_PRICE.084565c029", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_GAS_PRICE.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_GAS_PRICE", "alias": "fact_blocks_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3632488, "column_name": "GAS_PRICE", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_GAS_PRICE__NUMBER__FLOAT.30ff82ffbf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8015cd4e5a3b47202ec2191fc2c21d96\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_8015cd4e5a3b47202ec2191fc2c21d96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_GAS_PRICE__NUMBER__FLOAT.30ff82ffbf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_8015cd4e5a3b47202ec2191fc2c21d96.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_GAS_PRICE__NUMBER__FLOAT", "alias": "fact_blocks_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_8015cd4e5a3b47202ec2191fc2c21d96"}, "created_at": 1658508768.3659372, "column_name": "GAS_PRICE", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_LAST_DS_FINAL_BLOCK.3da8465b06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_DS_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_LAST_DS_FINAL_BLOCK"], "unique_id": "test.near.not_null_legacy__fact_blocks_LAST_DS_FINAL_BLOCK.3da8465b06", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_LAST_DS_FINAL_BLOCK.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_LAST_DS_FINAL_BLOCK", "alias": "fact_blocks_LAST_DS_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3729415, "column_name": "LAST_DS_FINAL_BLOCK", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.49fa21b970": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f2e0282f39bf908b3f60f148b1cfaeed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_DS_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_f2e0282f39bf908b3f60f148b1cfaeed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.49fa21b970", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f2e0282f39bf908b3f60f148b1cfaeed.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR", "alias": "fact_blocks_LAST_DS_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f2e0282f39bf908b3f60f148b1cfaeed"}, "created_at": 1658508768.375963, "column_name": "LAST_DS_FINAL_BLOCK", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_LAST_FINAL_BLOCK.4f0a0e0cfe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_LAST_FINAL_BLOCK"], "unique_id": "test.near.not_null_legacy__fact_blocks_LAST_FINAL_BLOCK.4f0a0e0cfe", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_LAST_FINAL_BLOCK.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_LAST_FINAL_BLOCK", "alias": "fact_blocks_LAST_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3825963, "column_name": "LAST_FINAL_BLOCK", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.e3b4b6a4f7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d81148f216808ebf874b902c1d459926\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_FINAL_BLOCK", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_d81148f216808ebf874b902c1d459926", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.e3b4b6a4f7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_d81148f216808ebf874b902c1d459926.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR", "alias": "fact_blocks_LAST_FINAL_BLOCK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_d81148f216808ebf874b902c1d459926"}, "created_at": 1658508768.3856666, "column_name": "LAST_FINAL_BLOCK", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_LATEST_PROTOCOL_VERSION.95f174308c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LATEST_PROTOCOL_VERSION", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_LATEST_PROTOCOL_VERSION"], "unique_id": "test.near.not_null_legacy__fact_blocks_LATEST_PROTOCOL_VERSION.95f174308c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_LATEST_PROTOCOL_VERSION.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_LATEST_PROTOCOL_VERSION", "alias": "fact_blocks_LATEST_PROTOCOL_VERSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.3923695, "column_name": "LATEST_PROTOCOL_VERSION", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.8aa42afa5e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aadc335c3c6dd68c5d774c9545f67b10\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "LATEST_PROTOCOL_VERSION", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_aadc335c3c6dd68c5d774c9545f67b10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.8aa42afa5e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_aadc335c3c6dd68c5d774c9545f67b10.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT", "alias": "fact_blocks_LATEST_PROTOCOL_VERSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_aadc335c3c6dd68c5d774c9545f67b10"}, "created_at": 1658508768.395405, "column_name": "LATEST_PROTOCOL_VERSION", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_NEXT_BP_HASH.bc6713bb7e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_BP_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_NEXT_BP_HASH"], "unique_id": "test.near.not_null_legacy__fact_blocks_NEXT_BP_HASH.bc6713bb7e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_NEXT_BP_HASH.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_NEXT_BP_HASH", "alias": "fact_blocks_NEXT_BP_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.4020114, "column_name": "NEXT_BP_HASH", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.ce6393f196": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2f87de85a2069904b175be65b94516af\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_BP_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_2f87de85a2069904b175be65b94516af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.ce6393f196", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_2f87de85a2069904b175be65b94516af.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR", "alias": "fact_blocks_NEXT_BP_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_2f87de85a2069904b175be65b94516af"}, "created_at": 1658508768.4050448, "column_name": "NEXT_BP_HASH", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_NEXT_EPOCH_ID.fa89d8dc9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_EPOCH_ID", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_NEXT_EPOCH_ID"], "unique_id": "test.near.not_null_legacy__fact_blocks_NEXT_EPOCH_ID.fa89d8dc9e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_NEXT_EPOCH_ID.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_NEXT_EPOCH_ID", "alias": "fact_blocks_NEXT_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.411676, "column_name": "NEXT_EPOCH_ID", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.9958696d0e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_85697fa5b06753b75c6ef4a9c30f00ce\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_EPOCH_ID", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_85697fa5b06753b75c6ef4a9c30f00ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.9958696d0e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_85697fa5b06753b75c6ef4a9c30f00ce.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR", "alias": "fact_blocks_NEXT_EPOCH_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_85697fa5b06753b75c6ef4a9c30f00ce"}, "created_at": 1658508768.4146578, "column_name": "NEXT_EPOCH_ID", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_OUTCOME_ROOT.00db67ee0a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OUTCOME_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_OUTCOME_ROOT"], "unique_id": "test.near.not_null_legacy__fact_blocks_OUTCOME_ROOT.00db67ee0a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_OUTCOME_ROOT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_OUTCOME_ROOT", "alias": "fact_blocks_OUTCOME_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.421654, "column_name": "OUTCOME_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.5fac74f8b3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_24985ae5d795206a76a3ba445aba51c2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "OUTCOME_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_24985ae5d795206a76a3ba445aba51c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.5fac74f8b3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_24985ae5d795206a76a3ba445aba51c2.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR", "alias": "fact_blocks_OUTCOME_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_24985ae5d795206a76a3ba445aba51c2"}, "created_at": 1658508768.424373, "column_name": "OUTCOME_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_PREV_HASH.7d1d30a300": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREV_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_PREV_HASH"], "unique_id": "test.near.not_null_legacy__fact_blocks_PREV_HASH.7d1d30a300", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_PREV_HASH.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_PREV_HASH", "alias": "fact_blocks_PREV_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.431339, "column_name": "PREV_HASH", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HASH__STRING__VARCHAR.7acd8482c3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c974db084c051d86a2b66f4643cca52e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PREV_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_c974db084c051d86a2b66f4643cca52e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HASH__STRING__VARCHAR.7acd8482c3", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c974db084c051d86a2b66f4643cca52e.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HASH__STRING__VARCHAR", "alias": "fact_blocks_PREV_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c974db084c051d86a2b66f4643cca52e"}, "created_at": 1658508768.434033, "column_name": "PREV_HASH", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.a1682461a9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9d9c54d03f7a23adda69904f3d149295\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PREV_HEIGHT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_9d9c54d03f7a23adda69904f3d149295", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.a1682461a9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_9d9c54d03f7a23adda69904f3d149295.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT", "alias": "fact_blocks_PREV_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_9d9c54d03f7a23adda69904f3d149295"}, "created_at": 1658508768.4410195, "column_name": "PREV_HEIGHT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.b44c2c0b64": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c469fceb32d01107ebad63062fadbbd1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PREV_STATE_ROOT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_c469fceb32d01107ebad63062fadbbd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.b44c2c0b64", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_c469fceb32d01107ebad63062fadbbd1.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR", "alias": "fact_blocks_PREV_STATE_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_c469fceb32d01107ebad63062fadbbd1"}, "created_at": 1658508768.447659, "column_name": "PREV_STATE_ROOT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_RANDOM_VALUE.3afa0d1330": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RANDOM_VALUE", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_RANDOM_VALUE"], "unique_id": "test.near.not_null_legacy__fact_blocks_RANDOM_VALUE.3afa0d1330", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_RANDOM_VALUE.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_RANDOM_VALUE", "alias": "fact_blocks_RANDOM_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.4545512, "column_name": "RANDOM_VALUE", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.d5ff9715d1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7149fb3a17ae372674e0e3fb541cc6b0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RANDOM_VALUE", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_7149fb3a17ae372674e0e3fb541cc6b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RANDOM_VALUE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.d5ff9715d1", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7149fb3a17ae372674e0e3fb541cc6b0.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RANDOM_VALUE__STRING__VARCHAR", "alias": "fact_blocks_RANDOM_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7149fb3a17ae372674e0e3fb541cc6b0"}, "created_at": 1658508768.4572694, "column_name": "RANDOM_VALUE", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_RENT_PAID.433829732a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RENT_PAID", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_RENT_PAID"], "unique_id": "test.near.not_null_legacy__fact_blocks_RENT_PAID.433829732a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_RENT_PAID.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_RENT_PAID", "alias": "fact_blocks_RENT_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.4645686, "column_name": "RENT_PAID", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RENT_PAID__NUMBER__FLOAT.1adca7443b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1a14daa3ad24b05f2f36fbfbd517cbd6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RENT_PAID", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_1a14daa3ad24b05f2f36fbfbd517cbd6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RENT_PAID__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RENT_PAID__NUMBER__FLOAT.1adca7443b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1a14daa3ad24b05f2f36fbfbd517cbd6.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RENT_PAID__NUMBER__FLOAT", "alias": "fact_blocks_RENT_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1a14daa3ad24b05f2f36fbfbd517cbd6"}, "created_at": 1658508768.467281, "column_name": "RENT_PAID", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_SIGNATURE.c4c102726f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_SIGNATURE"], "unique_id": "test.near.not_null_legacy__fact_blocks_SIGNATURE.c4c102726f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_SIGNATURE.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_SIGNATURE", "alias": "fact_blocks_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.474169, "column_name": "SIGNATURE", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_SIGNATURE__STRING__VARCHAR.7f0ff2e091": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52a2493f5db301f5e302f397d582bec8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SIGNATURE", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_52a2493f5db301f5e302f397d582bec8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_SIGNATURE__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_SIGNATURE__STRING__VARCHAR.7f0ff2e091", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_52a2493f5db301f5e302f397d582bec8.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_SIGNATURE__STRING__VARCHAR", "alias": "fact_blocks_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_52a2493f5db301f5e302f397d582bec8"}, "created_at": 1658508768.4768727, "column_name": "SIGNATURE", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_TOTAL_SUPPLY.76125a8d28": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_TOTAL_SUPPLY"], "unique_id": "test.near.not_null_legacy__fact_blocks_TOTAL_SUPPLY.76125a8d28", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_TOTAL_SUPPLY.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_TOTAL_SUPPLY", "alias": "fact_blocks_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.4837925, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.9e6a35d550": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d0f8c368397fea9e4625d8ebac4aaad\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_3d0f8c368397fea9e4625d8ebac4aaad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.9e6a35d550", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3d0f8c368397fea9e4625d8ebac4aaad.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT", "alias": "fact_blocks_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3d0f8c368397fea9e4625d8ebac4aaad"}, "created_at": 1658508768.4864743, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_VALIDATOR_PROPOSALS.0a0009c7ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_PROPOSALS", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_VALIDATOR_PROPOSALS"], "unique_id": "test.near.not_null_legacy__fact_blocks_VALIDATOR_PROPOSALS.0a0009c7ce", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_VALIDATOR_PROPOSALS.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_VALIDATOR_PROPOSALS", "alias": "fact_blocks_VALIDATOR_PROPOSALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.4934626, "column_name": "VALIDATOR_PROPOSALS", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.6f1de7d549": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7c6193b52482d01f2bc515c32afa548f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "VALIDATOR_PROPOSALS", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_7c6193b52482d01f2bc515c32afa548f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.6f1de7d549", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_7c6193b52482d01f2bc515c32afa548f.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_VALIDATOR_PROPOSALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_7c6193b52482d01f2bc515c32afa548f"}, "created_at": 1658508768.4965096, "column_name": "VALIDATOR_PROPOSALS", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_VALIDATOR_REWARD.8ad521519f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_REWARD", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_VALIDATOR_REWARD"], "unique_id": "test.near.not_null_legacy__fact_blocks_VALIDATOR_REWARD.8ad521519f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_VALIDATOR_REWARD.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_VALIDATOR_REWARD", "alias": "fact_blocks_VALIDATOR_REWARD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5036638, "column_name": "VALIDATOR_REWARD", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.4144fd04e2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f8e5b71e20fb558df7be284dc599f1e7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "VALIDATOR_REWARD", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_f8e5b71e20fb558df7be284dc599f1e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.4144fd04e2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_f8e5b71e20fb558df7be284dc599f1e7.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT", "alias": "fact_blocks_VALIDATOR_REWARD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_f8e5b71e20fb558df7be284dc599f1e7"}, "created_at": 1658508768.506714, "column_name": "VALIDATOR_REWARD", "file_key_name": "models.legacy__fact_blocks"}, "test.near.not_null_legacy__fact_blocks_INGESTED_AT.ab80b7d20d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_blocks_INGESTED_AT"], "unique_id": "test.near.not_null_legacy__fact_blocks_INGESTED_AT.ab80b7d20d", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_blocks_INGESTED_AT.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "not_null_legacy__fact_blocks_INGESTED_AT", "alias": "fact_blocks_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5134273, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_INGESTED_AT__TIMESTAMP_NTZ.b4762b6393": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_91362fbcf428fde6828afb3a14a7f4d8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_91362fbcf428fde6828afb3a14a7f4d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_INGESTED_AT__TIMESTAMP_NTZ.b4762b6393", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_91362fbcf428fde6828afb3a14a7f4d8.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_INGESTED_AT__TIMESTAMP_NTZ", "alias": "fact_blocks_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_91362fbcf428fde6828afb3a14a7f4d8"}, "created_at": 1658508768.5164602, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_blocks"}, "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_blocks_block_height.f492d15aae": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d4f7b9fd6b8fd41c72d22692ee330b13\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_height"], "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_d4f7b9fd6b8fd41c72d22692ee330b13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_legacy", "fqn": ["near", "legacy", "dbt_utils_unique_combination_of_columns_legacy__fact_blocks_block_height"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_blocks_block_height.f492d15aae", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_d4f7b9fd6b8fd41c72d22692ee330b13.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_legacy__fact_blocks_block_height", "alias": "fact_blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_d4f7b9fd6b8fd41c72d22692ee330b13"}, "created_at": 1658508768.5226796, "column_name": null, "file_key_name": "models.legacy__fact_blocks"}, "test.near.sequence_gaps_legacy__fact_blocks_block_height.6ecba80cbc": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('legacy__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.near.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "sequence_gaps_legacy", "fqn": ["near", "legacy", "sequence_gaps_legacy__fact_blocks_block_height"], "unique_id": "test.near.sequence_gaps_legacy__fact_blocks_block_height.6ecba80cbc", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "sequence_gaps_legacy__fact_blocks_block_height.sql", "original_file_path": "models/legacy/legacy__blocks.yml", "name": "sequence_gaps_legacy__fact_blocks_block_height", "alias": "fact_blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1658508768.529866, "column_name": null, "file_key_name": "models.legacy__fact_blocks"}, "test.near.unique_legacy__actions_events_function_call_ACTION_ID.e5e531935f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_legacy", "fqn": ["near", "legacy", "unique_legacy__actions_events_function_call_ACTION_ID"], "unique_id": "test.near.unique_legacy__actions_events_function_call_ACTION_ID.e5e531935f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_legacy__actions_events_function_call_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "unique_legacy__actions_events_function_call_ACTION_ID", "alias": "actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/unique_legacy__actions_events_function_call_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5421805, "compiled_sql": "\n    \n    \n\nselect\n    ACTION_ID as unique_field,\n    count(*) as n_records\n\nfrom NEAR.legacy.actions_events_function_call\nwhere ACTION_ID is not null\ngroup by ACTION_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__actions_events_function_call_ACTION_ID.4cf07754fd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_function_call_ACTION_ID"], "unique_id": "test.near.not_null_legacy__actions_events_function_call_ACTION_ID.4cf07754fd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_function_call_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "not_null_legacy__actions_events_function_call_ACTION_ID", "alias": "actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/not_null_legacy__actions_events_function_call_ACTION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5449228, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_ID\nfrom NEAR.legacy.actions_events_function_call\nwhere ACTION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_ID__STRING__VARCHAR.716a440a4c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5eb5cd8144eb140054d0be4cfa8b59e6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5eb5cd8144eb140054d0be4cfa8b59e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_ID__STRING__VARCHAR.716a440a4c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_5eb5cd8144eb140054d0be4cfa8b59e6.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_ID__STRING__VARCHAR", "alias": "actions_events_function_call_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_5eb5cd8144eb140054d0be4cfa8b59e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_5eb5cd8144eb140054d0be4cfa8b59e6"}, "created_at": 1658508768.5476408, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_ID", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__actions_events_function_call_TXN_HASH.727ee630e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_function_call_TXN_HASH"], "unique_id": "test.near.not_null_legacy__actions_events_function_call_TXN_HASH.727ee630e2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_function_call_TXN_HASH.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "not_null_legacy__actions_events_function_call_TXN_HASH", "alias": "actions_events_function_call_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/not_null_legacy__actions_events_function_call_TXN_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.554601, "compiled_sql": "\n    \n    \n\n\n\nselect TXN_HASH\nfrom NEAR.legacy.actions_events_function_call\nwhere TXN_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TXN_HASH", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_TXN_HASH__STRING__VARCHAR.cad6dfeab4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_febf17f9f8795230a77211e290bdb3be\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_febf17f9f8795230a77211e290bdb3be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_TXN_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_TXN_HASH__STRING__VARCHAR.cad6dfeab4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_febf17f9f8795230a77211e290bdb3be.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_TXN_HASH__STRING__VARCHAR", "alias": "actions_events_function_call_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_febf17f9f8795230a77211e290bdb3be.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_febf17f9f8795230a77211e290bdb3be"}, "created_at": 1658508768.5573027, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TXN_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TXN_HASH", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP.b5bd835f72": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP.b5bd835f72", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP", "alias": "actions_events_function_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5642445, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom NEAR.legacy.actions_events_function_call\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f9710820a2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e3444630d15e4559dcc90ebefbbce1ac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e3444630d15e4559dcc90ebefbbce1ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f9710820a2", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_e3444630d15e4559dcc90ebefbbce1ac.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "actions_events_function_call_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_e3444630d15e4559dcc90ebefbbce1ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_e3444630d15e4559dcc90ebefbbce1ac"}, "created_at": 1658508768.5669508, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__actions_events_function_call_ACTION_NAME.da607dba3f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_function_call_ACTION_NAME"], "unique_id": "test.near.not_null_legacy__actions_events_function_call_ACTION_NAME.da607dba3f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_function_call_ACTION_NAME.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "not_null_legacy__actions_events_function_call_ACTION_NAME", "alias": "actions_events_function_call_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/not_null_legacy__actions_events_function_call_ACTION_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5740767, "compiled_sql": "\n    \n    \n\n\n\nselect ACTION_NAME\nfrom NEAR.legacy.actions_events_function_call\nwhere ACTION_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.9fce890a9f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ff3a7b896ff48a7e671900912ca6e03b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_NAME", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ff3a7b896ff48a7e671900912ca6e03b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.9fce890a9f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ff3a7b896ff48a7e671900912ca6e03b.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_NAME__STRING__VARCHAR", "alias": "actions_events_function_call_ACTION_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_ff3a7b896ff48a7e671900912ca6e03b.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ff3a7b896ff48a7e671900912ca6e03b"}, "created_at": 1658508768.5767906, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION_NAME", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__actions_events_function_call_METHOD_NAME.e2fe951cfd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_function_call_METHOD_NAME"], "unique_id": "test.near.not_null_legacy__actions_events_function_call_METHOD_NAME.e2fe951cfd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_function_call_METHOD_NAME.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "not_null_legacy__actions_events_function_call_METHOD_NAME", "alias": "actions_events_function_call_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/not_null_legacy__actions_events_function_call_METHOD_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5837893, "compiled_sql": "\n    \n    \n\n\n\nselect METHOD_NAME\nfrom NEAR.legacy.actions_events_function_call\nwhere METHOD_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.77375f0b47": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a413758b398c53405b72f339c2044732\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "METHOD_NAME", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a413758b398c53405b72f339c2044732", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_METHOD_NAME__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.77375f0b47", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_a413758b398c53405b72f339c2044732.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_METHOD_NAME__STRING__VARCHAR", "alias": "actions_events_function_call_METHOD_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_a413758b398c53405b72f339c2044732.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_a413758b398c53405b72f339c2044732"}, "created_at": 1658508768.5864818, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'METHOD_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "METHOD_NAME", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__actions_events_function_call_ARGS.a50d123058": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ARGS", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_function_call_ARGS"], "unique_id": "test.near.not_null_legacy__actions_events_function_call_ARGS.a50d123058", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_function_call_ARGS.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "not_null_legacy__actions_events_function_call_ARGS", "alias": "actions_events_function_call_ARGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/not_null_legacy__actions_events_function_call_ARGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.5934625, "compiled_sql": "\n    \n    \n\n\n\nselect ARGS\nfrom NEAR.legacy.actions_events_function_call\nwhere ARGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ARGS", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ARGS__STRING__VARCHAR.ce45913ff9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_03998717aaa74531dfb1b645941a9c64\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ARGS", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_03998717aaa74531dfb1b645941a9c64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ARGS__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ARGS__STRING__VARCHAR.ce45913ff9", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_03998717aaa74531dfb1b645941a9c64.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ARGS__STRING__VARCHAR", "alias": "actions_events_function_call_ARGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_03998717aaa74531dfb1b645941a9c64.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_03998717aaa74531dfb1b645941a9c64"}, "created_at": 1658508768.596164, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ARGS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ARGS", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.a399eb9636": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_391c63e181bf1c146aa3fbc99098368c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DEPOSIT", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_391c63e181bf1c146aa3fbc99098368c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_DEPOSIT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.a399eb9636", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_391c63e181bf1c146aa3fbc99098368c.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_DEPOSIT__NUMBER__FLOAT", "alias": "actions_events_function_call_DEPOSIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_391c63e181bf1c146aa3fbc99098368c.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_391c63e181bf1c146aa3fbc99098368c"}, "created_at": 1658508768.6031687, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DEPOSIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DEPOSIT", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.9693d99ead": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12b5a71d5ec40ff5d77173a4acd501ba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ATTACHED_GAS", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12b5a71d5ec40ff5d77173a4acd501ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.9693d99ead", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_12b5a71d5ec40ff5d77173a4acd501ba.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT", "alias": "actions_events_function_call_ATTACHED_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_12b5a71d5ec40ff5d77173a4acd501ba.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_12b5a71d5ec40ff5d77173a4acd501ba"}, "created_at": 1658508768.6103263, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTACHED_GAS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ATTACHED_GAS", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__actions_events_function_call_INGESTED_AT.59110792cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__actions_events_function_call_INGESTED_AT"], "unique_id": "test.near.not_null_legacy__actions_events_function_call_INGESTED_AT.59110792cd", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__actions_events_function_call_INGESTED_AT.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "not_null_legacy__actions_events_function_call_INGESTED_AT", "alias": "actions_events_function_call_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/not_null_legacy__actions_events_function_call_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.6174378, "compiled_sql": "\n    \n    \n\n\n\nselect INGESTED_AT\nfrom NEAR.legacy.actions_events_function_call\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_INGESTED_AT__TIMESTAMP_NTZ.78e74614e5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0268390916a330602843fc863525d4c4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0268390916a330602843fc863525d4c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_INGESTED_AT__TIMESTAMP_NTZ.78e74614e5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_0268390916a330602843fc863525d4c4.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_INGESTED_AT__TIMESTAMP_NTZ", "alias": "actions_events_function_call_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_expectations_expect_column_0268390916a330602843fc863525d4c4.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_0268390916a330602843fc863525d4c4"}, "created_at": 1658508768.6201758, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ACTION_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TXN_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('METHOD_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ARGS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ATTACHED_GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_function_call_action_id.b7dfc55b85": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c5af055c04c25de2432c727faf559e4a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('legacy__actions_events_function_call')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.near.legacy__actions_events_function_call"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c5af055c04c25de2432c727faf559e4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_legacy", "fqn": ["near", "legacy", "dbt_utils_unique_combination_of_columns_legacy__actions_events_function_call_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_function_call_action_id.b7dfc55b85", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_c5af055c04c25de2432c727faf559e4a.sql", "original_file_path": "models/legacy/legacy__actions_events_function_call.yml", "name": "dbt_utils_unique_combination_of_columns_legacy__actions_events_function_call_action_id", "alias": "actions_events_function_call_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__actions_events_function_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/near/models/legacy/legacy__actions_events_function_call.yml/dbt_utils_unique_combination_o_c5af055c04c25de2432c727faf559e4a.sql", "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_c5af055c04c25de2432c727faf559e4a"}, "created_at": 1658508768.6267881, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        action_id\n    from NEAR.legacy.actions_events_function_call\n    group by action_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.legacy__actions_events_function_call"}, "test.near.not_null_legacy__fact_transfers_TXN_HASH.16c59cb760": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_TXN_HASH"], "unique_id": "test.near.not_null_legacy__fact_transfers_TXN_HASH.16c59cb760", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_TXN_HASH.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_TXN_HASH", "alias": "fact_transfers_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.6415195, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TXN_HASH__STRING__VARCHAR.f3e369fd77": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b18f427e094bc05a5eda8cbf886b8a62\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TXN_HASH", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_b18f427e094bc05a5eda8cbf886b8a62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TXN_HASH__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TXN_HASH__STRING__VARCHAR.f3e369fd77", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b18f427e094bc05a5eda8cbf886b8a62.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TXN_HASH__STRING__VARCHAR", "alias": "fact_transfers_TXN_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b18f427e094bc05a5eda8cbf886b8a62"}, "created_at": 1658508768.6446636, "column_name": "TXN_HASH", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_ACTION_ID.48c79864eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_ACTION_ID"], "unique_id": "test.near.not_null_legacy__fact_transfers_ACTION_ID.48c79864eb", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_ACTION_ID", "alias": "fact_transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.651606, "column_name": "ACTION_ID", "file_key_name": "models.legacy__fact_transfers"}, "test.near.unique_legacy__fact_transfers_ACTION_ID.45c1e050b6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "unique_legacy", "fqn": ["near", "legacy", "unique_legacy__fact_transfers_ACTION_ID"], "unique_id": "test.near.unique_legacy__fact_transfers_ACTION_ID.45c1e050b6", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "unique_legacy__fact_transfers_ACTION_ID.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "unique_legacy__fact_transfers_ACTION_ID", "alias": "fact_transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.6546826, "column_name": "ACTION_ID", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_ACTION_ID__STRING__VARCHAR.1a0adccdc7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fe09b75cfd570355b74df9c4756ab96d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ACTION_ID", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_fe09b75cfd570355b74df9c4756ab96d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_ACTION_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_ACTION_ID__STRING__VARCHAR.1a0adccdc7", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_fe09b75cfd570355b74df9c4756ab96d.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_ACTION_ID__STRING__VARCHAR", "alias": "fact_transfers_ACTION_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_fe09b75cfd570355b74df9c4756ab96d"}, "created_at": 1658508768.6574233, "column_name": "ACTION_ID", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_BLOCK_TIMESTAMP.bdbaa04704": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.near.not_null_legacy__fact_transfers_BLOCK_TIMESTAMP.bdbaa04704", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_BLOCK_TIMESTAMP", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.664669, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ac93b47b33": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afb1d639d3f11991ff7b05ff7ede2652\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_afb1d639d3f11991ff7b05ff7ede2652", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ac93b47b33", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_afb1d639d3f11991ff7b05ff7ede2652.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_afb1d639d3f11991ff7b05ff7ede2652"}, "created_at": 1658508768.667404, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_TX_SIGNER.3ef893bdb4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_TX_SIGNER"], "unique_id": "test.near.not_null_legacy__fact_transfers_TX_SIGNER.3ef893bdb4", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_TX_SIGNER.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_TX_SIGNER", "alias": "fact_transfers_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.6739495, "column_name": "TX_SIGNER", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_SIGNER__STRING__VARCHAR.884531b134": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b31afb4735fba8db6f3b930d2a020b5b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_SIGNER", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_b31afb4735fba8db6f3b930d2a020b5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_SIGNER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_SIGNER__STRING__VARCHAR.884531b134", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_b31afb4735fba8db6f3b930d2a020b5b.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_SIGNER__STRING__VARCHAR", "alias": "fact_transfers_TX_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_b31afb4735fba8db6f3b930d2a020b5b"}, "created_at": 1658508768.6766884, "column_name": "TX_SIGNER", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_TX_RECEIVER.0a769265be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_TX_RECEIVER"], "unique_id": "test.near.not_null_legacy__fact_transfers_TX_RECEIVER.0a769265be", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_TX_RECEIVER.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_TX_RECEIVER", "alias": "fact_transfers_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.68443, "column_name": "TX_RECEIVER", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_RECEIVER__STRING__VARCHAR.ff85e4d948": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1609e84e8e877cbeb86604864ed14f86\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_RECEIVER", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_1609e84e8e877cbeb86604864ed14f86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_RECEIVER__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_RECEIVER__STRING__VARCHAR.ff85e4d948", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1609e84e8e877cbeb86604864ed14f86.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_RECEIVER__STRING__VARCHAR", "alias": "fact_transfers_TX_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1609e84e8e877cbeb86604864ed14f86"}, "created_at": 1658508768.6871142, "column_name": "TX_RECEIVER", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_DEPOSIT__NUMBER__FLOAT.6da907196e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1025f50ed12870e4c6b8a4990b40bda4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DEPOSIT", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_1025f50ed12870e4c6b8a4990b40bda4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_DEPOSIT__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_DEPOSIT__NUMBER__FLOAT.6da907196e", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_1025f50ed12870e4c6b8a4990b40bda4.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_DEPOSIT__NUMBER__FLOAT", "alias": "fact_transfers_DEPOSIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_1025f50ed12870e4c6b8a4990b40bda4"}, "created_at": 1658508768.694204, "column_name": "DEPOSIT", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_RECEIPT_OBJECT_ID.2b9042d14a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_RECEIPT_OBJECT_ID"], "unique_id": "test.near.not_null_legacy__fact_transfers_RECEIPT_OBJECT_ID.2b9042d14a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_RECEIPT_OBJECT_ID.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_RECEIPT_OBJECT_ID", "alias": "fact_transfers_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.7011986, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.d7f3287b6f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac1b9ec4df8be02937b981f3fe383ca3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIPT_OBJECT_ID", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_ac1b9ec4df8be02937b981f3fe383ca3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.d7f3287b6f", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_ac1b9ec4df8be02937b981f3fe383ca3.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR", "alias": "fact_transfers_RECEIPT_OBJECT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_ac1b9ec4df8be02937b981f3fe383ca3"}, "created_at": 1658508768.7039056, "column_name": "RECEIPT_OBJECT_ID", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_TRANSACTION_FEE.91b3d39e86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_TRANSACTION_FEE"], "unique_id": "test.near.not_null_legacy__fact_transfers_TRANSACTION_FEE.91b3d39e86", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_TRANSACTION_FEE.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_TRANSACTION_FEE", "alias": "fact_transfers_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.7108452, "column_name": "TRANSACTION_FEE", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.41dc5b0729": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6d8ba383590a6ed0ec5f6736b7a886b6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_FEE", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_6d8ba383590a6ed0ec5f6736b7a886b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.41dc5b0729", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_6d8ba383590a6ed0ec5f6736b7a886b6.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT", "alias": "fact_transfers_TRANSACTION_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_6d8ba383590a6ed0ec5f6736b7a886b6"}, "created_at": 1658508768.713551, "column_name": "TRANSACTION_FEE", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_GAS_USED.2e28f8402b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_GAS_USED"], "unique_id": "test.near.not_null_legacy__fact_transfers_GAS_USED.2e28f8402b", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_GAS_USED.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_GAS_USED", "alias": "fact_transfers_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.7205398, "column_name": "GAS_USED", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_GAS_USED__NUMBER__FLOAT.b0db67249c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_81670f2fc881ab6d291b31cb9858f621\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_81670f2fc881ab6d291b31cb9858f621", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_GAS_USED__NUMBER__FLOAT.b0db67249c", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_81670f2fc881ab6d291b31cb9858f621.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_GAS_USED__NUMBER__FLOAT", "alias": "fact_transfers_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_81670f2fc881ab6d291b31cb9858f621"}, "created_at": 1658508768.7232606, "column_name": "GAS_USED", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_STATUS.a8ad7ca387": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_STATUS"], "unique_id": "test.near.not_null_legacy__fact_transfers_STATUS.a8ad7ca387", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_STATUS.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_STATUS", "alias": "fact_transfers_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.730217, "column_name": "STATUS", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_STATUS__BOOLEAN.8326a0cd6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b4787046c74b7cf4ad6010b29388a33\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "STATUS", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_3b4787046c74b7cf4ad6010b29388a33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_STATUS__BOOLEAN"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_STATUS__BOOLEAN.8326a0cd6a", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_3b4787046c74b7cf4ad6010b29388a33.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_STATUS__BOOLEAN", "alias": "fact_transfers_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_3b4787046c74b7cf4ad6010b29388a33"}, "created_at": 1658508768.7329242, "column_name": "STATUS", "file_key_name": "models.legacy__fact_transfers"}, "test.near.not_null_legacy__fact_transfers_INGESTED_AT.cb77e279c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "not_null_legacy", "fqn": ["near", "legacy", "not_null_legacy__fact_transfers_INGESTED_AT"], "unique_id": "test.near.not_null_legacy__fact_transfers_INGESTED_AT.cb77e279c5", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "not_null_legacy__fact_transfers_INGESTED_AT.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "not_null_legacy__fact_transfers_INGESTED_AT", "alias": "fact_transfers_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000"}, "created_at": 1658508768.739414, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_INGESTED_AT__TIMESTAMP_NTZ.5c9c93a518": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf7d814c7649ec989cc029d82eeec57b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_cf7d814c7649ec989cc029d82eeec57b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy", "fqn": ["near", "legacy", "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_INGESTED_AT__TIMESTAMP_NTZ.5c9c93a518", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_expectations_expect_column_cf7d814c7649ec989cc029d82eeec57b.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_INGESTED_AT__TIMESTAMP_NTZ", "alias": "fact_transfers_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_expectations_expect_column_cf7d814c7649ec989cc029d82eeec57b"}, "created_at": 1658508768.7420974, "column_name": "INGESTED_AT", "file_key_name": "models.legacy__fact_transfers"}, "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transfers_action_id.7e6c6967bf": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_137b949cc24e552cd8793251ef342f01\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["action_id"], "model": "{{ get_where_subquery(ref('legacy__fact_transfers')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_137b949cc24e552cd8793251ef342f01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "between 1 and 25000", "error_if": ">25000"}, "database": "NEAR", "schema": "dbt_utils_unique_combination_of_columns_legacy", "fqn": ["near", "legacy", "dbt_utils_unique_combination_of_columns_legacy__fact_transfers_action_id"], "unique_id": "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transfers_action_id.7e6c6967bf", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "dbt_utils_unique_combination_o_137b949cc24e552cd8793251ef342f01.sql", "original_file_path": "models/legacy/legacy__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_legacy__fact_transfers_action_id", "alias": "fact_transfers_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["legacy__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"warn_if": "between 1 and 25000", "error_if": ">25000", "alias": "dbt_utils_unique_combination_o_137b949cc24e552cd8793251ef342f01"}, "created_at": 1658508768.7486455, "column_name": null, "file_key_name": "models.legacy__fact_transfers"}}, "sources": {"source.near.chainwalkers.near_blocks": {"fqn": ["near", "chainwalkers", "near_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.near.chainwalkers.near_blocks", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "near_blocks", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "near_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Blocks from the Near chain. Note always use the latest ingested at timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with block_id for Near", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Near", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the blocks header information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.near_blocks", "created_at": 1658508768.7544453}, "source.near.chainwalkers.near_txs": {"fqn": ["near", "chainwalkers", "near_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.near.chainwalkers.near_txs", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "near_txs", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "near_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Txs from the Near chain. Note always use the latest ingested at timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Synonmous with transaction hash, a unique on chain identifier for the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_block_index": {"name": "tx_block_index", "description": "The index of the transaction within the block. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with block_id for Near", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Near", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the blocks header information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx": {"name": "tx", "description": "A json object containing the tx and any decoded logs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.near_txs", "created_at": 1658508768.7546885}, "source.near.near.blocks": {"fqn": ["near", "near", "blocks"], "database": "near", "schema": "prod", "unique_id": "source.near.near.blocks", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "blocks", "source_name": "near", "source_description": "", "loader": "", "identifier": "blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": "datediff('hour', block_timestamp, current_timestamp) < 48"}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "near.prod.blocks", "created_at": 1658508768.7548494}, "source.near.near.transactions": {"fqn": ["near", "near", "transactions"], "database": "near", "schema": "prod", "unique_id": "source.near.near.transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transactions", "source_name": "near", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": "datediff('hour', block_timestamp, current_timestamp) < 48"}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "near.prod.transactions", "created_at": 1658508768.755002}, "source.near.near.transfers": {"fqn": ["near", "near", "transfers"], "database": "near", "schema": "prod", "unique_id": "source.near.near.transfers", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transfers", "source_name": "near", "source_description": "", "loader": "", "identifier": "transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": "datediff('hour', block_timestamp, current_timestamp) < 48"}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "near.prod.transfers", "created_at": 1658508768.7551491}, "source.near.near.actions_events": {"fqn": ["near", "near", "actions_events"], "database": "near", "schema": "prod", "unique_id": "source.near.near.actions_events", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "actions_events", "source_name": "near", "source_description": "", "loader": "", "identifier": "actions_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": "datediff('hour', block_timestamp, current_timestamp) < 48"}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "near.prod.actions_events", "created_at": 1658508768.7553198}, "source.near.near.actions_events_addkey": {"fqn": ["near", "near", "actions_events_addkey"], "database": "near", "schema": "prod", "unique_id": "source.near.near.actions_events_addkey", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "actions_events_addkey", "source_name": "near", "source_description": "", "loader": "", "identifier": "actions_events_addkey", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": "datediff('hour', block_timestamp, current_timestamp) < 48"}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "near.prod.actions_events_addkey", "created_at": 1658508768.755463}, "source.near.near.actions_events_function_call": {"fqn": ["near", "near", "actions_events_function_call"], "database": "near", "schema": "prod", "unique_id": "source.near.near.actions_events_function_call", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "actions_events_function_call", "source_name": "near", "source_description": "", "loader": "", "identifier": "actions_events_function_call", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "ingested_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": "datediff('hour', block_timestamp, current_timestamp) < 48"}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "near.prod.actions_events_function_call", "created_at": 1658508768.7556038}}, "macros": {"macro.near.incremental_load_filter": {"unique_id": "macro.near.incremental_load_filter", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_load_filter", "macro_sql": "{% macro incremental_load_filter(time_col) -%}\n  -- dbt makes it easy to query your target table by using the \"{{ this }}\" variable.\n\n{% if is_incremental() %}\n{{ time_col }} >= (\n  SELECT\n    MAX(\n      {{ time_col }}\n    )\n  FROM\n    {{ this }}\n)\n{%- else -%}\n  TRUE\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8055134}, "macro.near.incremental_last_x_days": {"unique_id": "macro.near.incremental_last_x_days", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_last_x_days", "macro_sql": "{% macro incremental_last_x_days(\n    time_col,\n    time_in_days\n  ) -%}\n\n{% if is_incremental() %}\n{{ time_col }} >= CURRENT_DATE() - INTERVAL '{{ time_in_days }} day'\n{% else %}\n  TRUE\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8061671}, "macro.near.test_sequence_gaps": {"unique_id": "macro.near.test_sequence_gaps", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/sequence_gaps.sql", "original_file_path": "macros/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8094122}, "macro.near.create_sps": {"unique_id": "macro.near.create_sps", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'NEAR' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.near.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8105743}, "macro.near.run_sp_create_prod_clone": {"unique_id": "macro.near.run_sp_create_prod_clone", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call near._internal.create_prod_clone(\n        'near',\n        'near_dev',\n        'dbt_cloud'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8116772}, "macro.near.generate_schema_name": {"unique_id": "macro.near.generate_schema_name", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8132153}, "macro.near.generate_alias_name": {"unique_id": "macro.near.generate_alias_name", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8140907}, "macro.near.sp_create_prod_clone": {"unique_id": "macro.near.sp_create_prod_clone", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n    CREATE\n    OR REPLACE PROCEDURE {{ target_schema }}.create_prod_clone(\n        source_db_name STRING,\n        destination_db_name STRING,\n        role_name STRING\n    ) returns BOOLEAN LANGUAGE javascript EXECUTE AS caller AS $$ snowflake.execute(\n        { sqlText: `BEGIN TRANSACTION;` }\n    );\ntry { snowflake.execute(\n        { sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}` }\n    );\nsnowflake.execute(\n        { sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}` }\n    );\nsnowflake.execute(\n        { sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL` }\n    );\n    /* this only needs to be in prod */\n    var existing_schemas = snowflake.execute(\n        { sqlText: `SELECT table_schema FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES WHERE grantor IS NOT NULL GROUP BY 1;` }\n    );\nWHILE (existing_schemas.next()) { var schema = existing_schemas.getColumnValue(1) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;` }\n    );} var existing_tables = snowflake.execute(\n        { sqlText: `SELECT table_schema, table_name FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES WHERE grantor IS NOT NULL GROUP BY 1,2;` }\n    );\nWHILE (existing_tables.next()) { var schema = existing_tables.getColumnValue(1) var table_name = existing_tables.getColumnValue(2) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;` }\n    );} var existing_stages = snowflake.execute(\n        { sqlText: `SELECT stage_schema, stage_name FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.STAGES;` }\n    );\nWHILE (existing_stages.next()) { var schema = existing_stages.getColumnValue(1) var stage_name = existing_stages.getColumnValue(2) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON STAGE ${DESTINATION_DB_NAME}.${schema}.${stage_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;` }\n    );} var existing_functions = snowflake.execute(\n        { sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;` }\n    );\nWHILE (existing_functions.next()) { var schema = existing_functions.getColumnValue(1) var function_name = existing_functions.getColumnValue(2) var argument_signature = existing_functions.getColumnValue(3) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;` }\n    );} var existing_procedures = snowflake.execute(\n        { sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;` }\n    );\nWHILE (existing_procedures.next()) { var schema = existing_procedures.getColumnValue(1) var procedure_name = existing_procedures.getColumnValue(2) var argument_signature = existing_procedures.getColumnValue(3) snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;` }\n    );} snowflake.execute(\n        { sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};` }\n    ) snowflake.execute(\n        { sqlText: `COMMIT;` }\n    );} catch (err) { snowflake.execute(\n        { sqlText: `ROLLBACK;` }\n    );\nthrow(err);} RETURN TRUE $$\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.816127}, "macro.near.test_tx_gaps": {"unique_id": "macro.near.test_tx_gaps", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "macros/tx_gaps.sql", "original_file_path": "macros/tx_gaps.sql", "name": "test_tx_gaps", "macro_sql": "{% test tx_gaps(\n    model,\n    column_name,\n    column_block,\n    column_tx_count\n) %}\nWITH block_base AS (\n    SELECT\n        {{ column_block }},\n        {{ column_tx_count }}\n    FROM\n        {{ ref('silver__blocks') }}\n),\nmodel_name AS (\n    SELECT\n        {{ column_block }},\n        COUNT(\n            DISTINCT {{ column_name }}\n        ) AS model_tx_count\n    FROM\n        {{ model }}\n    GROUP BY\n        {{ column_block }}\n)\nSELECT\n    block_base.{{ column_block }},\n    {{ column_tx_count }},\n    model_name.{{ column_block }},\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.{{ column_block }} = model_name.{{ column_block }}\nWHERE\n    {{ column_tx_count }} <> model_tx_count {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8184435}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8211575}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.847382}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8483748}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8497045}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.851982}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8543184}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.856025}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8575714}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8585522}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.858796}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8593462}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8596785}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8602695}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8610318}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8616557}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.863224}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8639233}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8653584}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.866844}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8691854}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8698535}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.870601}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8741765}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8751526}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8759565}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8802621}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8816824}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.885434}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8870726}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8932457}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.8993483}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9002397}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9021487}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9034958}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9044127}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.905326}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9086063}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9092016}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.909639}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9100716}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9105005}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9120228}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9125884}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9132006}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9144242}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.924272}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9343867}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9380865}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9417412}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9439416}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.954606}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9590783}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.959813}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9620512}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9628353}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.964724}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9781523}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9807725}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9824204}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9843051}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9864573}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9901237}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9914985}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.992004}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9925435}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9933212}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9945054}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508762.9952135}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0046246}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.018621}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0277224}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0282452}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0289252}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.02935}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0296426}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0317852}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0322819}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0327928}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0357342}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.040636}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.048917}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.049782}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.050287}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.05056}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0509932}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0513644}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0519786}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0545552}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.055138}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0559337}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0572288}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0587895}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0596273}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0678892}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0767808}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0794966}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0802064}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0816488}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0820804}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0824313}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0828989}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0832677}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.084694}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.085259}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0889406}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.095479}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.097065}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.0979977}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.099389}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1005507}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1022716}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.103064}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1039507}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1053898}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.106153}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.107552}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.10825}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1093202}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1105318}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1124825}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.113781}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1151192}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1157012}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1161895}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1168933}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.118425}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1188686}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1195745}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1208534}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.12493}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1258364}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1263857}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1270294}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.127592}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1280825}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.128684}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1295316}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1302671}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1319385}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1326218}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1332042}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1372373}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1377184}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1387985}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.139388}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.140396}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.141073}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1428804}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1436744}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1460373}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.148104}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1486099}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1492188}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1497223}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1505241}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1519873}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.153582}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.153995}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1544666}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1557076}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1593375}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1601305}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1607065}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1611733}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1617055}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1626248}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1632721}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.164186}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1647453}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1652293}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1696553}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1732593}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1755497}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1762545}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.179612}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1813226}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1822}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.18397}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1846735}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1855345}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.1863527}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2035167}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.210592}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2177691}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2206254}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2228742}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2249377}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2266665}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.227144}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.227592}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2280087}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2284236}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2316625}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2326965}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2331667}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2336621}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.234661}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2352571}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2361734}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2392008}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2399976}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2407775}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.242368}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.243577}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.244599}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.245165}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2470539}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2477102}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2483344}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2489417}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.249558}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2506907}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2547956}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2557034}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2569206}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2577872}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2590551}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2601883}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2616777}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.263382}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.263844}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2647219}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2656832}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.26671}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2680929}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2690353}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.269898}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.270773}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2718232}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2728512}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.274034}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.274475}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.274904}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2752426}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2768154}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2779195}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2793086}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2805405}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2809737}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2813907}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2819467}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2831297}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.283739}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2841423}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2850788}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2864835}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2876096}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.289202}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2898552}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2902792}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2907085}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2917309}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2926211}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.294241}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.294696}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2953172}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.295926}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2970042}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2985156}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.2990952}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.299572}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.301361}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3021379}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.302567}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.302982}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3034463}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3050497}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3056679}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3062756}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3068695}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3075087}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3100042}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.313814}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.315508}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3166757}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3172586}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3183453}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3188667}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3205903}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3216877}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.322184}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3240848}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.326196}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3282335}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3301103}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3321462}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3331978}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3406675}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3452294}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3470058}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3481915}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3496668}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.351233}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.35276}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.353266}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3549967}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3560557}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3575027}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3584886}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.360019}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3605366}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3621569}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3632474}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3645356}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3650753}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3664804}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3674014}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3686588}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3692076}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3711345}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3725722}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3748324}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3775234}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3791957}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3798733}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3923655}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3939028}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.3948345}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.396381}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.411911}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.413504}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4139464}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4148536}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4153047}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4156244}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4174085}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4182057}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4186537}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.419852}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4203913}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4214718}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4217904}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4239068}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.42416}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4243834}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4246018}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.424814}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.425279}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4256544}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.425882}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4260993}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4265752}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.426798}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.427016}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4275138}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4277432}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4279604}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4284313}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4286563}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4288795}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4293528}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4295795}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.429796}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4311996}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4316158}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.432011}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4324057}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.435932}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4374957}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4388905}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4395092}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4449518}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4461873}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.447052}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.448272}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4511147}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4522653}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4525}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4527228}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.453915}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4542449}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4545617}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4572437}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4586043}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4590359}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4594517}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4598436}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.461492}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.46182}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4621253}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4659617}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4664748}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4671617}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4681892}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4691906}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.470288}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4717166}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4721358}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.47254}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4741914}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.480149}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4806545}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4811668}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.486524}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4871342}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.488905}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.489324}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4897957}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.490266}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4915817}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4919844}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4923859}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4941404}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4944842}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4947054}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4949226}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4954202}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4957602}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4961963}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4965305}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4969175}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4979887}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4982233}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4984622}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.4999175}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5002558}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5005689}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5008724}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5019438}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5023203}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5035386}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5039716}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5043557}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5056412}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5060627}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5064795}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5068939}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5080988}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5084295}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5087562}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5100539}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5105677}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.511749}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5121832}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5125718}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5145285}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5150394}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5155551}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5160363}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.516615}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5183563}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.519098}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.519555}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5199766}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.520393}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5217688}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5221858}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.522745}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5233297}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5246267}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5260596}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.527335}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5283093}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.529848}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.531981}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5383935}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5390525}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.539684}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5402696}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5407772}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5412967}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5434203}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.54596}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.547123}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5479045}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5492923}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5510597}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5547998}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5556529}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.557983}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5595782}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5611835}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.563484}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.564931}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5657878}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5680976}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5693517}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5699174}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5714943}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5733914}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.57623}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5792465}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5839655}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5855045}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5863602}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.5922432}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.60112}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6024358}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.603508}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.60624}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6070724}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6087852}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.611226}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.612704}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6129704}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.613217}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6134634}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6177895}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6242619}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.625589}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6265955}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6286445}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6311529}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.634166}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6367555}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.638904}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6418755}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.643976}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6457386}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6464324}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6475294}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6487372}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6489716}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6491938}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6494453}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6496675}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6498866}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6508136}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6521833}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6525168}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6528254}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6531305}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6546392}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.655296}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6559243}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6577892}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6583645}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6589277}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6594172}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.659869}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6612244}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.661465}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.661686}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6619067}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6623816}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6626058}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6628213}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6630368}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.664621}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6682882}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6694186}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.672165}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.676053}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.678294}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6810374}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.682591}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6857772}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6872685}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.688283}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6905699}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6929095}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6968634}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.6992345}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7015624}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7038717}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7063339}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7087274}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7115672}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7147527}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7159183}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7185745}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.721284}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7236402}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7261527}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7285573}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7305677}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.732551}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7435157}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7508066}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7523496}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7556336}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7581491}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7597823}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7618823}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7693079}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7731175}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7750344}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7776263}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7819462}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7861052}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7964504}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7981322}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.7995563}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.803416}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.806121}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8069973}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8088799}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.809944}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8102634}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.81322}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8154573}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.817363}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.819261}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8209698}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8238487}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8262951}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8293962}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8305085}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.833397}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8351564}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8369381}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.839875}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8411412}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8457623}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.847902}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8500366}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.853047}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8570707}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8587744}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.860244}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.86372}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8652587}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8667042}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8695116}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.871569}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8749971}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.876538}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8801193}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8836145}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.8860724}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/near_dbt/near_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658508763.886925}}, "docs": {"near.status_value": {"unique_id": "near.status_value", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/status_value.md", "original_file_path": "models/descriptions/status_value.md", "name": "status_value", "block_contents": "Status information (object) for this transaction."}, "near.allowance": {"unique_id": "near.allowance", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/allowance.md", "original_file_path": "models/descriptions/allowance.md", "name": "allowance", "block_contents": "Amount of NEAR approved for use in unadjusted format (10^24). NULL if permission is FullAccess."}, "near.block_hash": {"unique_id": "near.block_hash", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/block_hash.md", "original_file_path": "models/descriptions/block_hash.md", "name": "block_hash", "block_contents": "Unique identifier (hash) of this block."}, "near.tx": {"unique_id": "near.tx", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx.md", "original_file_path": "models/descriptions/tx.md", "name": "tx", "block_contents": "The transaction's information."}, "near.gas_price": {"unique_id": "near.gas_price", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/gas_price.md", "original_file_path": "models/descriptions/gas_price.md", "name": "gas_price", "block_contents": "The gas_price taken from block headers, number is not decimal adjusted."}, "near.block_height": {"unique_id": "near.block_height", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/block_height.md", "original_file_path": "models/descriptions/block_height.md", "name": "block_height", "block_contents": "The block height is a sequential number of the most recent block in the blockchain."}, "near.events": {"unique_id": "near.events", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/events.md", "original_file_path": "models/descriptions/events.md", "name": "events", "block_contents": "The events taken from block headers."}, "near.block_challenges_result": {"unique_id": "near.block_challenges_result", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/block_challenges_result.md", "original_file_path": "models/descriptions/block_challenges_result.md", "name": "block_challenges_result", "block_contents": "The block_challenges_result taken from block headers."}, "near.permission": {"unique_id": "near.permission", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/permission.md", "original_file_path": "models/descriptions/permission.md", "name": "permission", "block_contents": "Permissions granted to the contract by the signer."}, "near.tx_signer": {"unique_id": "near.tx_signer", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_signer.md", "original_file_path": "models/descriptions/tx_signer.md", "name": "tx_signer", "block_contents": "The transaction signer."}, "near.epoch_sync_data_hash": {"unique_id": "near.epoch_sync_data_hash", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/epoch_sync_data_hash.md", "original_file_path": "models/descriptions/epoch_sync_data_hash.md", "name": "epoch_sync_data_hash", "block_contents": "The epoch_sync_data_hash taken from block headers, if available."}, "near.validator_reward": {"unique_id": "near.validator_reward", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/validator_reward.md", "original_file_path": "models/descriptions/validator_reward.md", "name": "validator_reward", "block_contents": "The validator_reward taken from block headers."}, "near.logs": {"unique_id": "near.logs", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/logs.md", "original_file_path": "models/descriptions/logs.md", "name": "logs", "block_contents": "Logs (array) for this transaction."}, "near.last_final_block": {"unique_id": "near.last_final_block", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/last_final_block.md", "original_file_path": "models/descriptions/last_final_block.md", "name": "last_final_block", "block_contents": "The last_final_block taken from block headers."}, "near.tx_hash": {"unique_id": "near.tx_hash", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_hash.md", "original_file_path": "models/descriptions/tx_hash.md", "name": "tx_hash", "block_contents": "Unique identifier (hash) of this transaction."}, "near.chunk_headers_root": {"unique_id": "near.chunk_headers_root", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/chunk_headers_root.md", "original_file_path": "models/descriptions/chunk_headers_root.md", "name": "chunk_headers_root", "block_contents": "The chunk_headers_root taken from block headers."}, "near.signature": {"unique_id": "near.signature", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/signature.md", "original_file_path": "models/descriptions/signature.md", "name": "signature", "block_contents": "The signature taken from block headers."}, "near.metadata": {"unique_id": "near.metadata", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/metadata.md", "original_file_path": "models/descriptions/metadata.md", "name": "metadata", "block_contents": "Metadata (object) for this transaction."}, "near.receipt_outcome_id": {"unique_id": "near.receipt_outcome_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/receipt_outcome_id.md", "original_file_path": "models/descriptions/receipt_outcome_id.md", "name": "receipt_outcome_id", "block_contents": "Unique identifier(s) (array) of the receipt outcome for this transaction."}, "near.public_key": {"unique_id": "near.public_key", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/public_key.md", "original_file_path": "models/descriptions/public_key.md", "name": "public_key", "block_contents": "The public key of an AccessKey which was used to sign the original transaction. In case of a deposit refund, the public key is empty (all bytes are 0)."}, "near.total_supply": {"unique_id": "near.total_supply", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/total_supply.md", "original_file_path": "models/descriptions/total_supply.md", "name": "total_supply", "block_contents": "The total_supply taken from block headers."}, "near.chunks": {"unique_id": "near.chunks", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/chunks.md", "original_file_path": "models/descriptions/chunks.md", "name": "chunks", "block_contents": "The chunks taken from block headers. Chunk is an aggregation of transactions which are executed within a particular shard."}, "near.prev_state_root": {"unique_id": "near.prev_state_root", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/prev_state_root.md", "original_file_path": "models/descriptions/prev_state_root.md", "name": "prev_state_root", "block_contents": "The prev_state_root taken from block headers. TODO can this be null?"}, "near.validator_proposals": {"unique_id": "near.validator_proposals", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/validator_proposals.md", "original_file_path": "models/descriptions/validator_proposals.md", "name": "validator_proposals", "block_contents": "The validator_proposals taken from block headers."}, "near.avg_gas_price": {"unique_id": "near.avg_gas_price", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/avg_gas_price.md", "original_file_path": "models/descriptions/avg_gas_price.md", "name": "avg_gas_price", "block_contents": "The average gas price in transactions. Not decimal adjusted; units in yoctoNEAR (10^-24 NEAR)"}, "near.receipt_object_id": {"unique_id": "near.receipt_object_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/receipt_object_id.md", "original_file_path": "models/descriptions/receipt_object_id.md", "name": "receipt_object_id", "block_contents": "Unique identifier of the receipt object for this transaction."}, "near.chunks_included": {"unique_id": "near.chunks_included", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/chunks_included.md", "original_file_path": "models/descriptions/chunks_included.md", "name": "chunks_included", "block_contents": "The chunks_included taken from block headers."}, "near.tx_receipt": {"unique_id": "near.tx_receipt", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_receipt.md", "original_file_path": "models/descriptions/tx_receipt.md", "name": "tx_receipt", "block_contents": "The transaction receipt."}, "near.txn_hash": {"unique_id": "near.txn_hash", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/txn_hash.md", "original_file_path": "models/descriptions/txn_hash.md", "name": "txn_hash", "block_contents": "Unique identifier (hash) of this transaction."}, "near.daily_transactions": {"unique_id": "near.daily_transactions", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/daily_transactions.md", "original_file_path": "models/descriptions/daily_transactions.md", "name": "daily_transactions", "block_contents": "The daily number of transactions."}, "near.nonce": {"unique_id": "near.nonce", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/nonce.md", "original_file_path": "models/descriptions/nonce.md", "name": "nonce", "block_contents": "Nonce for transactions."}, "near._ingested_at": {"unique_id": "near._ingested_at", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/_ingested_at.md", "original_file_path": "models/descriptions/_ingested_at.md", "name": "_ingested_at", "block_contents": "The timestamp for when the block was ingested."}, "near.tx_receiver": {"unique_id": "near.tx_receiver", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_receiver.md", "original_file_path": "models/descriptions/tx_receiver.md", "name": "tx_receiver", "block_contents": "The transaction receiver."}, "near.prev_height": {"unique_id": "near.prev_height", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/prev_height.md", "original_file_path": "models/descriptions/prev_height.md", "name": "prev_height", "block_contents": "The prev_height taken from block headers."}, "near.prev_hash": {"unique_id": "near.prev_hash", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/prev_hash.md", "original_file_path": "models/descriptions/prev_hash.md", "name": "prev_hash", "block_contents": "The prev_hash taken from block headers."}, "near.offset_id": {"unique_id": "near.offset_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/offset_id.md", "original_file_path": "models/descriptions/offset_id.md", "name": "offset_id", "block_contents": "Synonmous with block_id for Near."}, "near.action_id": {"unique_id": "near.action_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/action_id.md", "original_file_path": "models/descriptions/action_id.md", "name": "action_id", "block_contents": "The `action_id` as compiled from `tx_id` and `action_index`. This is unique for each record."}, "near.transaction_fee": {"unique_id": "near.transaction_fee", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/transaction_fee.md", "original_file_path": "models/descriptions/transaction_fee.md", "name": "transaction_fee", "block_contents": "Total fee paid in NEAR to execute this transaction. In raw number format, to adjust divide by POW(10,24)"}, "near.tx_count": {"unique_id": "near.tx_count", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_count.md", "original_file_path": "models/descriptions/tx_count.md", "name": "tx_count", "block_contents": "The `tx_count` taken from block headers. The number of transactions included in the block."}, "near.block_challenges_root": {"unique_id": "near.block_challenges_root", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/block_challenges_root.md", "original_file_path": "models/descriptions/block_challenges_root.md", "name": "block_challenges_root", "block_contents": "The block_challenges_root taken from block headers. TODO check this column expectation, number?"}, "near.header": {"unique_id": "near.header", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/header.md", "original_file_path": "models/descriptions/header.md", "name": "header", "block_contents": "A json column containing the blocks header information."}, "near.action_data": {"unique_id": "near.action_data", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/action_data.md", "original_file_path": "models/descriptions/action_data.md", "name": "action_data", "block_contents": "A JSON object containing the argument data that was called by the `action_event`, if any."}, "near.action_name": {"unique_id": "near.action_name", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/action_name.md", "original_file_path": "models/descriptions/action_name.md", "name": "action_name", "block_contents": "The name of the action performed."}, "near.last_ds_final_block": {"unique_id": "near.last_ds_final_block", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/last_ds_final_block.md", "original_file_path": "models/descriptions/last_ds_final_block.md", "name": "last_ds_final_block", "block_contents": "The last_ds_final_block taken from block headers."}, "near.rent_paid": {"unique_id": "near.rent_paid", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/rent_paid.md", "original_file_path": "models/descriptions/rent_paid.md", "name": "rent_paid", "block_contents": "The rent_paid taken from block headers."}, "near.chunk_mask": {"unique_id": "near.chunk_mask", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/chunk_mask.md", "original_file_path": "models/descriptions/chunk_mask.md", "name": "chunk_mask", "block_contents": "The chunk_mask taken from block headers."}, "near.date": {"unique_id": "near.date", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/date.md", "original_file_path": "models/descriptions/date.md", "name": "date", "block_contents": "The date (day)."}, "near.tx_block_index": {"unique_id": "near.tx_block_index", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_block_index.md", "original_file_path": "models/descriptions/tx_block_index.md", "name": "tx_block_index", "block_contents": "The index of the transaction within the block. Starts at 0."}, "near.attached_gas": {"unique_id": "near.attached_gas", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/attached_gas.md", "original_file_path": "models/descriptions/attached_gas.md", "name": "attached_gas", "block_contents": "Units of gas (figure is not decimal adjusted, 10^12) attached to the transaction (this is often higher than 'Gas Used')."}, "near.args": {"unique_id": "near.args", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/args.md", "original_file_path": "models/descriptions/args.md", "name": "args", "block_contents": "Decoded (where possible) arguments passed alongside the `method_name`.  If decoding failed, the table will contain the raw message."}, "near.daily_active_wallets": {"unique_id": "near.daily_active_wallets", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/daily_active_wallets.md", "original_file_path": "models/descriptions/daily_active_wallets.md", "name": "daily_active_wallets", "block_contents": "The daily number of active wallets."}, "near.receiver_id": {"unique_id": "near.receiver_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/receiver_id.md", "original_file_path": "models/descriptions/receiver_id.md", "name": "receiver_id", "block_contents": "The account ID of the destination of this transaction. NULL if permission is FullAccess."}, "near.tx_id": {"unique_id": "near.tx_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "name": "tx_id", "block_contents": "Synonmous with transaction hash, a unique on chain identifier for the transaction"}, "near.next_bp_hash": {"unique_id": "near.next_bp_hash", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/next_bp_hash.md", "original_file_path": "models/descriptions/next_bp_hash.md", "name": "next_bp_hash", "block_contents": "The next_bp_hash taken from block headers."}, "near.outcome_root": {"unique_id": "near.outcome_root", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/outcome_root.md", "original_file_path": "models/descriptions/outcome_root.md", "name": "outcome_root", "block_contents": "The outcome_root taken from block headers."}, "near.block_author": {"unique_id": "near.block_author", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/block_author.md", "original_file_path": "models/descriptions/block_author.md", "name": "block_author", "block_contents": "The `block_author` taken from block headers. Validators of the blockchain."}, "near.network": {"unique_id": "near.network", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/network.md", "original_file_path": "models/descriptions/network.md", "name": "network", "block_contents": "The blockchain network. (i.e. mainnet, testnet, etc.)"}, "near.next_epoch_id": {"unique_id": "near.next_epoch_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/next_epoch_id.md", "original_file_path": "models/descriptions/next_epoch_id.md", "name": "next_epoch_id", "block_contents": "The next_epoch_id taken from block headers."}, "near.rolling_7day_active_wallets": {"unique_id": "near.rolling_7day_active_wallets", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/rolling_7day_active_wallets.md", "original_file_path": "models/descriptions/rolling_7day_active_wallets.md", "name": "rolling_7day_active_wallets", "block_contents": "The number of active wallets in the last 7 days."}, "near.tx_outcome": {"unique_id": "near.tx_outcome", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/tx_outcome.md", "original_file_path": "models/descriptions/tx_outcome.md", "name": "tx_outcome", "block_contents": "The transaction outcome."}, "near.method_name": {"unique_id": "near.method_name", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/method_name.md", "original_file_path": "models/descriptions/method_name.md", "name": "method_name", "block_contents": "Name of the method(s) approved for use. NULL if permission is FullAccess."}, "near.block_id": {"unique_id": "near.block_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "name": "block_id", "block_contents": "The height of the chain this block corresponds with."}, "near.deposit": {"unique_id": "near.deposit", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/deposit.md", "original_file_path": "models/descriptions/deposit.md", "name": "deposit", "block_contents": "Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s). In raw number format, to adjust divide by POW(10,24)"}, "near.gas_used": {"unique_id": "near.gas_used", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/gas_used.md", "original_file_path": "models/descriptions/gas_used.md", "name": "gas_used", "block_contents": "Units of gas required to execute this transaction. In raw number format, to adjust divide by POW(10,12)"}, "near.action_index": {"unique_id": "near.action_index", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/action_index.md", "original_file_path": "models/descriptions/action_index.md", "name": "action_index", "block_contents": "The index of the current `action_name` and `action_data` in the order in which it appeared in the transaction."}, "near.chunk_receipts_root": {"unique_id": "near.chunk_receipts_root", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/chunk_receipts_root.md", "original_file_path": "models/descriptions/chunk_receipts_root.md", "name": "chunk_receipts_root", "block_contents": "The chunk_receipts_root taken from block headers."}, "near.epoch_id": {"unique_id": "near.epoch_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/epoch_id.md", "original_file_path": "models/descriptions/epoch_id.md", "name": "epoch_id", "block_contents": "The epoch_id taken from block headers."}, "near.random_value": {"unique_id": "near.random_value", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/random_value.md", "original_file_path": "models/descriptions/random_value.md", "name": "random_value", "block_contents": "The random_value taken from block headers."}, "near.status": {"unique_id": "near.status", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/status.md", "original_file_path": "models/descriptions/status.md", "name": "status", "block_contents": "Boolean representing the success or failure of the transaction. True for a successful transaction and False for failed transaction."}, "near.daily_gas_used": {"unique_id": "near.daily_gas_used", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/daily_gas_used.md", "original_file_path": "models/descriptions/daily_gas_used.md", "name": "daily_gas_used", "block_contents": "The total daily gas used in transactions. Not decimal adjusted; gas units (10^-12 Tgas)"}, "near.block_timestamp": {"unique_id": "near.block_timestamp", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "name": "block_timestamp", "block_contents": "The date and time at which the block began."}, "near.proof": {"unique_id": "near.proof", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/proof.md", "original_file_path": "models/descriptions/proof.md", "name": "proof", "block_contents": "Proof (array) for this transaction."}, "near.record_id": {"unique_id": "near.record_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/record_id.md", "original_file_path": "models/descriptions/record_id.md", "name": "record_id", "block_contents": "A unique id for the record generated by Chainwalkers."}, "near.latest_protocol_version": {"unique_id": "near.latest_protocol_version", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/latest_protocol_version.md", "original_file_path": "models/descriptions/latest_protocol_version.md", "name": "latest_protocol_version", "block_contents": "The latest_protocol_version taken from block headers."}, "near._inserted_timestamp": {"unique_id": "near._inserted_timestamp", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/_insterted_timestamp.md", "original_file_path": "models/descriptions/_insterted_timestamp.md", "name": "_inserted_timestamp", "block_contents": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker."}, "near.chain_id": {"unique_id": "near.chain_id", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/chain_id.md", "original_file_path": "models/descriptions/chain_id.md", "name": "chain_id", "block_contents": "Synonmous with blockchain name for Near."}, "near.rolling_30day_active_wallets": {"unique_id": "near.rolling_30day_active_wallets", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/rolling_30day_active_wallets.md", "original_file_path": "models/descriptions/rolling_30day_active_wallets.md", "name": "rolling_30day_active_wallets", "block_contents": "The number of active wallets in the last 30 days."}, "near.chunk_tx_root": {"unique_id": "near.chunk_tx_root", "package_name": "near", "root_path": "/home/runner/work/near_dbt/near_dbt", "path": "descriptions/chunk_tx_root.md", "original_file_path": "models/descriptions/chunk_tx_root.md", "name": "chunk_tx_root", "block_contents": "The chunk_tx_root taken from block headers."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.near.metrics__daily_transactions": ["model.near.silver__transactions"], "model.near.metrics__active_wallets": ["model.near.silver__transactions"], "model.near.metrics__daily_gas": ["model.near.silver__blocks", "model.near.silver__transactions"], "model.near.silver__blocks": ["model.near.bronze__blocks"], "model.near.silver__actions_events_addkey": ["model.near.silver__actions_events"], "model.near.silver__actions_events": ["model.near.silver__transactions"], "model.near.silver__transactions": ["model.near.bronze__transactions"], "model.near.silver__receipts": ["model.near.silver__transactions"], "model.near.silver__transfers": ["model.near.silver__actions_events", "model.near.silver__transactions"], "model.near.silver__actions_events_function_call": ["model.near.silver__actions_events"], "model.near.core__fact_actions_events_addkey": ["model.near.silver__actions_events_addkey"], "model.near.core__fact_blocks": ["model.near.silver__blocks"], "model.near.core__fact_actions_events": ["model.near.silver__actions_events"], "model.near.core__fact_receipts": ["model.near.silver__receipts"], "model.near.core__metrics_daily_gas": ["model.near.metrics__daily_gas"], "model.near.core__metrics_daily_transactions": ["model.near.metrics__daily_transactions"], "model.near.core__metrics_active_wallets": ["model.near.metrics__active_wallets"], "model.near.core__fact_transactions": ["model.near.silver__transactions"], "model.near.core__fact_transfers": ["model.near.silver__transfers"], "model.near.core__fact_actions_events_function_call": ["model.near.silver__actions_events_function_call"], "model.near.legacy__actions_events_addkey": ["model.near.silver__actions_events_addkey"], "model.near.legacy__metrics_daily_gas": ["model.near.metrics__daily_gas"], "model.near.legacy__transactions": ["model.near.silver__transactions"], "model.near.legacy__actions_events": ["model.near.silver__actions_events"], "model.near.legacy__receipts": ["model.near.silver__receipts"], "model.near.legacy__blocks": ["model.near.silver__blocks"], "model.near.legacy__metrics_active_wallets": ["model.near.metrics__active_wallets"], "model.near.legacy__transfers": ["model.near.silver__transfers"], "model.near.legacy__metrics_daily_transactions": ["model.near.metrics__daily_transactions"], "model.near.legacy__actions_events_function_call": ["model.near.silver__actions_events_function_call"], "model.near.bronze__transactions": ["source.near.chainwalkers.near_txs"], "model.near.bronze__blocks": ["source.near.chainwalkers.near_blocks"], "operation.near.near-on-run-start-0": [], "test.near.not_null_metrics__daily_gas_DATE.d5118a8fda": ["model.near.metrics__daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DATE__TIMESTAMP_NTZ.e1d1b1fca2": ["model.near.metrics__daily_gas"], "test.near.not_null_metrics__daily_gas_DAILY_GAS_USED.dfcbff5ad4": ["model.near.metrics__daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.6246eae8fd": ["model.near.metrics__daily_gas"], "test.near.not_null_metrics__daily_gas_AVG_GAS_PRICE.5d03852ee5": ["model.near.metrics__daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fd6bec3a6": ["model.near.metrics__daily_gas"], "test.near.not_null_metrics__active_wallets_DATE.0f49548353": ["model.near.metrics__active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DATE__TIMESTAMP_NTZ.18a04c8920": ["model.near.metrics__active_wallets"], "test.near.not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS.533dd6e2f2": ["model.near.metrics__active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.6302ce454e": ["model.near.metrics__active_wallets"], "test.near.not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.f220db236c": ["model.near.metrics__active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.bc563f5075": ["model.near.metrics__active_wallets"], "test.near.not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.06610cea73": ["model.near.metrics__active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.3020e05b84": ["model.near.metrics__active_wallets"], "test.near.not_null_metrics__daily_transactions_DATE.0543993236": ["model.near.metrics__daily_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DATE__TIMESTAMP_NTZ.3213a9fa9c": ["model.near.metrics__daily_transactions"], "test.near.not_null_metrics__daily_transactions_DAILY_TRANSACTIONS.d6758050ca": ["model.near.metrics__daily_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.1c6ef5916e": ["model.near.metrics__daily_transactions"], "test.near.unique_silver__actions_events_ACTION_ID.d139f26712": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events_ACTION_ID.6f23e362fe": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_ID__STRING__VARCHAR.62bc853d5b": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events_TX_HASH.70beae518e": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_TX_HASH__STRING__VARCHAR.116455b3a1": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events_BLOCK_ID.aee83217db": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_ID__NUMBER__FLOAT.863e030c52": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events_BLOCK_TIMESTAMP.bf83654f70": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e9d2996911": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events_ACTION_INDEX.7f9e0acf59": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_INDEX__NUMBER.dce303241e": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events_ACTION_NAME.d782bdc8b6": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_NAME__STRING__VARCHAR.aef3f74e78": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events_ACTION_DATA.37e6af2138": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_DATA__OBJECT__VARIANT.cd719dad9e": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events__INGESTED_AT.ca40b88cac": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INGESTED_AT__TIMESTAMP_NTZ.beb4919034": ["model.near.silver__actions_events"], "test.near.not_null_silver__actions_events__INSERTED_TIMESTAMP.df76bc586c": ["model.near.silver__actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.90d45f4520": ["model.near.silver__actions_events"], "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_action_id.046450591f": ["model.near.silver__actions_events"], "test.near.unique_silver__actions_events_function_call_ACTION_ID.0aebdc67ef": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call_ACTION_ID.e5af633f77": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_ID__STRING__VARCHAR.f4da624b73": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call_TX_HASH.fd126fcbeb": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_TX_HASH__STRING__VARCHAR.87af394b75": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call_BLOCK_ID.a6667362d4": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.7ecdd9da08": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP.ee95c263c8": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bb7e2c4ae1": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call_ACTION_NAME.3da3d81b85": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.2d14b866b8": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call_METHOD_NAME.b158811477": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.b54f29ec51": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call_ARGS.7c406f551a": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ARGS__STRING__VARCHAR.52534f59ce": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.f701ff77b5": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.3c97559b63": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call__INGESTED_AT.52800c1fd3": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INGESTED_AT__TIMESTAMP_NTZ.0932adc172": ["model.near.silver__actions_events_function_call"], "test.near.not_null_silver__actions_events_function_call__INSERTED_TIMESTAMP.555a317053": ["model.near.silver__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.fcfa131d7e": ["model.near.silver__actions_events_function_call"], "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_function_call_action_id.e6f91ea7e7": ["model.near.silver__actions_events_function_call"], "test.near.unique_silver__actions_events_addkey_ACTION_ID.00489d51a8": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey_ACTION_ID.4edf0990b1": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ACTION_ID__STRING__VARCHAR.b299cc7a24": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey_TX_HASH.a46964f17a": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_TX_HASH__STRING__VARCHAR.746870d73b": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey_BLOCK_ID.66f719abaa": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.01c027a856": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP.d14083b626": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.609a6b1a0b": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey_NONCE.258a29311a": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_NONCE__NUMBER__FLOAT.efb9933073": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.cf49260aba": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey_PERMISSION.bfcc522a69": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.6bab74d21c": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.e513e01b2a": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.da779b1018": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.94d9b17bc3": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey__INGESTED_AT.f1ff1a384e": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INGESTED_AT__TIMESTAMP_NTZ.c1950b9d47": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP.2afdc88690": ["model.near.silver__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.be94381057": ["model.near.silver__actions_events_addkey"], "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_addkey_action_id.1c71c1dba8": ["model.near.silver__actions_events_addkey"], "test.near.not_null_silver__transfers_TX_HASH.9444c39bdc": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_HASH__STRING__VARCHAR.40c789dddf": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_ACTION_ID.ed62984c52": ["model.near.silver__transfers"], "test.near.unique_silver__transfers_ACTION_ID.4bc39d7cca": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_ACTION_ID__STRING__VARCHAR.17d326c4b4": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_TX_SIGNER.8889abc928": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SIGNER__STRING__VARCHAR.efe1287aa8": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_TX_RECEIVER.86762ea9bb": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_RECEIVER__STRING__VARCHAR.77487e0b81": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_DEPOSIT__NUMBER__FLOAT.2793622130": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_RECEIPT_OBJECT_ID.50e76c1641": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.4c63ae0a29": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_TRANSACTION_FEE.6280370c28": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSACTION_FEE__NUMBER__FLOAT.03d6f98e08": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_GAS_USED.37695a01b1": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_GAS_USED__NUMBER__FLOAT.37f6c7b45f": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers_STATUS.97c41b55b7": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_STATUS__BOOLEAN.0f35e8bff6": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers__INGESTED_AT.49ea10ff8e": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INGESTED_AT__TIMESTAMP_NTZ.b45a311332": ["model.near.silver__transfers"], "test.near.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": ["model.near.silver__transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9d03af31f1": ["model.near.silver__transfers"], "test.near.dbt_utils_unique_combination_of_columns_silver__transfers_action_id.8f42925692": ["model.near.silver__transfers"], "test.near.not_null_silver__receipts_BLOCK_TIMESTAMP.69686ea2e0": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dcaed6531d": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_BLOCK_HASH.fd390123fb": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_HASH__STRING__VARCHAR.dc9fadd0e2": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_TX_HASH.092684b07d": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_TX_HASH__STRING__VARCHAR.ce999cda9a": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_BLOCK_ID.ca1ffaba2c": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_ID__NUMBER__FLOAT.6bc81c63f2": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_RECEIPT_OBJECT_ID.06376365e4": ["model.near.silver__receipts"], "test.near.unique_silver__receipts_RECEIPT_OBJECT_ID.8a8d829305": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.08bf2e2c26": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_RECEIPT_OUTCOME_ID.ddab50600d": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.b3550e7904": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_STATUS_VALUE.65020f0461": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_STATUS_VALUE__VARIANT__OBJECT.3f672f5677": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_LOGS.0ddfd30cfe": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_LOGS__ARRAY__VARIANT__OBJECT.0832b81b1a": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_PROOF.719e5bfe9d": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_PROOF__ARRAY__VARIANT__OBJECT.275a178fc9": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts_METADATA.4fd349d877": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_METADATA__VARIANT__OBJECT.8ef6ddce7f": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts__INGESTED_AT.2bbc2e4e48": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INGESTED_AT__TIMESTAMP_NTZ.6370876547": ["model.near.silver__receipts"], "test.near.not_null_silver__receipts__INSERTED_TIMESTAMP.954d9b172c": ["model.near.silver__receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.6c0ead8d63": ["model.near.silver__receipts"], "test.near.dbt_utils_unique_combination_of_columns_silver__receipts_receipt_object_id.aeae58750c": ["model.near.silver__receipts"], "test.near.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_BLOCK_AUTHOR.bb49b754c9": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_AUTHOR__STRING__VARCHAR.f4666ef6b9": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_RESULT.3d30e8c870": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.fbf6d23a9e": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_ROOT.fa33553147": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.094aac3d39": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_CHUNK_HEADERS_ROOT.f1b8cdfa33": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.42d0fd7136": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_CHUNK_MASK.18bc24d091": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.8f04a8e609": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_CHUNK_RECEIPTS_ROOT.6cbf5f3378": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.4ed79567e1": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_CHUNK_TX_ROOT.bff513a312": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_TX_ROOT__STRING__VARCHAR.5ce50838dc": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_CHUNKS.83d5b713fc": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS__ARRAY__VARIANT__OBJECT.dd17974b98": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_CHUNKS_INCLUDED.98715a934b": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS_INCLUDED__NUMBER.5626b73674": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_EPOCH_ID.c0f6044087": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_ID__STRING__VARCHAR.f0cc32fbb4": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.a7fd17668f": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_EVENTS.d6d4d9ddb1": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVENTS__ARRAY__VARIANT__OBJECT.4f7e7341b5": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_GAS_PRICE.d6ea3582a6": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_PRICE__NUMBER__FLOAT.d986a9c078": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_LAST_DS_FINAL_BLOCK.2dd2764b73": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.55b62140ba": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_LAST_FINAL_BLOCK.cd0127605a": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.012f2dca96": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_LATEST_PROTOCOL_VERSION.5aa205aa7c": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.0acc8b26f1": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_NEXT_BP_HASH.8958fe32fe": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_BP_HASH__STRING__VARCHAR.5487ce1db5": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_NEXT_EPOCH_ID.fa366de380": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_EPOCH_ID__STRING__VARCHAR.75f106b40a": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_OUTCOME_ROOT.ab5b96f9d8": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_OUTCOME_ROOT__STRING__VARCHAR.518869455e": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_PREV_HASH.28fbc77a14": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HASH__STRING__VARCHAR.8b1070f986": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HEIGHT__NUMBER__FLOAT.4175a577d3": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_STATE_ROOT__STRING__VARCHAR.4b3704efd9": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_RANDOM_VALUE.db4ad67b9b": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RANDOM_VALUE__STRING__VARCHAR.9d93972b2c": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_RENT_PAID.3c7dbecf7a": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RENT_PAID__NUMBER__FLOAT.be9c732cbc": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_SIGNATURE.a341779cdc": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIGNATURE__STRING__VARCHAR.6fdebd747e": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_TOTAL_SUPPLY.5b273acde2": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_SUPPLY__NUMBER__FLOAT.67c227c99e": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_VALIDATOR_PROPOSALS.402c0d6cd4": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3b5e9bf985": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks_VALIDATOR_REWARD.66191ea9b3": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_REWARD__NUMBER__FLOAT.3b6dba6ddd": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks__INGESTED_AT.8dcde2b926": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INGESTED_AT__TIMESTAMP_NTZ.895a7802bb": ["model.near.silver__blocks"], "test.near.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": ["model.near.silver__blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": ["model.near.silver__blocks"], "test.near.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": ["model.near.silver__blocks"], "test.near.sequence_gaps_silver__blocks_block_id.c10db99188": ["model.near.silver__blocks"], "test.near.not_null_silver__transactions_BLOCK_ID.ba1565770d": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_HASH__STRING__VARCHAR.8e7de06afe": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_TX_HASH.8a2cc32062": ["model.near.silver__transactions"], "test.near.unique_silver__transactions_TX_HASH.1b18756021": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_HASH__STRING__VARCHAR.c3974f687b": ["model.near.silver__transactions"], "test.near.tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.4e5bbcd183": ["model.near.silver__blocks", "model.near.silver__transactions"], "test.near.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_NONCE.3eac435cf9": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER.c65f59222f": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_SIGNATURE.2b66681922": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_SIGNATURE__STRING__VARCHAR.f8faaafc67": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_TX_RECEIVER.4e66e153ff": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_RECEIVER__STRING__VARCHAR.b209d322bb": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_TX_SIGNER.d32526a192": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SIGNER__STRING__VARCHAR.ea1d98a242": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_TX.9b16114c6b": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX__OBJECT__VARIANT.db7514cc23": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_GAS_USED.1c943486c0": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_ATTACHED_GAS.86e427e695": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_ATTACHED_GAS__NUMBER__FLOAT.ca8df525bf": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions_TRANSACTION_FEE.f9ae18cb8e": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TRANSACTION_FEE__NUMBER__FLOAT.58acc1d5fa": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions__INGESTED_AT.513b40bce6": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INGESTED_AT__TIMESTAMP_NTZ.9fdb673d6d": ["model.near.silver__transactions"], "test.near.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": ["model.near.silver__transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.82828385ba": ["model.near.silver__transactions"], "test.near.dbt_utils_unique_combination_of_columns_silver__transactions_tx_hash.8c46c2d054": ["model.near.silver__transactions"], "test.near.not_null_core__metrics_active_wallets_DATE.e216e96b9f": ["model.near.core__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DATE__TIMESTAMP_NTZ.c8fb0475a5": ["model.near.core__metrics_active_wallets"], "test.near.not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS.3d580a2aec": ["model.near.core__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.c7f44ee269": ["model.near.core__metrics_active_wallets"], "test.near.not_null_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.35aa4e3a63": ["model.near.core__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.e470f71374": ["model.near.core__metrics_active_wallets"], "test.near.not_null_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.2c18d2f5a2": ["model.near.core__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.b291db12c6": ["model.near.core__metrics_active_wallets"], "test.near.not_null_core__fact_receipts_BLOCK_TIMESTAMP.2131bf1bd4": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.131cd7814d": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_BLOCK_ID.a70b3ec0f3": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_ID__NUMBER__FLOAT.ec0ede8b55": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_TX_HASH.6cfac33e8b": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_TX_HASH__STRING__VARCHAR.30fd0ae348": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_RECEIPT_OBJECT_ID.7a20facc22": ["model.near.core__fact_receipts"], "test.near.unique_core__fact_receipts_RECEIPT_OBJECT_ID.3acffe8bbc": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.48ff7d111b": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_RECEIPT_OUTCOME_ID.0f88cf2275": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.e6844aa406": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_STATUS_VALUE.b9afe0d6c8": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.8d495dea59": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_LOGS.7d958c6c70": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.64b40f6319": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_PROOF.f87e0a861a": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.68f68c9ca5": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_receipts_METADATA.1c2890c002": ["model.near.core__fact_receipts"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_METADATA__VARIANT__OBJECT.2b3564522a": ["model.near.core__fact_receipts"], "test.near.dbt_utils_unique_combination_of_columns_core__fact_receipts_receipt_object_id.35d39f53d3": ["model.near.core__fact_receipts"], "test.near.not_null_core__fact_transfers_TX_HASH.c87ad45814": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_HASH__STRING__VARCHAR.57c33210d9": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_ACTION_ID.83ca5f9491": ["model.near.core__fact_transfers"], "test.near.unique_core__fact_transfers_ACTION_ID.255545e315": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_ACTION_ID__STRING__VARCHAR.026af98ae9": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_BLOCK_ID.648269a816": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_ID__NUMBER__FLOAT.e7d2e322db": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c7d4b2dcc4": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_TX_SIGNER.72b64bbdc5": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_SIGNER__STRING__VARCHAR.41f78a5cbf": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_TX_RECEIVER.b26269ec01": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_RECEIVER__STRING__VARCHAR.544777a31b": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_DEPOSIT__NUMBER__FLOAT.ca85ed9e7b": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_RECEIPT_OBJECT_ID.ed751abb27": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.43115f488b": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_TRANSACTION_FEE.978781f3e2": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.ca559cda44": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_GAS_USED.2d21e3e13b": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_GAS_USED__NUMBER__FLOAT.94be9f0e75": ["model.near.core__fact_transfers"], "test.near.not_null_core__fact_transfers_STATUS.e9e8e89071": ["model.near.core__fact_transfers"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_STATUS__BOOLEAN.627be1deff": ["model.near.core__fact_transfers"], "test.near.dbt_utils_unique_combination_of_columns_core__fact_transfers_action_id.c40db96f05": ["model.near.core__fact_transfers"], "test.near.not_null_core__metrics_daily_gas_DATE.e93f30304c": ["model.near.core__metrics_daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DATE__TIMESTAMP_NTZ.7fc22ddbd1": ["model.near.core__metrics_daily_gas"], "test.near.not_null_core__metrics_daily_gas_DAILY_GAS_USED.81dbf7d774": ["model.near.core__metrics_daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dc5579812f": ["model.near.core__metrics_daily_gas"], "test.near.not_null_core__metrics_daily_gas_AVG_GAS_PRICE.cfe52e479f": ["model.near.core__metrics_daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.c7b6707f47": ["model.near.core__metrics_daily_gas"], "test.near.not_null_core__metrics_daily_transactions_DATE.e6a4a28bb7": ["model.near.core__metrics_daily_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.c5185f3b2e": ["model.near.core__metrics_daily_transactions"], "test.near.not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS.97ecb32576": ["model.near.core__metrics_daily_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.7aae6c528a": ["model.near.core__metrics_daily_transactions"], "test.near.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER__FLOAT.aaaed2f742": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_BLOCK_HASH.9c04323b46": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_HASH__STRING__VARCHAR.a8595b41b4": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_TX_HASH.39424a47eb": ["model.near.core__fact_transactions"], "test.near.unique_core__fact_transactions_TX_HASH.bd5b814c00": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_HASH__STRING__VARCHAR.22d1ce92d4": ["model.near.core__fact_transactions"], "test.near.tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.bda374f7b7": ["model.near.core__fact_transactions", "model.near.silver__blocks"], "test.near.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_NONCE.c2d5fd20f8": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_NONCE__NUMBER.ee76e273d4": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_SIGNATURE.a81f4191ab": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_SIGNATURE__STRING__VARCHAR.cf9e07fb1f": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_TX_RECEIVER.4aa25511f1": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_RECEIVER__STRING__VARCHAR.a022fd33f0": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_TX_SIGNER.1e3f66037b": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SIGNER__STRING__VARCHAR.5e2ba493c7": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_TX.73062d241f": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX__OBJECT__VARIANT.ddb63cbbfb": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_GAS_USED.2e66666fc1": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_GAS_USED__NUMBER__FLOAT.20eb0c8c56": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_ATTACHED_GAS.037947542a": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.71a10af259": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_transactions_TRANSACTION_FEE.3a5a122a8a": ["model.near.core__fact_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.c2ea03089f": ["model.near.core__fact_transactions"], "test.near.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_hash.3d89edf2d5": ["model.near.core__fact_transactions"], "test.near.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_TX_COUNT.dd649c1087": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_BLOCK_AUTHOR.03877d0ca8": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.7f1e1839b5": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT.0d9408b3d7": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ce8453804e": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT.f8a53e4a6f": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.9f986cff8f": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_CHUNK_HEADERS_ROOT.180c276606": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.523ab13c7b": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_CHUNK_MASK.dc734c8cdc": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.371605784f": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT.8452bbf40e": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.dd534c5f41": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_CHUNK_TX_ROOT.e511e456ca": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.2bcb6419e4": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_CHUNKS.f92140c302": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.64870ea308": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_CHUNKS_INCLUDED.937aec6f78": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS_INCLUDED__NUMBER.e4c1b3aa07": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_EPOCH_ID.fc61bf616f": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_ID__STRING__VARCHAR.6859f40465": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.98f9b955fd": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_EVENTS.e54a49d376": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.46b3985524": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_GAS_PRICE.58aa885a95": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_GAS_PRICE__NUMBER__FLOAT.fa7e1b932c": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK.495c60fd78": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.9e09f6d941": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_LAST_FINAL_BLOCK.d990393f83": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.25992c91ad": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION.d77e1eb866": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.4d169e143d": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_NEXT_BP_HASH.a8e45079bd": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.d82841de9b": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_NEXT_EPOCH_ID.bd4ec4a2ff": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.5a9d13bab7": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_OUTCOME_ROOT.f6f91076b5": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.06f7e42899": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_PREV_HASH.3d44f4d8e3": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HASH__STRING__VARCHAR.cb8c19abe8": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.1abb35f272": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.1f0ccb1649": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_RANDOM_VALUE.b03444e241": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.962f1c1f84": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_RENT_PAID.ddb4e81a61": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RENT_PAID__NUMBER__FLOAT.763ecc5553": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_SIGNATURE.15645d592a": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_SIGNATURE__STRING__VARCHAR.26c1b90668": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_TOTAL_SUPPLY.3f37be811b": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.ec94b7fc4e": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_VALIDATOR_PROPOSALS.07b595a2da": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3bfbd1964d": ["model.near.core__fact_blocks"], "test.near.not_null_core__fact_blocks_VALIDATOR_REWARD.9e6492b364": ["model.near.core__fact_blocks"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.920e7b7fdf": ["model.near.core__fact_blocks"], "test.near.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": ["model.near.core__fact_blocks"], "test.near.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": ["model.near.core__fact_blocks"], "test.near.unique_core__fact_actions_events_ACTION_ID.14a38faeff": ["model.near.core__fact_actions_events"], "test.near.not_null_core__fact_actions_events_ACTION_ID.afe8ac7f43": ["model.near.core__fact_actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_ID__STRING__VARCHAR.74fc819b38": ["model.near.core__fact_actions_events"], "test.near.not_null_core__fact_actions_events_TX_HASH.9a2156dfa3": ["model.near.core__fact_actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_TX_HASH__STRING__VARCHAR.b0c91a3528": ["model.near.core__fact_actions_events"], "test.near.not_null_core__fact_actions_events_BLOCK_ID.34d4029e61": ["model.near.core__fact_actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_ID__NUMBER__FLOAT.632f6cabad": ["model.near.core__fact_actions_events"], "test.near.not_null_core__fact_actions_events_BLOCK_TIMESTAMP.a689694c81": ["model.near.core__fact_actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77b3fcda85": ["model.near.core__fact_actions_events"], "test.near.not_null_core__fact_actions_events_ACTION_INDEX.5ac72a11ef": ["model.near.core__fact_actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_INDEX__NUMBER.079ff35912": ["model.near.core__fact_actions_events"], "test.near.not_null_core__fact_actions_events_ACTION_NAME.ce486ef218": ["model.near.core__fact_actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_NAME__STRING__VARCHAR.ecec2e0760": ["model.near.core__fact_actions_events"], "test.near.not_null_core__fact_actions_events_ACTION_DATA.315199ec0d": ["model.near.core__fact_actions_events"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.3e5207fbd8": ["model.near.core__fact_actions_events"], "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_action_id.a5163dfbf7": ["model.near.core__fact_actions_events"], "test.near.unique_core__fact_actions_events_addkey_ACTION_ID.216a213bdc": ["model.near.core__fact_actions_events_addkey"], "test.near.not_null_core__fact_actions_events_addkey_ACTION_ID.dccfec4147": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ACTION_ID__STRING__VARCHAR.9e0178a829": ["model.near.core__fact_actions_events_addkey"], "test.near.not_null_core__fact_actions_events_addkey_TX_HASH.e89dbaf1ea": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_TX_HASH__STRING__VARCHAR.b088e4c818": ["model.near.core__fact_actions_events_addkey"], "test.near.not_null_core__fact_actions_events_addkey_BLOCK_ID.dedba2fccf": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.fb08eaa895": ["model.near.core__fact_actions_events_addkey"], "test.near.not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP.f40ba74833": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b9da13f93b": ["model.near.core__fact_actions_events_addkey"], "test.near.not_null_core__fact_actions_events_addkey_NONCE.00a670b423": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_NONCE__NUMBER__FLOAT.cde0474be1": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.0746fc57ee": ["model.near.core__fact_actions_events_addkey"], "test.near.not_null_core__fact_actions_events_addkey_PERMISSION.784eed916e": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.d9006fbe3b": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.70c63ee616": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.64aec323e5": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.ee3c8e9b0c": ["model.near.core__fact_actions_events_addkey"], "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_addkey_action_id.6cc237fc2b": ["model.near.core__fact_actions_events_addkey"], "test.near.unique_core__fact_actions_events_function_call_ACTION_ID.b4577325c1": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_core__fact_actions_events_function_call_ACTION_ID.9f9becf33c": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_ID__STRING__VARCHAR.6ea7dbc24c": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_core__fact_actions_events_function_call_TX_HASH.8d8f00d929": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_TX_HASH__STRING__VARCHAR.35c28539f2": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_core__fact_actions_events_function_call_BLOCK_ID.bc91cebe92": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.08e78462cf": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_core__fact_actions_events_function_call_BLOCK_TIMESTAMP.ca4ba7867c": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7290f88a39": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_core__fact_actions_events_function_call_ACTION_NAME.2cf18d974f": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_NAME__STRING__VARCHAR.c7023a515b": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_core__fact_actions_events_function_call_METHOD_NAME.2baddbe78e": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_METHOD_NAME__STRING__VARCHAR.f53ecaf4ea": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_core__fact_actions_events_function_call_ARGS.967716b874": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ARGS__STRING__VARCHAR.c1cd00ec20": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_DEPOSIT__NUMBER__FLOAT.4ce2dd5fea": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.ffc83d58d0": ["model.near.core__fact_actions_events_function_call"], "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_function_call_action_id.8fa1f51914": ["model.near.core__fact_actions_events_function_call"], "test.near.not_null_legacy__fact_transactions_BLOCK_HEIGHT.f6f420e0ca": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HEIGHT__NUMBER__FLOAT.cdbbea33c8": [], "test.near.not_null_legacy__fact_transactions_BLOCK_HASH.3e1b276ffe": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HASH__STRING__VARCHAR.567551ac57": [], "test.near.not_null_legacy__fact_transactions_TXN_HASH.e7d990ff22": [], "test.near.unique_legacy__fact_transactions_TXN_HASH.778f45dbb7": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TXN_HASH__STRING__VARCHAR.5bfca8f9fc": [], "test.near.tx_gaps_legacy__fact_transactions_block_height__TXN_HASH__tx_count.dcf3282caa": ["model.near.silver__blocks"], "test.near.not_null_legacy__fact_transactions_BLOCK_TIMESTAMP.63bab18e0b": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_transactions_BLOCK_TIMESTAMP__day__1.8ba22e6a63": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.215332aabd": [], "test.near.not_null_legacy__fact_transactions_NONCE.d1de0f7bc3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_NONCE__NUMBER.c5ed129d92": [], "test.near.not_null_legacy__fact_transactions_SIGNATURE.7b2054b4f8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_SIGNATURE__STRING__VARCHAR.f3af377c90": [], "test.near.not_null_legacy__fact_transactions_TX_RECEIVER.9898736721": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_RECEIVER__STRING__VARCHAR.1825318b52": [], "test.near.not_null_legacy__fact_transactions_TX_SIGNER.150b389871": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_SIGNER__STRING__VARCHAR.4613bf6268": [], "test.near.not_null_legacy__fact_transactions_TX.cf8fb8cefd": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX__OBJECT__VARIANT.310bce14a5": [], "test.near.not_null_legacy__fact_transactions_GAS_USED.8ba235ae95": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_GAS_USED__NUMBER__FLOAT.ceb684ac3a": [], "test.near.not_null_legacy__fact_transactions_ATTACHED_GAS.68eff6bb1f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.7112e3bcc2": [], "test.near.not_null_legacy__fact_transactions_TRANSACTION_FEE.026038f06e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.4bb3f91f80": [], "test.near.not_null_legacy__fact_transactions_INGESTED_AT.18e806fe80": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_INGESTED_AT__TIMESTAMP_NTZ.3cce6e8e12": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transactions_txn_hash.920aa0eac1": [], "test.near.not_null_legacy__fact_receipts_BLOCK_TIMESTAMP.0a993c019c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e94352b542": [], "test.near.not_null_legacy__fact_receipts_BLOCK_HASH.b3bb9714b6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_HASH__STRING__VARCHAR.bf119892a0": [], "test.near.not_null_legacy__fact_receipts_TXN_HASH.be70ce3052": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_TXN_HASH__STRING__VARCHAR.35121e913f": [], "test.near.not_null_legacy__fact_receipts_RECEIPT_OBJECT_ID.ca05b958b0": [], "test.near.unique_legacy__fact_receipts_RECEIPT_OBJECT_ID.0406b31ae4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.a2943d41f6": [], "test.near.not_null_legacy__fact_receipts_RECEIPT_OUTCOME_ID.a03ccee4f9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.6fe6c1421a": [], "test.near.not_null_legacy__fact_receipts_STATUS_VALUE.0d7d7478f9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.a0ee8199b8": [], "test.near.not_null_legacy__fact_receipts_LOGS.d78268315a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.f83a3bef09": [], "test.near.not_null_legacy__fact_receipts_PROOF.a87d9a5d78": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.2b1b4ea49a": [], "test.near.not_null_legacy__fact_receipts_METADATA.f0a09f639b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_METADATA__VARIANT__OBJECT.7c60b3b5d3": [], "test.near.not_null_legacy__fact_receipts_INGESTED_AT.ca007600fa": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_INGESTED_AT__TIMESTAMP_NTZ.0c3ae85bc8": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_receipts_receipt_object_id.6f207b9f68": [], "test.near.not_null_legacy__metrics_daily_gas_DATE.b7ce3e8705": ["model.near.legacy__metrics_daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DATE__TIMESTAMP_NTZ.6c3efd0549": ["model.near.legacy__metrics_daily_gas"], "test.near.not_null_legacy__metrics_daily_gas_DAILY_GAS_USED.8dde196c1f": ["model.near.legacy__metrics_daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dee5e60275": ["model.near.legacy__metrics_daily_gas"], "test.near.not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE.224ef8b8fa": ["model.near.legacy__metrics_daily_gas"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fc74c08c1": ["model.near.legacy__metrics_daily_gas"], "test.near.unique_legacy__actions_events_addkey_ACTION_ID.40bbecd7f5": ["model.near.legacy__actions_events_addkey"], "test.near.not_null_legacy__actions_events_addkey_ACTION_ID.dc8eb8f528": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ACTION_ID__STRING__VARCHAR.3f1dab391f": ["model.near.legacy__actions_events_addkey"], "test.near.not_null_legacy__actions_events_addkey_TXN_HASH.2faf69db95": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_TXN_HASH__STRING__VARCHAR.2fb84e452c": ["model.near.legacy__actions_events_addkey"], "test.near.not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP.5b0fded5e2": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.061fffe0f5": ["model.near.legacy__actions_events_addkey"], "test.near.not_null_legacy__actions_events_addkey_NONCE.d16bc1a85f": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_NONCE__NUMBER__FLOAT.2ec337e9fb": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.8c9f09e891": ["model.near.legacy__actions_events_addkey"], "test.near.not_null_legacy__actions_events_addkey_PERMISSION.4e70882555": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.3432f433a3": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.595b784062": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.131f54ed4c": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.484af82c3f": ["model.near.legacy__actions_events_addkey"], "test.near.not_null_legacy__actions_events_addkey_INGESTED_AT.44974f3f39": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_INGESTED_AT__TIMESTAMP_NTZ.a51c00d639": ["model.near.legacy__actions_events_addkey"], "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_addkey_action_id.fbca6bc6f5": ["model.near.legacy__actions_events_addkey"], "test.near.not_null_legacy__metrics_daily_transactions_DATE.c07730a5cb": ["model.near.legacy__metrics_daily_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.214854c836": ["model.near.legacy__metrics_daily_transactions"], "test.near.not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS.1fc65733ab": ["model.near.legacy__metrics_daily_transactions"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.b78d14e061": ["model.near.legacy__metrics_daily_transactions"], "test.near.not_null_legacy__metrics_active_wallets_DATE.8088614fba": ["model.near.legacy__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DATE__TIMESTAMP_NTZ.6bef460b85": ["model.near.legacy__metrics_active_wallets"], "test.near.not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS.4936c0f6c7": ["model.near.legacy__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.cff654759a": ["model.near.legacy__metrics_active_wallets"], "test.near.not_null_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.66a6e18833": ["model.near.legacy__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.882a8911ad": ["model.near.legacy__metrics_active_wallets"], "test.near.not_null_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.4591283c55": ["model.near.legacy__metrics_active_wallets"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.5b88245628": ["model.near.legacy__metrics_active_wallets"], "test.near.unique_legacy__fact_actions_events_ACTION_ID.7a6ef791b6": [], "test.near.not_null_legacy__fact_actions_events_ACTION_ID.c704b98de5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_ID__STRING__VARCHAR.104e8d459b": [], "test.near.not_null_legacy__fact_actions_events_TXN_HASH.689b1e068c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_TXN_HASH__STRING__VARCHAR.77878f662a": [], "test.near.not_null_legacy__fact_actions_events_BLOCK_TIMESTAMP.38bc1deb2d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.da1290b149": [], "test.near.not_null_legacy__fact_actions_events_ACTION_INDEX.d33d9ab9c5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_INDEX__NUMBER.6a60f2bc0c": [], "test.near.not_null_legacy__fact_actions_events_ACTION_NAME.3f266126d5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_NAME__STRING__VARCHAR.b942c238b0": [], "test.near.not_null_legacy__fact_actions_events_ACTION_DATA.291c032316": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.cc5dcc3177": [], "test.near.not_null_legacy__fact_actions_events_INGESTED_AT.c7a191a7b2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_INGESTED_AT__TIMESTAMP_NTZ.5635930a89": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_actions_events_action_id.df6ecf13a3": [], "test.near.not_null_legacy__fact_blocks_BLOCK_HEIGHT.0c72c24b53": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HEIGHT__NUMBER__FLOAT.0b88ef0890": [], "test.near.not_null_legacy__fact_blocks_BLOCK_TIMESTAMP.5125651933": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_blocks_BLOCK_TIMESTAMP__day__1.041b5d1089": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b0361409f6": [], "test.near.not_null_legacy__fact_blocks_BLOCK_HASH.8cbfe88315": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HASH__STRING__VARCHAR.bab378c107": [], "test.near.not_null_legacy__fact_blocks_TX_COUNT.74c06f6cb0": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TX_COUNT__NUMBER__FLOAT.ca9ccb68ac": [], "test.near.not_null_legacy__fact_blocks_BLOCK_AUTHOR.c18782dd0a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.ddbca22b31": [], "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT.2cce92b62d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ebf655d3ad": [], "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT.b107e77a10": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.c505daa4f9": [], "test.near.not_null_legacy__fact_blocks_CHUNK_HEADERS_ROOT.f539519d87": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.08bc739a9a": [], "test.near.not_null_legacy__fact_blocks_CHUNK_MASK.925795b1ed": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.c7fc4626cd": [], "test.near.not_null_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT.09b07dc5ba": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.e5acf07216": [], "test.near.not_null_legacy__fact_blocks_CHUNK_TX_ROOT.af05587c81": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.36cdd7f908": [], "test.near.not_null_legacy__fact_blocks_CHUNKS.a355b30fb6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.8beb7e7ce9": [], "test.near.not_null_legacy__fact_blocks_CHUNKS_INCLUDED.2d284e80be": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS_INCLUDED__NUMBER.ed92aa0bdb": [], "test.near.not_null_legacy__fact_blocks_EPOCH_ID.de14654928": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_ID__STRING__VARCHAR.9e4c5feda2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.76ae679417": [], "test.near.not_null_legacy__fact_blocks_EVENTS.40547dd206": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.a449d09069": [], "test.near.not_null_legacy__fact_blocks_GAS_PRICE.084565c029": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_GAS_PRICE__NUMBER__FLOAT.30ff82ffbf": [], "test.near.not_null_legacy__fact_blocks_LAST_DS_FINAL_BLOCK.3da8465b06": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.49fa21b970": [], "test.near.not_null_legacy__fact_blocks_LAST_FINAL_BLOCK.4f0a0e0cfe": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.e3b4b6a4f7": [], "test.near.not_null_legacy__fact_blocks_LATEST_PROTOCOL_VERSION.95f174308c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.8aa42afa5e": [], "test.near.not_null_legacy__fact_blocks_NEXT_BP_HASH.bc6713bb7e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.ce6393f196": [], "test.near.not_null_legacy__fact_blocks_NEXT_EPOCH_ID.fa89d8dc9e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.9958696d0e": [], "test.near.not_null_legacy__fact_blocks_OUTCOME_ROOT.00db67ee0a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.5fac74f8b3": [], "test.near.not_null_legacy__fact_blocks_PREV_HASH.7d1d30a300": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HASH__STRING__VARCHAR.7acd8482c3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.a1682461a9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.b44c2c0b64": [], "test.near.not_null_legacy__fact_blocks_RANDOM_VALUE.3afa0d1330": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.d5ff9715d1": [], "test.near.not_null_legacy__fact_blocks_RENT_PAID.433829732a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RENT_PAID__NUMBER__FLOAT.1adca7443b": [], "test.near.not_null_legacy__fact_blocks_SIGNATURE.c4c102726f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_SIGNATURE__STRING__VARCHAR.7f0ff2e091": [], "test.near.not_null_legacy__fact_blocks_TOTAL_SUPPLY.76125a8d28": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.9e6a35d550": [], "test.near.not_null_legacy__fact_blocks_VALIDATOR_PROPOSALS.0a0009c7ce": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.6f1de7d549": [], "test.near.not_null_legacy__fact_blocks_VALIDATOR_REWARD.8ad521519f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.4144fd04e2": [], "test.near.not_null_legacy__fact_blocks_INGESTED_AT.ab80b7d20d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_INGESTED_AT__TIMESTAMP_NTZ.b4762b6393": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_blocks_block_height.f492d15aae": [], "test.near.sequence_gaps_legacy__fact_blocks_block_height.6ecba80cbc": [], "test.near.unique_legacy__actions_events_function_call_ACTION_ID.e5e531935f": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__actions_events_function_call_ACTION_ID.4cf07754fd": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_ID__STRING__VARCHAR.716a440a4c": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__actions_events_function_call_TXN_HASH.727ee630e2": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_TXN_HASH__STRING__VARCHAR.cad6dfeab4": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP.b5bd835f72": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f9710820a2": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__actions_events_function_call_ACTION_NAME.da607dba3f": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.9fce890a9f": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__actions_events_function_call_METHOD_NAME.e2fe951cfd": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.77375f0b47": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__actions_events_function_call_ARGS.a50d123058": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ARGS__STRING__VARCHAR.ce45913ff9": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.a399eb9636": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.9693d99ead": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__actions_events_function_call_INGESTED_AT.59110792cd": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_INGESTED_AT__TIMESTAMP_NTZ.78e74614e5": ["model.near.legacy__actions_events_function_call"], "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_function_call_action_id.b7dfc55b85": ["model.near.legacy__actions_events_function_call"], "test.near.not_null_legacy__fact_transfers_TXN_HASH.16c59cb760": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TXN_HASH__STRING__VARCHAR.f3e369fd77": [], "test.near.not_null_legacy__fact_transfers_ACTION_ID.48c79864eb": [], "test.near.unique_legacy__fact_transfers_ACTION_ID.45c1e050b6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_ACTION_ID__STRING__VARCHAR.1a0adccdc7": [], "test.near.not_null_legacy__fact_transfers_BLOCK_TIMESTAMP.bdbaa04704": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ac93b47b33": [], "test.near.not_null_legacy__fact_transfers_TX_SIGNER.3ef893bdb4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_SIGNER__STRING__VARCHAR.884531b134": [], "test.near.not_null_legacy__fact_transfers_TX_RECEIVER.0a769265be": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_RECEIVER__STRING__VARCHAR.ff85e4d948": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_DEPOSIT__NUMBER__FLOAT.6da907196e": [], "test.near.not_null_legacy__fact_transfers_RECEIPT_OBJECT_ID.2b9042d14a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.d7f3287b6f": [], "test.near.not_null_legacy__fact_transfers_TRANSACTION_FEE.91b3d39e86": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.41dc5b0729": [], "test.near.not_null_legacy__fact_transfers_GAS_USED.2e28f8402b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_GAS_USED__NUMBER__FLOAT.b0db67249c": [], "test.near.not_null_legacy__fact_transfers_STATUS.a8ad7ca387": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_STATUS__BOOLEAN.8326a0cd6a": [], "test.near.not_null_legacy__fact_transfers_INGESTED_AT.cb77e279c5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_INGESTED_AT__TIMESTAMP_NTZ.5c9c93a518": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transfers_action_id.7e6c6967bf": [], "source.near.chainwalkers.near_blocks": [], "source.near.chainwalkers.near_txs": [], "source.near.near.blocks": [], "source.near.near.transactions": [], "source.near.near.transfers": [], "source.near.near.actions_events": [], "source.near.near.actions_events_addkey": [], "source.near.near.actions_events_function_call": []}, "child_map": {"model.near.metrics__daily_transactions": ["model.near.core__metrics_daily_transactions", "model.near.legacy__metrics_daily_transactions", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.1c6ef5916e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DATE__TIMESTAMP_NTZ.3213a9fa9c", "test.near.not_null_metrics__daily_transactions_DAILY_TRANSACTIONS.d6758050ca", "test.near.not_null_metrics__daily_transactions_DATE.0543993236"], "model.near.metrics__active_wallets": ["model.near.core__metrics_active_wallets", "model.near.legacy__metrics_active_wallets", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.6302ce454e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DATE__TIMESTAMP_NTZ.18a04c8920", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.3020e05b84", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.bc563f5075", "test.near.not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS.533dd6e2f2", "test.near.not_null_metrics__active_wallets_DATE.0f49548353", "test.near.not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.06610cea73", "test.near.not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.f220db236c"], "model.near.metrics__daily_gas": ["model.near.core__metrics_daily_gas", "model.near.legacy__metrics_daily_gas", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fd6bec3a6", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.6246eae8fd", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DATE__TIMESTAMP_NTZ.e1d1b1fca2", "test.near.not_null_metrics__daily_gas_AVG_GAS_PRICE.5d03852ee5", "test.near.not_null_metrics__daily_gas_DAILY_GAS_USED.dfcbff5ad4", "test.near.not_null_metrics__daily_gas_DATE.d5118a8fda"], "model.near.silver__blocks": ["model.near.core__fact_blocks", "model.near.legacy__blocks", "model.near.metrics__daily_gas", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_AUTHOR__STRING__VARCHAR.f4666ef6b9", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.fbf6d23a9e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.094aac3d39", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS_INCLUDED__NUMBER.5626b73674", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS__ARRAY__VARIANT__OBJECT.dd17974b98", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.42d0fd7136", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.8f04a8e609", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.4ed79567e1", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_TX_ROOT__STRING__VARCHAR.5ce50838dc", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_ID__STRING__VARCHAR.f0cc32fbb4", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.a7fd17668f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVENTS__ARRAY__VARIANT__OBJECT.4f7e7341b5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_PRICE__NUMBER__FLOAT.d986a9c078", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.55b62140ba", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.012f2dca96", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.0acc8b26f1", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_BP_HASH__STRING__VARCHAR.5487ce1db5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_EPOCH_ID__STRING__VARCHAR.75f106b40a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_OUTCOME_ROOT__STRING__VARCHAR.518869455e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HASH__STRING__VARCHAR.8b1070f986", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HEIGHT__NUMBER__FLOAT.4175a577d3", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_STATE_ROOT__STRING__VARCHAR.4b3704efd9", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RANDOM_VALUE__STRING__VARCHAR.9d93972b2c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RENT_PAID__NUMBER__FLOAT.be9c732cbc", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIGNATURE__STRING__VARCHAR.6fdebd747e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_SUPPLY__NUMBER__FLOAT.67c227c99e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3b5e9bf985", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_REWARD__NUMBER__FLOAT.3b6dba6ddd", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INGESTED_AT__TIMESTAMP_NTZ.895a7802bb", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "test.near.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "test.near.not_null_silver__blocks_BLOCK_AUTHOR.bb49b754c9", "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_RESULT.3d30e8c870", "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_ROOT.fa33553147", "test.near.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "test.near.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.near.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.near.not_null_silver__blocks_CHUNKS.83d5b713fc", "test.near.not_null_silver__blocks_CHUNKS_INCLUDED.98715a934b", "test.near.not_null_silver__blocks_CHUNK_HEADERS_ROOT.f1b8cdfa33", "test.near.not_null_silver__blocks_CHUNK_MASK.18bc24d091", "test.near.not_null_silver__blocks_CHUNK_RECEIPTS_ROOT.6cbf5f3378", "test.near.not_null_silver__blocks_CHUNK_TX_ROOT.bff513a312", "test.near.not_null_silver__blocks_EPOCH_ID.c0f6044087", "test.near.not_null_silver__blocks_EVENTS.d6d4d9ddb1", "test.near.not_null_silver__blocks_GAS_PRICE.d6ea3582a6", "test.near.not_null_silver__blocks_LAST_DS_FINAL_BLOCK.2dd2764b73", "test.near.not_null_silver__blocks_LAST_FINAL_BLOCK.cd0127605a", "test.near.not_null_silver__blocks_LATEST_PROTOCOL_VERSION.5aa205aa7c", "test.near.not_null_silver__blocks_NEXT_BP_HASH.8958fe32fe", "test.near.not_null_silver__blocks_NEXT_EPOCH_ID.fa366de380", "test.near.not_null_silver__blocks_OUTCOME_ROOT.ab5b96f9d8", "test.near.not_null_silver__blocks_PREV_HASH.28fbc77a14", "test.near.not_null_silver__blocks_RANDOM_VALUE.db4ad67b9b", "test.near.not_null_silver__blocks_RENT_PAID.3c7dbecf7a", "test.near.not_null_silver__blocks_SIGNATURE.a341779cdc", "test.near.not_null_silver__blocks_TOTAL_SUPPLY.5b273acde2", "test.near.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.near.not_null_silver__blocks_VALIDATOR_PROPOSALS.402c0d6cd4", "test.near.not_null_silver__blocks_VALIDATOR_REWARD.66191ea9b3", "test.near.not_null_silver__blocks__INGESTED_AT.8dcde2b926", "test.near.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "test.near.sequence_gaps_silver__blocks_block_id.c10db99188", "test.near.tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.bda374f7b7", "test.near.tx_gaps_legacy__fact_transactions_block_height__TXN_HASH__tx_count.dcf3282caa", "test.near.tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.4e5bbcd183"], "model.near.silver__actions_events_addkey": ["model.near.core__fact_actions_events_addkey", "model.near.legacy__actions_events_addkey", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ACTION_ID__STRING__VARCHAR.b299cc7a24", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.e513e01b2a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.01c027a856", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.609a6b1a0b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.da779b1018", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_NONCE__NUMBER__FLOAT.efb9933073", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.6bab74d21c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.cf49260aba", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.94d9b17bc3", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_TX_HASH__STRING__VARCHAR.746870d73b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INGESTED_AT__TIMESTAMP_NTZ.c1950b9d47", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.be94381057", "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_addkey_action_id.1c71c1dba8", "test.near.not_null_silver__actions_events_addkey_ACTION_ID.4edf0990b1", "test.near.not_null_silver__actions_events_addkey_BLOCK_ID.66f719abaa", "test.near.not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP.d14083b626", "test.near.not_null_silver__actions_events_addkey_NONCE.258a29311a", "test.near.not_null_silver__actions_events_addkey_PERMISSION.bfcc522a69", "test.near.not_null_silver__actions_events_addkey_TX_HASH.a46964f17a", "test.near.not_null_silver__actions_events_addkey__INGESTED_AT.f1ff1a384e", "test.near.not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP.2afdc88690", "test.near.unique_silver__actions_events_addkey_ACTION_ID.00489d51a8"], "model.near.silver__actions_events": ["model.near.core__fact_actions_events", "model.near.legacy__actions_events", "model.near.silver__actions_events_addkey", "model.near.silver__actions_events_function_call", "model.near.silver__transfers", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_DATA__OBJECT__VARIANT.cd719dad9e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_ID__STRING__VARCHAR.62bc853d5b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_INDEX__NUMBER.dce303241e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_NAME__STRING__VARCHAR.aef3f74e78", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_ID__NUMBER__FLOAT.863e030c52", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e9d2996911", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_TX_HASH__STRING__VARCHAR.116455b3a1", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INGESTED_AT__TIMESTAMP_NTZ.beb4919034", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.90d45f4520", "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_action_id.046450591f", "test.near.not_null_silver__actions_events_ACTION_DATA.37e6af2138", "test.near.not_null_silver__actions_events_ACTION_ID.6f23e362fe", "test.near.not_null_silver__actions_events_ACTION_INDEX.7f9e0acf59", "test.near.not_null_silver__actions_events_ACTION_NAME.d782bdc8b6", "test.near.not_null_silver__actions_events_BLOCK_ID.aee83217db", "test.near.not_null_silver__actions_events_BLOCK_TIMESTAMP.bf83654f70", "test.near.not_null_silver__actions_events_TX_HASH.70beae518e", "test.near.not_null_silver__actions_events__INGESTED_AT.ca40b88cac", "test.near.not_null_silver__actions_events__INSERTED_TIMESTAMP.df76bc586c", "test.near.unique_silver__actions_events_ACTION_ID.d139f26712"], "model.near.silver__transactions": ["model.near.core__fact_transactions", "model.near.legacy__transactions", "model.near.metrics__active_wallets", "model.near.metrics__daily_gas", "model.near.metrics__daily_transactions", "model.near.silver__actions_events", "model.near.silver__receipts", "model.near.silver__transfers", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_ATTACHED_GAS__NUMBER__FLOAT.ca8df525bf", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_HASH__STRING__VARCHAR.8e7de06afe", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER.c65f59222f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_SIGNATURE__STRING__VARCHAR.f8faaafc67", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TRANSACTION_FEE__NUMBER__FLOAT.58acc1d5fa", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_HASH__STRING__VARCHAR.c3974f687b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_RECEIVER__STRING__VARCHAR.b209d322bb", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SIGNER__STRING__VARCHAR.ea1d98a242", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX__OBJECT__VARIANT.db7514cc23", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INGESTED_AT__TIMESTAMP_NTZ.9fdb673d6d", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.82828385ba", "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "test.near.dbt_utils_unique_combination_of_columns_silver__transactions_tx_hash.8c46c2d054", "test.near.not_null_silver__transactions_ATTACHED_GAS.86e427e695", "test.near.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "test.near.not_null_silver__transactions_BLOCK_ID.ba1565770d", "test.near.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.near.not_null_silver__transactions_GAS_USED.1c943486c0", "test.near.not_null_silver__transactions_NONCE.3eac435cf9", "test.near.not_null_silver__transactions_SIGNATURE.2b66681922", "test.near.not_null_silver__transactions_TRANSACTION_FEE.f9ae18cb8e", "test.near.not_null_silver__transactions_TX.9b16114c6b", "test.near.not_null_silver__transactions_TX_HASH.8a2cc32062", "test.near.not_null_silver__transactions_TX_RECEIVER.4e66e153ff", "test.near.not_null_silver__transactions_TX_SIGNER.d32526a192", "test.near.not_null_silver__transactions__INGESTED_AT.513b40bce6", "test.near.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0", "test.near.tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.4e5bbcd183", "test.near.unique_silver__transactions_TX_HASH.1b18756021"], "model.near.silver__receipts": ["model.near.core__fact_receipts", "model.near.legacy__receipts", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_HASH__STRING__VARCHAR.dc9fadd0e2", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_ID__NUMBER__FLOAT.6bc81c63f2", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dcaed6531d", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_LOGS__ARRAY__VARIANT__OBJECT.0832b81b1a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_METADATA__VARIANT__OBJECT.8ef6ddce7f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_PROOF__ARRAY__VARIANT__OBJECT.275a178fc9", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.08bf2e2c26", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.b3550e7904", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_STATUS_VALUE__VARIANT__OBJECT.3f672f5677", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_TX_HASH__STRING__VARCHAR.ce999cda9a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INGESTED_AT__TIMESTAMP_NTZ.6370876547", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.6c0ead8d63", "test.near.dbt_utils_unique_combination_of_columns_silver__receipts_receipt_object_id.aeae58750c", "test.near.not_null_silver__receipts_BLOCK_HASH.fd390123fb", "test.near.not_null_silver__receipts_BLOCK_ID.ca1ffaba2c", "test.near.not_null_silver__receipts_BLOCK_TIMESTAMP.69686ea2e0", "test.near.not_null_silver__receipts_LOGS.0ddfd30cfe", "test.near.not_null_silver__receipts_METADATA.4fd349d877", "test.near.not_null_silver__receipts_PROOF.719e5bfe9d", "test.near.not_null_silver__receipts_RECEIPT_OBJECT_ID.06376365e4", "test.near.not_null_silver__receipts_RECEIPT_OUTCOME_ID.ddab50600d", "test.near.not_null_silver__receipts_STATUS_VALUE.65020f0461", "test.near.not_null_silver__receipts_TX_HASH.092684b07d", "test.near.not_null_silver__receipts__INGESTED_AT.2bbc2e4e48", "test.near.not_null_silver__receipts__INSERTED_TIMESTAMP.954d9b172c", "test.near.unique_silver__receipts_RECEIPT_OBJECT_ID.8a8d829305"], "model.near.silver__transfers": ["model.near.core__fact_transfers", "model.near.legacy__transfers", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_ACTION_ID__STRING__VARCHAR.17d326c4b4", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_DEPOSIT__NUMBER__FLOAT.2793622130", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_GAS_USED__NUMBER__FLOAT.37f6c7b45f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.4c63ae0a29", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_STATUS__BOOLEAN.0f35e8bff6", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSACTION_FEE__NUMBER__FLOAT.03d6f98e08", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_HASH__STRING__VARCHAR.40c789dddf", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_RECEIVER__STRING__VARCHAR.77487e0b81", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SIGNER__STRING__VARCHAR.efe1287aa8", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INGESTED_AT__TIMESTAMP_NTZ.b45a311332", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9d03af31f1", "test.near.dbt_utils_unique_combination_of_columns_silver__transfers_action_id.8f42925692", "test.near.not_null_silver__transfers_ACTION_ID.ed62984c52", "test.near.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.near.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.near.not_null_silver__transfers_GAS_USED.37695a01b1", "test.near.not_null_silver__transfers_RECEIPT_OBJECT_ID.50e76c1641", "test.near.not_null_silver__transfers_STATUS.97c41b55b7", "test.near.not_null_silver__transfers_TRANSACTION_FEE.6280370c28", "test.near.not_null_silver__transfers_TX_HASH.9444c39bdc", "test.near.not_null_silver__transfers_TX_RECEIVER.86762ea9bb", "test.near.not_null_silver__transfers_TX_SIGNER.8889abc928", "test.near.not_null_silver__transfers__INGESTED_AT.49ea10ff8e", "test.near.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a", "test.near.unique_silver__transfers_ACTION_ID.4bc39d7cca"], "model.near.silver__actions_events_function_call": ["model.near.core__fact_actions_events_function_call", "model.near.legacy__actions_events_function_call", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_ID__STRING__VARCHAR.f4da624b73", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.2d14b866b8", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ARGS__STRING__VARCHAR.52534f59ce", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.3c97559b63", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.7ecdd9da08", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bb7e2c4ae1", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.f701ff77b5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.b54f29ec51", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_TX_HASH__STRING__VARCHAR.87af394b75", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INGESTED_AT__TIMESTAMP_NTZ.0932adc172", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.fcfa131d7e", "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_function_call_action_id.e6f91ea7e7", "test.near.not_null_silver__actions_events_function_call_ACTION_ID.e5af633f77", "test.near.not_null_silver__actions_events_function_call_ACTION_NAME.3da3d81b85", "test.near.not_null_silver__actions_events_function_call_ARGS.7c406f551a", "test.near.not_null_silver__actions_events_function_call_BLOCK_ID.a6667362d4", "test.near.not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP.ee95c263c8", "test.near.not_null_silver__actions_events_function_call_METHOD_NAME.b158811477", "test.near.not_null_silver__actions_events_function_call_TX_HASH.fd126fcbeb", "test.near.not_null_silver__actions_events_function_call__INGESTED_AT.52800c1fd3", "test.near.not_null_silver__actions_events_function_call__INSERTED_TIMESTAMP.555a317053", "test.near.unique_silver__actions_events_function_call_ACTION_ID.0aebdc67ef"], "model.near.core__fact_actions_events_addkey": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ACTION_ID__STRING__VARCHAR.9e0178a829", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.70c63ee616", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.fb08eaa895", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b9da13f93b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.64aec323e5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_NONCE__NUMBER__FLOAT.cde0474be1", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.d9006fbe3b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.0746fc57ee", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.ee3c8e9b0c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_TX_HASH__STRING__VARCHAR.b088e4c818", "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_addkey_action_id.6cc237fc2b", "test.near.not_null_core__fact_actions_events_addkey_ACTION_ID.dccfec4147", "test.near.not_null_core__fact_actions_events_addkey_BLOCK_ID.dedba2fccf", "test.near.not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP.f40ba74833", "test.near.not_null_core__fact_actions_events_addkey_NONCE.00a670b423", "test.near.not_null_core__fact_actions_events_addkey_PERMISSION.784eed916e", "test.near.not_null_core__fact_actions_events_addkey_TX_HASH.e89dbaf1ea", "test.near.unique_core__fact_actions_events_addkey_ACTION_ID.216a213bdc"], "model.near.core__fact_blocks": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.7f1e1839b5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ce8453804e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.9f986cff8f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS_INCLUDED__NUMBER.e4c1b3aa07", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.64870ea308", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.523ab13c7b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.371605784f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.dd534c5f41", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.2bcb6419e4", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_ID__STRING__VARCHAR.6859f40465", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.98f9b955fd", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.46b3985524", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_GAS_PRICE__NUMBER__FLOAT.fa7e1b932c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.9e09f6d941", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.25992c91ad", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.4d169e143d", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.d82841de9b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.5a9d13bab7", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.06f7e42899", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HASH__STRING__VARCHAR.cb8c19abe8", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.1abb35f272", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.1f0ccb1649", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.962f1c1f84", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RENT_PAID__NUMBER__FLOAT.763ecc5553", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_SIGNATURE__STRING__VARCHAR.26c1b90668", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.ec94b7fc4e", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3bfbd1964d", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.920e7b7fdf", "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "test.near.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de", "test.near.not_null_core__fact_blocks_BLOCK_AUTHOR.03877d0ca8", "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT.0d9408b3d7", "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT.f8a53e4a6f", "test.near.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "test.near.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "test.near.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "test.near.not_null_core__fact_blocks_CHUNKS.f92140c302", "test.near.not_null_core__fact_blocks_CHUNKS_INCLUDED.937aec6f78", "test.near.not_null_core__fact_blocks_CHUNK_HEADERS_ROOT.180c276606", "test.near.not_null_core__fact_blocks_CHUNK_MASK.dc734c8cdc", "test.near.not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT.8452bbf40e", "test.near.not_null_core__fact_blocks_CHUNK_TX_ROOT.e511e456ca", "test.near.not_null_core__fact_blocks_EPOCH_ID.fc61bf616f", "test.near.not_null_core__fact_blocks_EVENTS.e54a49d376", "test.near.not_null_core__fact_blocks_GAS_PRICE.58aa885a95", "test.near.not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK.495c60fd78", "test.near.not_null_core__fact_blocks_LAST_FINAL_BLOCK.d990393f83", "test.near.not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION.d77e1eb866", "test.near.not_null_core__fact_blocks_NEXT_BP_HASH.a8e45079bd", "test.near.not_null_core__fact_blocks_NEXT_EPOCH_ID.bd4ec4a2ff", "test.near.not_null_core__fact_blocks_OUTCOME_ROOT.f6f91076b5", "test.near.not_null_core__fact_blocks_PREV_HASH.3d44f4d8e3", "test.near.not_null_core__fact_blocks_RANDOM_VALUE.b03444e241", "test.near.not_null_core__fact_blocks_RENT_PAID.ddb4e81a61", "test.near.not_null_core__fact_blocks_SIGNATURE.15645d592a", "test.near.not_null_core__fact_blocks_TOTAL_SUPPLY.3f37be811b", "test.near.not_null_core__fact_blocks_TX_COUNT.dd649c1087", "test.near.not_null_core__fact_blocks_VALIDATOR_PROPOSALS.07b595a2da", "test.near.not_null_core__fact_blocks_VALIDATOR_REWARD.9e6492b364", "test.near.sequence_gaps_core__fact_blocks_block_id.2dfe19480e"], "model.near.core__fact_actions_events": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.3e5207fbd8", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_ID__STRING__VARCHAR.74fc819b38", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_INDEX__NUMBER.079ff35912", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_NAME__STRING__VARCHAR.ecec2e0760", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_ID__NUMBER__FLOAT.632f6cabad", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77b3fcda85", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_TX_HASH__STRING__VARCHAR.b0c91a3528", "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_action_id.a5163dfbf7", "test.near.not_null_core__fact_actions_events_ACTION_DATA.315199ec0d", "test.near.not_null_core__fact_actions_events_ACTION_ID.afe8ac7f43", "test.near.not_null_core__fact_actions_events_ACTION_INDEX.5ac72a11ef", "test.near.not_null_core__fact_actions_events_ACTION_NAME.ce486ef218", "test.near.not_null_core__fact_actions_events_BLOCK_ID.34d4029e61", "test.near.not_null_core__fact_actions_events_BLOCK_TIMESTAMP.a689694c81", "test.near.not_null_core__fact_actions_events_TX_HASH.9a2156dfa3", "test.near.unique_core__fact_actions_events_ACTION_ID.14a38faeff"], "model.near.core__fact_receipts": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_ID__NUMBER__FLOAT.ec0ede8b55", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.131cd7814d", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.64b40f6319", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_METADATA__VARIANT__OBJECT.2b3564522a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.68f68c9ca5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.48ff7d111b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.e6844aa406", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.8d495dea59", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_TX_HASH__STRING__VARCHAR.30fd0ae348", "test.near.dbt_utils_unique_combination_of_columns_core__fact_receipts_receipt_object_id.35d39f53d3", "test.near.not_null_core__fact_receipts_BLOCK_ID.a70b3ec0f3", "test.near.not_null_core__fact_receipts_BLOCK_TIMESTAMP.2131bf1bd4", "test.near.not_null_core__fact_receipts_LOGS.7d958c6c70", "test.near.not_null_core__fact_receipts_METADATA.1c2890c002", "test.near.not_null_core__fact_receipts_PROOF.f87e0a861a", "test.near.not_null_core__fact_receipts_RECEIPT_OBJECT_ID.7a20facc22", "test.near.not_null_core__fact_receipts_RECEIPT_OUTCOME_ID.0f88cf2275", "test.near.not_null_core__fact_receipts_STATUS_VALUE.b9afe0d6c8", "test.near.not_null_core__fact_receipts_TX_HASH.6cfac33e8b", "test.near.unique_core__fact_receipts_RECEIPT_OBJECT_ID.3acffe8bbc"], "model.near.core__metrics_daily_gas": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.c7b6707f47", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dc5579812f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DATE__TIMESTAMP_NTZ.7fc22ddbd1", "test.near.not_null_core__metrics_daily_gas_AVG_GAS_PRICE.cfe52e479f", "test.near.not_null_core__metrics_daily_gas_DAILY_GAS_USED.81dbf7d774", "test.near.not_null_core__metrics_daily_gas_DATE.e93f30304c"], "model.near.core__metrics_daily_transactions": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.7aae6c528a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.c5185f3b2e", "test.near.not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS.97ecb32576", "test.near.not_null_core__metrics_daily_transactions_DATE.e6a4a28bb7"], "model.near.core__metrics_active_wallets": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.c7f44ee269", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DATE__TIMESTAMP_NTZ.c8fb0475a5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.b291db12c6", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.e470f71374", "test.near.not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS.3d580a2aec", "test.near.not_null_core__metrics_active_wallets_DATE.e216e96b9f", "test.near.not_null_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.2c18d2f5a2", "test.near.not_null_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.35aa4e3a63"], "model.near.core__fact_transactions": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.71a10af259", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_HASH__STRING__VARCHAR.a8595b41b4", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER__FLOAT.aaaed2f742", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_GAS_USED__NUMBER__FLOAT.20eb0c8c56", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_NONCE__NUMBER.ee76e273d4", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_SIGNATURE__STRING__VARCHAR.cf9e07fb1f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.c2ea03089f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_HASH__STRING__VARCHAR.22d1ce92d4", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_RECEIVER__STRING__VARCHAR.a022fd33f0", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SIGNER__STRING__VARCHAR.5e2ba493c7", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX__OBJECT__VARIANT.ddb63cbbfb", "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832", "test.near.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_hash.3d89edf2d5", "test.near.not_null_core__fact_transactions_ATTACHED_GAS.037947542a", "test.near.not_null_core__fact_transactions_BLOCK_HASH.9c04323b46", "test.near.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0", "test.near.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099", "test.near.not_null_core__fact_transactions_GAS_USED.2e66666fc1", "test.near.not_null_core__fact_transactions_NONCE.c2d5fd20f8", "test.near.not_null_core__fact_transactions_SIGNATURE.a81f4191ab", "test.near.not_null_core__fact_transactions_TRANSACTION_FEE.3a5a122a8a", "test.near.not_null_core__fact_transactions_TX.73062d241f", "test.near.not_null_core__fact_transactions_TX_HASH.39424a47eb", "test.near.not_null_core__fact_transactions_TX_RECEIVER.4aa25511f1", "test.near.not_null_core__fact_transactions_TX_SIGNER.1e3f66037b", "test.near.tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.bda374f7b7", "test.near.unique_core__fact_transactions_TX_HASH.bd5b814c00"], "model.near.core__fact_transfers": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_ACTION_ID__STRING__VARCHAR.026af98ae9", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_ID__NUMBER__FLOAT.e7d2e322db", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c7d4b2dcc4", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_DEPOSIT__NUMBER__FLOAT.ca85ed9e7b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_GAS_USED__NUMBER__FLOAT.94be9f0e75", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.43115f488b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_STATUS__BOOLEAN.627be1deff", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.ca559cda44", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_HASH__STRING__VARCHAR.57c33210d9", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_RECEIVER__STRING__VARCHAR.544777a31b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_SIGNER__STRING__VARCHAR.41f78a5cbf", "test.near.dbt_utils_unique_combination_of_columns_core__fact_transfers_action_id.c40db96f05", "test.near.not_null_core__fact_transfers_ACTION_ID.83ca5f9491", "test.near.not_null_core__fact_transfers_BLOCK_ID.648269a816", "test.near.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd", "test.near.not_null_core__fact_transfers_GAS_USED.2d21e3e13b", "test.near.not_null_core__fact_transfers_RECEIPT_OBJECT_ID.ed751abb27", "test.near.not_null_core__fact_transfers_STATUS.e9e8e89071", "test.near.not_null_core__fact_transfers_TRANSACTION_FEE.978781f3e2", "test.near.not_null_core__fact_transfers_TX_HASH.c87ad45814", "test.near.not_null_core__fact_transfers_TX_RECEIVER.b26269ec01", "test.near.not_null_core__fact_transfers_TX_SIGNER.72b64bbdc5", "test.near.unique_core__fact_transfers_ACTION_ID.255545e315"], "model.near.core__fact_actions_events_function_call": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_ID__STRING__VARCHAR.6ea7dbc24c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_NAME__STRING__VARCHAR.c7023a515b", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ARGS__STRING__VARCHAR.c1cd00ec20", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.ffc83d58d0", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.08e78462cf", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7290f88a39", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_DEPOSIT__NUMBER__FLOAT.4ce2dd5fea", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_METHOD_NAME__STRING__VARCHAR.f53ecaf4ea", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_TX_HASH__STRING__VARCHAR.35c28539f2", "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_function_call_action_id.8fa1f51914", "test.near.not_null_core__fact_actions_events_function_call_ACTION_ID.9f9becf33c", "test.near.not_null_core__fact_actions_events_function_call_ACTION_NAME.2cf18d974f", "test.near.not_null_core__fact_actions_events_function_call_ARGS.967716b874", "test.near.not_null_core__fact_actions_events_function_call_BLOCK_ID.bc91cebe92", "test.near.not_null_core__fact_actions_events_function_call_BLOCK_TIMESTAMP.ca4ba7867c", "test.near.not_null_core__fact_actions_events_function_call_METHOD_NAME.2baddbe78e", "test.near.not_null_core__fact_actions_events_function_call_TX_HASH.8d8f00d929", "test.near.unique_core__fact_actions_events_function_call_ACTION_ID.b4577325c1"], "model.near.legacy__actions_events_addkey": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ACTION_ID__STRING__VARCHAR.3f1dab391f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.595b784062", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.061fffe0f5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_INGESTED_AT__TIMESTAMP_NTZ.a51c00d639", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.131f54ed4c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_NONCE__NUMBER__FLOAT.2ec337e9fb", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.3432f433a3", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.8c9f09e891", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.484af82c3f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_TXN_HASH__STRING__VARCHAR.2fb84e452c", "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_addkey_action_id.fbca6bc6f5", "test.near.not_null_legacy__actions_events_addkey_ACTION_ID.dc8eb8f528", "test.near.not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP.5b0fded5e2", "test.near.not_null_legacy__actions_events_addkey_INGESTED_AT.44974f3f39", "test.near.not_null_legacy__actions_events_addkey_NONCE.d16bc1a85f", "test.near.not_null_legacy__actions_events_addkey_PERMISSION.4e70882555", "test.near.not_null_legacy__actions_events_addkey_TXN_HASH.2faf69db95", "test.near.unique_legacy__actions_events_addkey_ACTION_ID.40bbecd7f5"], "model.near.legacy__metrics_daily_gas": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fc74c08c1", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dee5e60275", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DATE__TIMESTAMP_NTZ.6c3efd0549", "test.near.not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE.224ef8b8fa", "test.near.not_null_legacy__metrics_daily_gas_DAILY_GAS_USED.8dde196c1f", "test.near.not_null_legacy__metrics_daily_gas_DATE.b7ce3e8705"], "model.near.legacy__transactions": [], "model.near.legacy__actions_events": [], "model.near.legacy__receipts": [], "model.near.legacy__blocks": [], "model.near.legacy__metrics_active_wallets": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.cff654759a", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DATE__TIMESTAMP_NTZ.6bef460b85", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.5b88245628", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.882a8911ad", "test.near.not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS.4936c0f6c7", "test.near.not_null_legacy__metrics_active_wallets_DATE.8088614fba", "test.near.not_null_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.4591283c55", "test.near.not_null_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.66a6e18833"], "model.near.legacy__transfers": [], "model.near.legacy__metrics_daily_transactions": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.b78d14e061", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.214854c836", "test.near.not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS.1fc65733ab", "test.near.not_null_legacy__metrics_daily_transactions_DATE.c07730a5cb"], "model.near.legacy__actions_events_function_call": ["test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_ID__STRING__VARCHAR.716a440a4c", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.9fce890a9f", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ARGS__STRING__VARCHAR.ce45913ff9", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.9693d99ead", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f9710820a2", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.a399eb9636", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_INGESTED_AT__TIMESTAMP_NTZ.78e74614e5", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.77375f0b47", "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_TXN_HASH__STRING__VARCHAR.cad6dfeab4", "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_function_call_action_id.b7dfc55b85", "test.near.not_null_legacy__actions_events_function_call_ACTION_ID.4cf07754fd", "test.near.not_null_legacy__actions_events_function_call_ACTION_NAME.da607dba3f", "test.near.not_null_legacy__actions_events_function_call_ARGS.a50d123058", "test.near.not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP.b5bd835f72", "test.near.not_null_legacy__actions_events_function_call_INGESTED_AT.59110792cd", "test.near.not_null_legacy__actions_events_function_call_METHOD_NAME.e2fe951cfd", "test.near.not_null_legacy__actions_events_function_call_TXN_HASH.727ee630e2", "test.near.unique_legacy__actions_events_function_call_ACTION_ID.e5e531935f"], "model.near.bronze__transactions": ["model.near.silver__transactions"], "model.near.bronze__blocks": ["model.near.silver__blocks"], "operation.near.near-on-run-start-0": [], "test.near.not_null_metrics__daily_gas_DATE.d5118a8fda": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DATE__TIMESTAMP_NTZ.e1d1b1fca2": [], "test.near.not_null_metrics__daily_gas_DAILY_GAS_USED.dfcbff5ad4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.6246eae8fd": [], "test.near.not_null_metrics__daily_gas_AVG_GAS_PRICE.5d03852ee5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fd6bec3a6": [], "test.near.not_null_metrics__active_wallets_DATE.0f49548353": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DATE__TIMESTAMP_NTZ.18a04c8920": [], "test.near.not_null_metrics__active_wallets_DAILY_ACTIVE_WALLETS.533dd6e2f2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.6302ce454e": [], "test.near.not_null_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.f220db236c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.bc563f5075": [], "test.near.not_null_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.06610cea73": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.3020e05b84": [], "test.near.not_null_metrics__daily_transactions_DATE.0543993236": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DATE__TIMESTAMP_NTZ.3213a9fa9c": [], "test.near.not_null_metrics__daily_transactions_DAILY_TRANSACTIONS.d6758050ca": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_metrics__daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.1c6ef5916e": [], "test.near.unique_silver__actions_events_ACTION_ID.d139f26712": [], "test.near.not_null_silver__actions_events_ACTION_ID.6f23e362fe": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_ID__STRING__VARCHAR.62bc853d5b": [], "test.near.not_null_silver__actions_events_TX_HASH.70beae518e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_TX_HASH__STRING__VARCHAR.116455b3a1": [], "test.near.not_null_silver__actions_events_BLOCK_ID.aee83217db": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_ID__NUMBER__FLOAT.863e030c52": [], "test.near.not_null_silver__actions_events_BLOCK_TIMESTAMP.bf83654f70": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e9d2996911": [], "test.near.not_null_silver__actions_events_ACTION_INDEX.7f9e0acf59": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_INDEX__NUMBER.dce303241e": [], "test.near.not_null_silver__actions_events_ACTION_NAME.d782bdc8b6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_NAME__STRING__VARCHAR.aef3f74e78": [], "test.near.not_null_silver__actions_events_ACTION_DATA.37e6af2138": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_ACTION_DATA__OBJECT__VARIANT.cd719dad9e": [], "test.near.not_null_silver__actions_events__INGESTED_AT.ca40b88cac": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INGESTED_AT__TIMESTAMP_NTZ.beb4919034": [], "test.near.not_null_silver__actions_events__INSERTED_TIMESTAMP.df76bc586c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.90d45f4520": [], "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_action_id.046450591f": [], "test.near.unique_silver__actions_events_function_call_ACTION_ID.0aebdc67ef": [], "test.near.not_null_silver__actions_events_function_call_ACTION_ID.e5af633f77": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_ID__STRING__VARCHAR.f4da624b73": [], "test.near.not_null_silver__actions_events_function_call_TX_HASH.fd126fcbeb": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_TX_HASH__STRING__VARCHAR.87af394b75": [], "test.near.not_null_silver__actions_events_function_call_BLOCK_ID.a6667362d4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.7ecdd9da08": [], "test.near.not_null_silver__actions_events_function_call_BLOCK_TIMESTAMP.ee95c263c8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bb7e2c4ae1": [], "test.near.not_null_silver__actions_events_function_call_ACTION_NAME.3da3d81b85": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.2d14b866b8": [], "test.near.not_null_silver__actions_events_function_call_METHOD_NAME.b158811477": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.b54f29ec51": [], "test.near.not_null_silver__actions_events_function_call_ARGS.7c406f551a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ARGS__STRING__VARCHAR.52534f59ce": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.f701ff77b5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.3c97559b63": [], "test.near.not_null_silver__actions_events_function_call__INGESTED_AT.52800c1fd3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INGESTED_AT__TIMESTAMP_NTZ.0932adc172": [], "test.near.not_null_silver__actions_events_function_call__INSERTED_TIMESTAMP.555a317053": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_function_call__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.fcfa131d7e": [], "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_function_call_action_id.e6f91ea7e7": [], "test.near.unique_silver__actions_events_addkey_ACTION_ID.00489d51a8": [], "test.near.not_null_silver__actions_events_addkey_ACTION_ID.4edf0990b1": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ACTION_ID__STRING__VARCHAR.b299cc7a24": [], "test.near.not_null_silver__actions_events_addkey_TX_HASH.a46964f17a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_TX_HASH__STRING__VARCHAR.746870d73b": [], "test.near.not_null_silver__actions_events_addkey_BLOCK_ID.66f719abaa": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.01c027a856": [], "test.near.not_null_silver__actions_events_addkey_BLOCK_TIMESTAMP.d14083b626": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.609a6b1a0b": [], "test.near.not_null_silver__actions_events_addkey_NONCE.258a29311a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_NONCE__NUMBER__FLOAT.efb9933073": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.cf49260aba": [], "test.near.not_null_silver__actions_events_addkey_PERMISSION.bfcc522a69": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.6bab74d21c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.e513e01b2a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.da779b1018": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.94d9b17bc3": [], "test.near.not_null_silver__actions_events_addkey__INGESTED_AT.f1ff1a384e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INGESTED_AT__TIMESTAMP_NTZ.c1950b9d47": [], "test.near.not_null_silver__actions_events_addkey__INSERTED_TIMESTAMP.2afdc88690": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__actions_events_addkey__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.be94381057": [], "test.near.dbt_utils_unique_combination_of_columns_silver__actions_events_addkey_action_id.1c71c1dba8": [], "test.near.not_null_silver__transfers_TX_HASH.9444c39bdc": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_HASH__STRING__VARCHAR.40c789dddf": [], "test.near.not_null_silver__transfers_ACTION_ID.ed62984c52": [], "test.near.unique_silver__transfers_ACTION_ID.4bc39d7cca": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_ACTION_ID__STRING__VARCHAR.17d326c4b4": [], "test.near.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": [], "test.near.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": [], "test.near.not_null_silver__transfers_TX_SIGNER.8889abc928": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SIGNER__STRING__VARCHAR.efe1287aa8": [], "test.near.not_null_silver__transfers_TX_RECEIVER.86762ea9bb": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_RECEIVER__STRING__VARCHAR.77487e0b81": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_DEPOSIT__NUMBER__FLOAT.2793622130": [], "test.near.not_null_silver__transfers_RECEIPT_OBJECT_ID.50e76c1641": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.4c63ae0a29": [], "test.near.not_null_silver__transfers_TRANSACTION_FEE.6280370c28": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSACTION_FEE__NUMBER__FLOAT.03d6f98e08": [], "test.near.not_null_silver__transfers_GAS_USED.37695a01b1": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_GAS_USED__NUMBER__FLOAT.37f6c7b45f": [], "test.near.not_null_silver__transfers_STATUS.97c41b55b7": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_STATUS__BOOLEAN.0f35e8bff6": [], "test.near.not_null_silver__transfers__INGESTED_AT.49ea10ff8e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INGESTED_AT__TIMESTAMP_NTZ.b45a311332": [], "test.near.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.9d03af31f1": [], "test.near.dbt_utils_unique_combination_of_columns_silver__transfers_action_id.8f42925692": [], "test.near.not_null_silver__receipts_BLOCK_TIMESTAMP.69686ea2e0": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dcaed6531d": [], "test.near.not_null_silver__receipts_BLOCK_HASH.fd390123fb": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_HASH__STRING__VARCHAR.dc9fadd0e2": [], "test.near.not_null_silver__receipts_TX_HASH.092684b07d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_TX_HASH__STRING__VARCHAR.ce999cda9a": [], "test.near.not_null_silver__receipts_BLOCK_ID.ca1ffaba2c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_BLOCK_ID__NUMBER__FLOAT.6bc81c63f2": [], "test.near.not_null_silver__receipts_RECEIPT_OBJECT_ID.06376365e4": [], "test.near.unique_silver__receipts_RECEIPT_OBJECT_ID.8a8d829305": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.08bf2e2c26": [], "test.near.not_null_silver__receipts_RECEIPT_OUTCOME_ID.ddab50600d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.b3550e7904": [], "test.near.not_null_silver__receipts_STATUS_VALUE.65020f0461": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_STATUS_VALUE__VARIANT__OBJECT.3f672f5677": [], "test.near.not_null_silver__receipts_LOGS.0ddfd30cfe": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_LOGS__ARRAY__VARIANT__OBJECT.0832b81b1a": [], "test.near.not_null_silver__receipts_PROOF.719e5bfe9d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_PROOF__ARRAY__VARIANT__OBJECT.275a178fc9": [], "test.near.not_null_silver__receipts_METADATA.4fd349d877": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts_METADATA__VARIANT__OBJECT.8ef6ddce7f": [], "test.near.not_null_silver__receipts__INGESTED_AT.2bbc2e4e48": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INGESTED_AT__TIMESTAMP_NTZ.6370876547": [], "test.near.not_null_silver__receipts__INSERTED_TIMESTAMP.954d9b172c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__receipts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.6c0ead8d63": [], "test.near.dbt_utils_unique_combination_of_columns_silver__receipts_receipt_object_id.aeae58750c": [], "test.near.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": [], "test.near.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.near.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": [], "test.near.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": [], "test.near.not_null_silver__blocks_BLOCK_AUTHOR.bb49b754c9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_AUTHOR__STRING__VARCHAR.f4666ef6b9": [], "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_RESULT.3d30e8c870": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.fbf6d23a9e": [], "test.near.not_null_silver__blocks_BLOCK_CHALLENGES_ROOT.fa33553147": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.094aac3d39": [], "test.near.not_null_silver__blocks_CHUNK_HEADERS_ROOT.f1b8cdfa33": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.42d0fd7136": [], "test.near.not_null_silver__blocks_CHUNK_MASK.18bc24d091": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.8f04a8e609": [], "test.near.not_null_silver__blocks_CHUNK_RECEIPTS_ROOT.6cbf5f3378": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.4ed79567e1": [], "test.near.not_null_silver__blocks_CHUNK_TX_ROOT.bff513a312": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNK_TX_ROOT__STRING__VARCHAR.5ce50838dc": [], "test.near.not_null_silver__blocks_CHUNKS.83d5b713fc": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS__ARRAY__VARIANT__OBJECT.dd17974b98": [], "test.near.not_null_silver__blocks_CHUNKS_INCLUDED.98715a934b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHUNKS_INCLUDED__NUMBER.5626b73674": [], "test.near.not_null_silver__blocks_EPOCH_ID.c0f6044087": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_ID__STRING__VARCHAR.f0cc32fbb4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.a7fd17668f": [], "test.near.not_null_silver__blocks_EVENTS.d6d4d9ddb1": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVENTS__ARRAY__VARIANT__OBJECT.4f7e7341b5": [], "test.near.not_null_silver__blocks_GAS_PRICE.d6ea3582a6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_PRICE__NUMBER__FLOAT.d986a9c078": [], "test.near.not_null_silver__blocks_LAST_DS_FINAL_BLOCK.2dd2764b73": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.55b62140ba": [], "test.near.not_null_silver__blocks_LAST_FINAL_BLOCK.cd0127605a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.012f2dca96": [], "test.near.not_null_silver__blocks_LATEST_PROTOCOL_VERSION.5aa205aa7c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.0acc8b26f1": [], "test.near.not_null_silver__blocks_NEXT_BP_HASH.8958fe32fe": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_BP_HASH__STRING__VARCHAR.5487ce1db5": [], "test.near.not_null_silver__blocks_NEXT_EPOCH_ID.fa366de380": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_EPOCH_ID__STRING__VARCHAR.75f106b40a": [], "test.near.not_null_silver__blocks_OUTCOME_ROOT.ab5b96f9d8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_OUTCOME_ROOT__STRING__VARCHAR.518869455e": [], "test.near.not_null_silver__blocks_PREV_HASH.28fbc77a14": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HASH__STRING__VARCHAR.8b1070f986": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_HEIGHT__NUMBER__FLOAT.4175a577d3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PREV_STATE_ROOT__STRING__VARCHAR.4b3704efd9": [], "test.near.not_null_silver__blocks_RANDOM_VALUE.db4ad67b9b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RANDOM_VALUE__STRING__VARCHAR.9d93972b2c": [], "test.near.not_null_silver__blocks_RENT_PAID.3c7dbecf7a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_RENT_PAID__NUMBER__FLOAT.be9c732cbc": [], "test.near.not_null_silver__blocks_SIGNATURE.a341779cdc": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIGNATURE__STRING__VARCHAR.6fdebd747e": [], "test.near.not_null_silver__blocks_TOTAL_SUPPLY.5b273acde2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_SUPPLY__NUMBER__FLOAT.67c227c99e": [], "test.near.not_null_silver__blocks_VALIDATOR_PROPOSALS.402c0d6cd4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3b5e9bf985": [], "test.near.not_null_silver__blocks_VALIDATOR_REWARD.66191ea9b3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_REWARD__NUMBER__FLOAT.3b6dba6ddd": [], "test.near.not_null_silver__blocks__INGESTED_AT.8dcde2b926": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INGESTED_AT__TIMESTAMP_NTZ.895a7802bb": [], "test.near.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": [], "test.near.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": [], "test.near.sequence_gaps_silver__blocks_block_id.c10db99188": [], "test.near.not_null_silver__transactions_BLOCK_ID.ba1565770d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": [], "test.near.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_HASH__STRING__VARCHAR.8e7de06afe": [], "test.near.not_null_silver__transactions_TX_HASH.8a2cc32062": [], "test.near.unique_silver__transactions_TX_HASH.1b18756021": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_HASH__STRING__VARCHAR.c3974f687b": [], "test.near.tx_gaps_silver__transactions_block_id__TX_HASH__tx_count.4e5bbcd183": [], "test.near.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": [], "test.near.not_null_silver__transactions_NONCE.3eac435cf9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER.c65f59222f": [], "test.near.not_null_silver__transactions_SIGNATURE.2b66681922": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_SIGNATURE__STRING__VARCHAR.f8faaafc67": [], "test.near.not_null_silver__transactions_TX_RECEIVER.4e66e153ff": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_RECEIVER__STRING__VARCHAR.b209d322bb": [], "test.near.not_null_silver__transactions_TX_SIGNER.d32526a192": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SIGNER__STRING__VARCHAR.ea1d98a242": [], "test.near.not_null_silver__transactions_TX.9b16114c6b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX__OBJECT__VARIANT.db7514cc23": [], "test.near.not_null_silver__transactions_GAS_USED.1c943486c0": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": [], "test.near.not_null_silver__transactions_ATTACHED_GAS.86e427e695": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_ATTACHED_GAS__NUMBER__FLOAT.ca8df525bf": [], "test.near.not_null_silver__transactions_TRANSACTION_FEE.f9ae18cb8e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TRANSACTION_FEE__NUMBER__FLOAT.58acc1d5fa": [], "test.near.not_null_silver__transactions__INGESTED_AT.513b40bce6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INGESTED_AT__TIMESTAMP_NTZ.9fdb673d6d": [], "test.near.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.82828385ba": [], "test.near.dbt_utils_unique_combination_of_columns_silver__transactions_tx_hash.8c46c2d054": [], "test.near.not_null_core__metrics_active_wallets_DATE.e216e96b9f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DATE__TIMESTAMP_NTZ.c8fb0475a5": [], "test.near.not_null_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS.3d580a2aec": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.c7f44ee269": [], "test.near.not_null_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.35aa4e3a63": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.e470f71374": [], "test.near.not_null_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.2c18d2f5a2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.b291db12c6": [], "test.near.not_null_core__fact_receipts_BLOCK_TIMESTAMP.2131bf1bd4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.131cd7814d": [], "test.near.not_null_core__fact_receipts_BLOCK_ID.a70b3ec0f3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_BLOCK_ID__NUMBER__FLOAT.ec0ede8b55": [], "test.near.not_null_core__fact_receipts_TX_HASH.6cfac33e8b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_TX_HASH__STRING__VARCHAR.30fd0ae348": [], "test.near.not_null_core__fact_receipts_RECEIPT_OBJECT_ID.7a20facc22": [], "test.near.unique_core__fact_receipts_RECEIPT_OBJECT_ID.3acffe8bbc": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.48ff7d111b": [], "test.near.not_null_core__fact_receipts_RECEIPT_OUTCOME_ID.0f88cf2275": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.e6844aa406": [], "test.near.not_null_core__fact_receipts_STATUS_VALUE.b9afe0d6c8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.8d495dea59": [], "test.near.not_null_core__fact_receipts_LOGS.7d958c6c70": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.64b40f6319": [], "test.near.not_null_core__fact_receipts_PROOF.f87e0a861a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.68f68c9ca5": [], "test.near.not_null_core__fact_receipts_METADATA.1c2890c002": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_receipts_METADATA__VARIANT__OBJECT.2b3564522a": [], "test.near.dbt_utils_unique_combination_of_columns_core__fact_receipts_receipt_object_id.35d39f53d3": [], "test.near.not_null_core__fact_transfers_TX_HASH.c87ad45814": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_HASH__STRING__VARCHAR.57c33210d9": [], "test.near.not_null_core__fact_transfers_ACTION_ID.83ca5f9491": [], "test.near.unique_core__fact_transfers_ACTION_ID.255545e315": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_ACTION_ID__STRING__VARCHAR.026af98ae9": [], "test.near.not_null_core__fact_transfers_BLOCK_ID.648269a816": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_ID__NUMBER__FLOAT.e7d2e322db": [], "test.near.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c7d4b2dcc4": [], "test.near.not_null_core__fact_transfers_TX_SIGNER.72b64bbdc5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_SIGNER__STRING__VARCHAR.41f78a5cbf": [], "test.near.not_null_core__fact_transfers_TX_RECEIVER.b26269ec01": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TX_RECEIVER__STRING__VARCHAR.544777a31b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_DEPOSIT__NUMBER__FLOAT.ca85ed9e7b": [], "test.near.not_null_core__fact_transfers_RECEIPT_OBJECT_ID.ed751abb27": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.43115f488b": [], "test.near.not_null_core__fact_transfers_TRANSACTION_FEE.978781f3e2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.ca559cda44": [], "test.near.not_null_core__fact_transfers_GAS_USED.2d21e3e13b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_GAS_USED__NUMBER__FLOAT.94be9f0e75": [], "test.near.not_null_core__fact_transfers_STATUS.e9e8e89071": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transfers_STATUS__BOOLEAN.627be1deff": [], "test.near.dbt_utils_unique_combination_of_columns_core__fact_transfers_action_id.c40db96f05": [], "test.near.not_null_core__metrics_daily_gas_DATE.e93f30304c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DATE__TIMESTAMP_NTZ.7fc22ddbd1": [], "test.near.not_null_core__metrics_daily_gas_DAILY_GAS_USED.81dbf7d774": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dc5579812f": [], "test.near.not_null_core__metrics_daily_gas_AVG_GAS_PRICE.cfe52e479f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.c7b6707f47": [], "test.near.not_null_core__metrics_daily_transactions_DATE.e6a4a28bb7": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.c5185f3b2e": [], "test.near.not_null_core__metrics_daily_transactions_DAILY_TRANSACTIONS.97ecb32576": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.7aae6c528a": [], "test.near.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER__FLOAT.aaaed2f742": [], "test.near.not_null_core__fact_transactions_BLOCK_HASH.9c04323b46": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_HASH__STRING__VARCHAR.a8595b41b4": [], "test.near.not_null_core__fact_transactions_TX_HASH.39424a47eb": [], "test.near.unique_core__fact_transactions_TX_HASH.bd5b814c00": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_HASH__STRING__VARCHAR.22d1ce92d4": [], "test.near.tx_gaps_core__fact_transactions_block_id__TX_HASH__tx_count.bda374f7b7": [], "test.near.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7": [], "test.near.not_null_core__fact_transactions_NONCE.c2d5fd20f8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_NONCE__NUMBER.ee76e273d4": [], "test.near.not_null_core__fact_transactions_SIGNATURE.a81f4191ab": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_SIGNATURE__STRING__VARCHAR.cf9e07fb1f": [], "test.near.not_null_core__fact_transactions_TX_RECEIVER.4aa25511f1": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_RECEIVER__STRING__VARCHAR.a022fd33f0": [], "test.near.not_null_core__fact_transactions_TX_SIGNER.1e3f66037b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SIGNER__STRING__VARCHAR.5e2ba493c7": [], "test.near.not_null_core__fact_transactions_TX.73062d241f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX__OBJECT__VARIANT.ddb63cbbfb": [], "test.near.not_null_core__fact_transactions_GAS_USED.2e66666fc1": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_GAS_USED__NUMBER__FLOAT.20eb0c8c56": [], "test.near.not_null_core__fact_transactions_ATTACHED_GAS.037947542a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.71a10af259": [], "test.near.not_null_core__fact_transactions_TRANSACTION_FEE.3a5a122a8a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.c2ea03089f": [], "test.near.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_hash.3d89edf2d5": [], "test.near.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": [], "test.near.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": [], "test.near.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": [], "test.near.not_null_core__fact_blocks_TX_COUNT.dd649c1087": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a": [], "test.near.not_null_core__fact_blocks_BLOCK_AUTHOR.03877d0ca8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.7f1e1839b5": [], "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_RESULT.0d9408b3d7": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ce8453804e": [], "test.near.not_null_core__fact_blocks_BLOCK_CHALLENGES_ROOT.f8a53e4a6f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.9f986cff8f": [], "test.near.not_null_core__fact_blocks_CHUNK_HEADERS_ROOT.180c276606": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.523ab13c7b": [], "test.near.not_null_core__fact_blocks_CHUNK_MASK.dc734c8cdc": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.371605784f": [], "test.near.not_null_core__fact_blocks_CHUNK_RECEIPTS_ROOT.8452bbf40e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.dd534c5f41": [], "test.near.not_null_core__fact_blocks_CHUNK_TX_ROOT.e511e456ca": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.2bcb6419e4": [], "test.near.not_null_core__fact_blocks_CHUNKS.f92140c302": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.64870ea308": [], "test.near.not_null_core__fact_blocks_CHUNKS_INCLUDED.937aec6f78": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHUNKS_INCLUDED__NUMBER.e4c1b3aa07": [], "test.near.not_null_core__fact_blocks_EPOCH_ID.fc61bf616f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_ID__STRING__VARCHAR.6859f40465": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.98f9b955fd": [], "test.near.not_null_core__fact_blocks_EVENTS.e54a49d376": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.46b3985524": [], "test.near.not_null_core__fact_blocks_GAS_PRICE.58aa885a95": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_GAS_PRICE__NUMBER__FLOAT.fa7e1b932c": [], "test.near.not_null_core__fact_blocks_LAST_DS_FINAL_BLOCK.495c60fd78": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.9e09f6d941": [], "test.near.not_null_core__fact_blocks_LAST_FINAL_BLOCK.d990393f83": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.25992c91ad": [], "test.near.not_null_core__fact_blocks_LATEST_PROTOCOL_VERSION.d77e1eb866": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.4d169e143d": [], "test.near.not_null_core__fact_blocks_NEXT_BP_HASH.a8e45079bd": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.d82841de9b": [], "test.near.not_null_core__fact_blocks_NEXT_EPOCH_ID.bd4ec4a2ff": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.5a9d13bab7": [], "test.near.not_null_core__fact_blocks_OUTCOME_ROOT.f6f91076b5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.06f7e42899": [], "test.near.not_null_core__fact_blocks_PREV_HASH.3d44f4d8e3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HASH__STRING__VARCHAR.cb8c19abe8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.1abb35f272": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.1f0ccb1649": [], "test.near.not_null_core__fact_blocks_RANDOM_VALUE.b03444e241": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.962f1c1f84": [], "test.near.not_null_core__fact_blocks_RENT_PAID.ddb4e81a61": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_RENT_PAID__NUMBER__FLOAT.763ecc5553": [], "test.near.not_null_core__fact_blocks_SIGNATURE.15645d592a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_SIGNATURE__STRING__VARCHAR.26c1b90668": [], "test.near.not_null_core__fact_blocks_TOTAL_SUPPLY.3f37be811b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.ec94b7fc4e": [], "test.near.not_null_core__fact_blocks_VALIDATOR_PROPOSALS.07b595a2da": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.3bfbd1964d": [], "test.near.not_null_core__fact_blocks_VALIDATOR_REWARD.9e6492b364": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.920e7b7fdf": [], "test.near.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": [], "test.near.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": [], "test.near.unique_core__fact_actions_events_ACTION_ID.14a38faeff": [], "test.near.not_null_core__fact_actions_events_ACTION_ID.afe8ac7f43": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_ID__STRING__VARCHAR.74fc819b38": [], "test.near.not_null_core__fact_actions_events_TX_HASH.9a2156dfa3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_TX_HASH__STRING__VARCHAR.b0c91a3528": [], "test.near.not_null_core__fact_actions_events_BLOCK_ID.34d4029e61": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_ID__NUMBER__FLOAT.632f6cabad": [], "test.near.not_null_core__fact_actions_events_BLOCK_TIMESTAMP.a689694c81": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77b3fcda85": [], "test.near.not_null_core__fact_actions_events_ACTION_INDEX.5ac72a11ef": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_INDEX__NUMBER.079ff35912": [], "test.near.not_null_core__fact_actions_events_ACTION_NAME.ce486ef218": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_NAME__STRING__VARCHAR.ecec2e0760": [], "test.near.not_null_core__fact_actions_events_ACTION_DATA.315199ec0d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.3e5207fbd8": [], "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_action_id.a5163dfbf7": [], "test.near.unique_core__fact_actions_events_addkey_ACTION_ID.216a213bdc": [], "test.near.not_null_core__fact_actions_events_addkey_ACTION_ID.dccfec4147": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ACTION_ID__STRING__VARCHAR.9e0178a829": [], "test.near.not_null_core__fact_actions_events_addkey_TX_HASH.e89dbaf1ea": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_TX_HASH__STRING__VARCHAR.b088e4c818": [], "test.near.not_null_core__fact_actions_events_addkey_BLOCK_ID.dedba2fccf": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_ID__NUMBER__FLOAT.fb08eaa895": [], "test.near.not_null_core__fact_actions_events_addkey_BLOCK_TIMESTAMP.f40ba74833": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b9da13f93b": [], "test.near.not_null_core__fact_actions_events_addkey_NONCE.00a670b423": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_NONCE__NUMBER__FLOAT.cde0474be1": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.0746fc57ee": [], "test.near.not_null_core__fact_actions_events_addkey_PERMISSION.784eed916e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.d9006fbe3b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.70c63ee616": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.64aec323e5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.ee3c8e9b0c": [], "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_addkey_action_id.6cc237fc2b": [], "test.near.unique_core__fact_actions_events_function_call_ACTION_ID.b4577325c1": [], "test.near.not_null_core__fact_actions_events_function_call_ACTION_ID.9f9becf33c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_ID__STRING__VARCHAR.6ea7dbc24c": [], "test.near.not_null_core__fact_actions_events_function_call_TX_HASH.8d8f00d929": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_TX_HASH__STRING__VARCHAR.35c28539f2": [], "test.near.not_null_core__fact_actions_events_function_call_BLOCK_ID.bc91cebe92": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_ID__NUMBER__FLOAT.08e78462cf": [], "test.near.not_null_core__fact_actions_events_function_call_BLOCK_TIMESTAMP.ca4ba7867c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7290f88a39": [], "test.near.not_null_core__fact_actions_events_function_call_ACTION_NAME.2cf18d974f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ACTION_NAME__STRING__VARCHAR.c7023a515b": [], "test.near.not_null_core__fact_actions_events_function_call_METHOD_NAME.2baddbe78e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_METHOD_NAME__STRING__VARCHAR.f53ecaf4ea": [], "test.near.not_null_core__fact_actions_events_function_call_ARGS.967716b874": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ARGS__STRING__VARCHAR.c1cd00ec20": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_DEPOSIT__NUMBER__FLOAT.4ce2dd5fea": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.ffc83d58d0": [], "test.near.dbt_utils_unique_combination_of_columns_core__fact_actions_events_function_call_action_id.8fa1f51914": [], "test.near.not_null_legacy__fact_transactions_BLOCK_HEIGHT.f6f420e0ca": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HEIGHT__NUMBER__FLOAT.cdbbea33c8": [], "test.near.not_null_legacy__fact_transactions_BLOCK_HASH.3e1b276ffe": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_HASH__STRING__VARCHAR.567551ac57": [], "test.near.not_null_legacy__fact_transactions_TXN_HASH.e7d990ff22": [], "test.near.unique_legacy__fact_transactions_TXN_HASH.778f45dbb7": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TXN_HASH__STRING__VARCHAR.5bfca8f9fc": [], "test.near.tx_gaps_legacy__fact_transactions_block_height__TXN_HASH__tx_count.dcf3282caa": [], "test.near.not_null_legacy__fact_transactions_BLOCK_TIMESTAMP.63bab18e0b": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_transactions_BLOCK_TIMESTAMP__day__1.8ba22e6a63": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.215332aabd": [], "test.near.not_null_legacy__fact_transactions_NONCE.d1de0f7bc3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_NONCE__NUMBER.c5ed129d92": [], "test.near.not_null_legacy__fact_transactions_SIGNATURE.7b2054b4f8": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_SIGNATURE__STRING__VARCHAR.f3af377c90": [], "test.near.not_null_legacy__fact_transactions_TX_RECEIVER.9898736721": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_RECEIVER__STRING__VARCHAR.1825318b52": [], "test.near.not_null_legacy__fact_transactions_TX_SIGNER.150b389871": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX_SIGNER__STRING__VARCHAR.4613bf6268": [], "test.near.not_null_legacy__fact_transactions_TX.cf8fb8cefd": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TX__OBJECT__VARIANT.310bce14a5": [], "test.near.not_null_legacy__fact_transactions_GAS_USED.8ba235ae95": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_GAS_USED__NUMBER__FLOAT.ceb684ac3a": [], "test.near.not_null_legacy__fact_transactions_ATTACHED_GAS.68eff6bb1f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_ATTACHED_GAS__NUMBER__FLOAT.7112e3bcc2": [], "test.near.not_null_legacy__fact_transactions_TRANSACTION_FEE.026038f06e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_TRANSACTION_FEE__NUMBER__FLOAT.4bb3f91f80": [], "test.near.not_null_legacy__fact_transactions_INGESTED_AT.18e806fe80": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transactions_INGESTED_AT__TIMESTAMP_NTZ.3cce6e8e12": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transactions_txn_hash.920aa0eac1": [], "test.near.not_null_legacy__fact_receipts_BLOCK_TIMESTAMP.0a993c019c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e94352b542": [], "test.near.not_null_legacy__fact_receipts_BLOCK_HASH.b3bb9714b6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_BLOCK_HASH__STRING__VARCHAR.bf119892a0": [], "test.near.not_null_legacy__fact_receipts_TXN_HASH.be70ce3052": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_TXN_HASH__STRING__VARCHAR.35121e913f": [], "test.near.not_null_legacy__fact_receipts_RECEIPT_OBJECT_ID.ca05b958b0": [], "test.near.unique_legacy__fact_receipts_RECEIPT_OBJECT_ID.0406b31ae4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OBJECT_ID__STRING__VARCHAR.a2943d41f6": [], "test.near.not_null_legacy__fact_receipts_RECEIPT_OUTCOME_ID.a03ccee4f9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_RECEIPT_OUTCOME_ID__ARRAY__VARIANT__OBJECT.6fe6c1421a": [], "test.near.not_null_legacy__fact_receipts_STATUS_VALUE.0d7d7478f9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_STATUS_VALUE__VARIANT__OBJECT.a0ee8199b8": [], "test.near.not_null_legacy__fact_receipts_LOGS.d78268315a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_LOGS__ARRAY__VARIANT__OBJECT.f83a3bef09": [], "test.near.not_null_legacy__fact_receipts_PROOF.a87d9a5d78": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_PROOF__ARRAY__VARIANT__OBJECT.2b1b4ea49a": [], "test.near.not_null_legacy__fact_receipts_METADATA.f0a09f639b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_METADATA__VARIANT__OBJECT.7c60b3b5d3": [], "test.near.not_null_legacy__fact_receipts_INGESTED_AT.ca007600fa": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_receipts_INGESTED_AT__TIMESTAMP_NTZ.0c3ae85bc8": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_receipts_receipt_object_id.6f207b9f68": [], "test.near.not_null_legacy__metrics_daily_gas_DATE.b7ce3e8705": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DATE__TIMESTAMP_NTZ.6c3efd0549": [], "test.near.not_null_legacy__metrics_daily_gas_DAILY_GAS_USED.8dde196c1f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_DAILY_GAS_USED__NUMBER__FLOAT.dee5e60275": [], "test.near.not_null_legacy__metrics_daily_gas_AVG_GAS_PRICE.224ef8b8fa": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_gas_AVG_GAS_PRICE__NUMBER__FLOAT.5fc74c08c1": [], "test.near.unique_legacy__actions_events_addkey_ACTION_ID.40bbecd7f5": [], "test.near.not_null_legacy__actions_events_addkey_ACTION_ID.dc8eb8f528": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ACTION_ID__STRING__VARCHAR.3f1dab391f": [], "test.near.not_null_legacy__actions_events_addkey_TXN_HASH.2faf69db95": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_TXN_HASH__STRING__VARCHAR.2fb84e452c": [], "test.near.not_null_legacy__actions_events_addkey_BLOCK_TIMESTAMP.5b0fded5e2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.061fffe0f5": [], "test.near.not_null_legacy__actions_events_addkey_NONCE.d16bc1a85f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_NONCE__NUMBER__FLOAT.2ec337e9fb": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PUBLIC_KEY__STRING__VARCHAR__None.8c9f09e891": [], "test.near.not_null_legacy__actions_events_addkey_PERMISSION.4e70882555": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_PERMISSION__STRING__VARCHAR__OBJECT__VARIANT.3432f433a3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_ALLOWANCE__NUMBER__FLOAT__None.595b784062": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_METHOD_NAME__ARRAY__VARIANT__OBJECT__None.131f54ed4c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_RECEIVER_ID__STRING__VARCHAR__None.484af82c3f": [], "test.near.not_null_legacy__actions_events_addkey_INGESTED_AT.44974f3f39": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_addkey_INGESTED_AT__TIMESTAMP_NTZ.a51c00d639": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_addkey_action_id.fbca6bc6f5": [], "test.near.not_null_legacy__metrics_daily_transactions_DATE.c07730a5cb": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DATE__TIMESTAMP_NTZ.214854c836": [], "test.near.not_null_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS.1fc65733ab": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_daily_transactions_DAILY_TRANSACTIONS__NUMBER__FLOAT.b78d14e061": [], "test.near.not_null_legacy__metrics_active_wallets_DATE.8088614fba": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DATE__TIMESTAMP_NTZ.6bef460b85": [], "test.near.not_null_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS.4936c0f6c7": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_DAILY_ACTIVE_WALLETS__NUMBER__FLOAT.cff654759a": [], "test.near.not_null_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS.66a6e18833": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_7DAY_ACTIVE_WALLETS__NUMBER__FLOAT.882a8911ad": [], "test.near.not_null_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS.4591283c55": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__metrics_active_wallets_ROLLING_30DAY_ACTIVE_WALLETS__NUMBER__FLOAT.5b88245628": [], "test.near.unique_legacy__fact_actions_events_ACTION_ID.7a6ef791b6": [], "test.near.not_null_legacy__fact_actions_events_ACTION_ID.c704b98de5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_ID__STRING__VARCHAR.104e8d459b": [], "test.near.not_null_legacy__fact_actions_events_TXN_HASH.689b1e068c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_TXN_HASH__STRING__VARCHAR.77878f662a": [], "test.near.not_null_legacy__fact_actions_events_BLOCK_TIMESTAMP.38bc1deb2d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.da1290b149": [], "test.near.not_null_legacy__fact_actions_events_ACTION_INDEX.d33d9ab9c5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_INDEX__NUMBER.6a60f2bc0c": [], "test.near.not_null_legacy__fact_actions_events_ACTION_NAME.3f266126d5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_NAME__STRING__VARCHAR.b942c238b0": [], "test.near.not_null_legacy__fact_actions_events_ACTION_DATA.291c032316": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_ACTION_DATA__OBJECT__VARIANT.cc5dcc3177": [], "test.near.not_null_legacy__fact_actions_events_INGESTED_AT.c7a191a7b2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_actions_events_INGESTED_AT__TIMESTAMP_NTZ.5635930a89": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_actions_events_action_id.df6ecf13a3": [], "test.near.not_null_legacy__fact_blocks_BLOCK_HEIGHT.0c72c24b53": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HEIGHT__NUMBER__FLOAT.0b88ef0890": [], "test.near.not_null_legacy__fact_blocks_BLOCK_TIMESTAMP.5125651933": [], "test.near.dbt_expectations_expect_row_values_to_have_recent_data_legacy__fact_blocks_BLOCK_TIMESTAMP__day__1.041b5d1089": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b0361409f6": [], "test.near.not_null_legacy__fact_blocks_BLOCK_HASH.8cbfe88315": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_HASH__STRING__VARCHAR.bab378c107": [], "test.near.not_null_legacy__fact_blocks_TX_COUNT.74c06f6cb0": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TX_COUNT__NUMBER__FLOAT.ca9ccb68ac": [], "test.near.not_null_legacy__fact_blocks_BLOCK_AUTHOR.c18782dd0a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_AUTHOR__STRING__VARCHAR.ddbca22b31": [], "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT.2cce92b62d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_RESULT__ARRAY__VARIANT__OBJECT.ebf655d3ad": [], "test.near.not_null_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT.b107e77a10": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_BLOCK_CHALLENGES_ROOT__STRING__VARCHAR.c505daa4f9": [], "test.near.not_null_legacy__fact_blocks_CHUNK_HEADERS_ROOT.f539519d87": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_HEADERS_ROOT__STRING__VARCHAR.08bc739a9a": [], "test.near.not_null_legacy__fact_blocks_CHUNK_MASK.925795b1ed": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_MASK__ARRAY__VARIANT__OBJECT.c7fc4626cd": [], "test.near.not_null_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT.09b07dc5ba": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_RECEIPTS_ROOT__STRING__VARCHAR.e5acf07216": [], "test.near.not_null_legacy__fact_blocks_CHUNK_TX_ROOT.af05587c81": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNK_TX_ROOT__STRING__VARCHAR.36cdd7f908": [], "test.near.not_null_legacy__fact_blocks_CHUNKS.a355b30fb6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS__ARRAY__VARIANT__OBJECT.8beb7e7ce9": [], "test.near.not_null_legacy__fact_blocks_CHUNKS_INCLUDED.2d284e80be": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_CHUNKS_INCLUDED__NUMBER.ed92aa0bdb": [], "test.near.not_null_legacy__fact_blocks_EPOCH_ID.de14654928": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_ID__STRING__VARCHAR.9e4c5feda2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EPOCH_SYNC_DATA_HASH__STRING__VARCHAR__None.76ae679417": [], "test.near.not_null_legacy__fact_blocks_EVENTS.40547dd206": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_EVENTS__ARRAY__VARIANT__OBJECT.a449d09069": [], "test.near.not_null_legacy__fact_blocks_GAS_PRICE.084565c029": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_GAS_PRICE__NUMBER__FLOAT.30ff82ffbf": [], "test.near.not_null_legacy__fact_blocks_LAST_DS_FINAL_BLOCK.3da8465b06": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_DS_FINAL_BLOCK__STRING__VARCHAR.49fa21b970": [], "test.near.not_null_legacy__fact_blocks_LAST_FINAL_BLOCK.4f0a0e0cfe": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LAST_FINAL_BLOCK__STRING__VARCHAR.e3b4b6a4f7": [], "test.near.not_null_legacy__fact_blocks_LATEST_PROTOCOL_VERSION.95f174308c": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_LATEST_PROTOCOL_VERSION__NUMBER__FLOAT.8aa42afa5e": [], "test.near.not_null_legacy__fact_blocks_NEXT_BP_HASH.bc6713bb7e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_BP_HASH__STRING__VARCHAR.ce6393f196": [], "test.near.not_null_legacy__fact_blocks_NEXT_EPOCH_ID.fa89d8dc9e": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_NEXT_EPOCH_ID__STRING__VARCHAR.9958696d0e": [], "test.near.not_null_legacy__fact_blocks_OUTCOME_ROOT.00db67ee0a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_OUTCOME_ROOT__STRING__VARCHAR.5fac74f8b3": [], "test.near.not_null_legacy__fact_blocks_PREV_HASH.7d1d30a300": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HASH__STRING__VARCHAR.7acd8482c3": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_HEIGHT__NUMBER__FLOAT.a1682461a9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_PREV_STATE_ROOT__STRING__VARCHAR.b44c2c0b64": [], "test.near.not_null_legacy__fact_blocks_RANDOM_VALUE.3afa0d1330": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RANDOM_VALUE__STRING__VARCHAR.d5ff9715d1": [], "test.near.not_null_legacy__fact_blocks_RENT_PAID.433829732a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_RENT_PAID__NUMBER__FLOAT.1adca7443b": [], "test.near.not_null_legacy__fact_blocks_SIGNATURE.c4c102726f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_SIGNATURE__STRING__VARCHAR.7f0ff2e091": [], "test.near.not_null_legacy__fact_blocks_TOTAL_SUPPLY.76125a8d28": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_TOTAL_SUPPLY__NUMBER__FLOAT.9e6a35d550": [], "test.near.not_null_legacy__fact_blocks_VALIDATOR_PROPOSALS.0a0009c7ce": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_PROPOSALS__ARRAY__VARIANT__OBJECT.6f1de7d549": [], "test.near.not_null_legacy__fact_blocks_VALIDATOR_REWARD.8ad521519f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_VALIDATOR_REWARD__NUMBER__FLOAT.4144fd04e2": [], "test.near.not_null_legacy__fact_blocks_INGESTED_AT.ab80b7d20d": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_blocks_INGESTED_AT__TIMESTAMP_NTZ.b4762b6393": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_blocks_block_height.f492d15aae": [], "test.near.sequence_gaps_legacy__fact_blocks_block_height.6ecba80cbc": [], "test.near.unique_legacy__actions_events_function_call_ACTION_ID.e5e531935f": [], "test.near.not_null_legacy__actions_events_function_call_ACTION_ID.4cf07754fd": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_ID__STRING__VARCHAR.716a440a4c": [], "test.near.not_null_legacy__actions_events_function_call_TXN_HASH.727ee630e2": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_TXN_HASH__STRING__VARCHAR.cad6dfeab4": [], "test.near.not_null_legacy__actions_events_function_call_BLOCK_TIMESTAMP.b5bd835f72": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f9710820a2": [], "test.near.not_null_legacy__actions_events_function_call_ACTION_NAME.da607dba3f": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ACTION_NAME__STRING__VARCHAR.9fce890a9f": [], "test.near.not_null_legacy__actions_events_function_call_METHOD_NAME.e2fe951cfd": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_METHOD_NAME__STRING__VARCHAR.77375f0b47": [], "test.near.not_null_legacy__actions_events_function_call_ARGS.a50d123058": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ARGS__STRING__VARCHAR.ce45913ff9": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_DEPOSIT__NUMBER__FLOAT.a399eb9636": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_ATTACHED_GAS__NUMBER__FLOAT.9693d99ead": [], "test.near.not_null_legacy__actions_events_function_call_INGESTED_AT.59110792cd": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__actions_events_function_call_INGESTED_AT__TIMESTAMP_NTZ.78e74614e5": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__actions_events_function_call_action_id.b7dfc55b85": [], "test.near.not_null_legacy__fact_transfers_TXN_HASH.16c59cb760": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TXN_HASH__STRING__VARCHAR.f3e369fd77": [], "test.near.not_null_legacy__fact_transfers_ACTION_ID.48c79864eb": [], "test.near.unique_legacy__fact_transfers_ACTION_ID.45c1e050b6": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_ACTION_ID__STRING__VARCHAR.1a0adccdc7": [], "test.near.not_null_legacy__fact_transfers_BLOCK_TIMESTAMP.bdbaa04704": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ac93b47b33": [], "test.near.not_null_legacy__fact_transfers_TX_SIGNER.3ef893bdb4": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_SIGNER__STRING__VARCHAR.884531b134": [], "test.near.not_null_legacy__fact_transfers_TX_RECEIVER.0a769265be": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TX_RECEIVER__STRING__VARCHAR.ff85e4d948": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_DEPOSIT__NUMBER__FLOAT.6da907196e": [], "test.near.not_null_legacy__fact_transfers_RECEIPT_OBJECT_ID.2b9042d14a": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_RECEIPT_OBJECT_ID__STRING__VARCHAR.d7f3287b6f": [], "test.near.not_null_legacy__fact_transfers_TRANSACTION_FEE.91b3d39e86": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_TRANSACTION_FEE__NUMBER__FLOAT.41dc5b0729": [], "test.near.not_null_legacy__fact_transfers_GAS_USED.2e28f8402b": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_GAS_USED__NUMBER__FLOAT.b0db67249c": [], "test.near.not_null_legacy__fact_transfers_STATUS.a8ad7ca387": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_STATUS__BOOLEAN.8326a0cd6a": [], "test.near.not_null_legacy__fact_transfers_INGESTED_AT.cb77e279c5": [], "test.near.dbt_expectations_expect_column_values_to_be_in_type_list_legacy__fact_transfers_INGESTED_AT__TIMESTAMP_NTZ.5c9c93a518": [], "test.near.dbt_utils_unique_combination_of_columns_legacy__fact_transfers_action_id.7e6c6967bf": [], "source.near.chainwalkers.near_blocks": ["model.near.bronze__blocks"], "source.near.chainwalkers.near_txs": ["model.near.bronze__transactions"], "source.near.near.blocks": [], "source.near.near.transactions": [], "source.near.near.transfers": [], "source.near.near.actions_events": [], "source.near.near.actions_events_addkey": [], "source.near.near.actions_events_function_call": []}}